
Compact_MaYA_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fec  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000119c  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000044  0800b044  0800b044  0001b044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800b088  0800b088  0002007c  2**0
                  CONTENTS
  6 .ARM          00000008  0800b088  0800b088  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800b090  0800b090  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000010  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000007c  20000000  0800b0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000518  2000007c  0800b120  0002007c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000594  0800b120  00020594  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 14 .comment      000000c2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001de9c  00000000  00000000  0002016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000058ed  00000000  00000000  0003e00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000010f0  00000000  00000000  000438f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c53  00000000  00000000  000449e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00019122  00000000  00000000  0004563b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00016d15  00000000  00000000  0005e75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00094572  00000000  00000000  00075472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004e9c  00000000  00000000  001099e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0010e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ea4 	.word	0x08007ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007ea4 	.word	0x08007ea4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <displayInputCheck>:
	        }
		clearMessage();
		}
}

void displayInputCheck(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	if(ILI9341_TouchGetCoordinates(&x, &y)){
 8000b9c:	499e      	ldr	r1, [pc, #632]	; (8000e18 <displayInputCheck+0x280>)
 8000b9e:	489f      	ldr	r0, [pc, #636]	; (8000e1c <displayInputCheck+0x284>)
 8000ba0:	f000 ffb4 	bl	8001b0c <ILI9341_TouchGetCoordinates>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8134 	beq.w	8000e14 <displayInputCheck+0x27c>
		x = 240 - x; // optional honestly, just to swap the pixel position
 8000bac:	4b9b      	ldr	r3, [pc, #620]	; (8000e1c <displayInputCheck+0x284>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b99      	ldr	r3, [pc, #612]	; (8000e1c <displayInputCheck+0x284>)
 8000bb8:	801a      	strh	r2, [r3, #0]
//		debug function
//		sendDebugMessage("x: %d, y: %d\r\n", x, y);
		switch (pageRoute) {
 8000bba:	4b99      	ldr	r3, [pc, #612]	; (8000e20 <displayInputCheck+0x288>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	f200 811f 	bhi.w	8000e02 <displayInputCheck+0x26a>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <displayInputCheck+0x34>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000c71 	.word	0x08000c71
 8000bd4:	08000d05 	.word	0x08000d05
 8000bd8:	08000dd7 	.word	0x08000dd7
			case MENU_PAGE:
				if (x > 10 && x < 230 && y > 80 - 1 && y < 120 + 1){
 8000bdc:	4b8f      	ldr	r3, [pc, #572]	; (8000e1c <displayInputCheck+0x284>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	2b0a      	cmp	r3, #10
 8000be2:	d914      	bls.n	8000c0e <displayInputCheck+0x76>
 8000be4:	4b8d      	ldr	r3, [pc, #564]	; (8000e1c <displayInputCheck+0x284>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	2be5      	cmp	r3, #229	; 0xe5
 8000bea:	d810      	bhi.n	8000c0e <displayInputCheck+0x76>
 8000bec:	4b8a      	ldr	r3, [pc, #552]	; (8000e18 <displayInputCheck+0x280>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2b4f      	cmp	r3, #79	; 0x4f
 8000bf2:	d90c      	bls.n	8000c0e <displayInputCheck+0x76>
 8000bf4:	4b88      	ldr	r3, [pc, #544]	; (8000e18 <displayInputCheck+0x280>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b78      	cmp	r3, #120	; 0x78
 8000bfa:	d808      	bhi.n	8000c0e <displayInputCheck+0x76>
					pageRoute = PLAYING_PAGE;
 8000bfc:	4b88      	ldr	r3, [pc, #544]	; (8000e20 <displayInputCheck+0x288>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
					playingPage();
 8000c02:	f001 fb63 	bl	80022cc <playingPage>
					sendDebugMessage("PlayTheShow\n");
 8000c06:	4887      	ldr	r0, [pc, #540]	; (8000e24 <displayInputCheck+0x28c>)
 8000c08:	f001 ff10 	bl	8002a2c <sendDebugMessage>
 8000c0c:	e02f      	b.n	8000c6e <displayInputCheck+0xd6>
				}
				else if (x > 10 && x < 230 && y > 150 - 1 && y < 170 + 1){
 8000c0e:	4b83      	ldr	r3, [pc, #524]	; (8000e1c <displayInputCheck+0x284>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d911      	bls.n	8000c3a <displayInputCheck+0xa2>
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <displayInputCheck+0x284>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	2be5      	cmp	r3, #229	; 0xe5
 8000c1c:	d80d      	bhi.n	8000c3a <displayInputCheck+0xa2>
 8000c1e:	4b7e      	ldr	r3, [pc, #504]	; (8000e18 <displayInputCheck+0x280>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	2b95      	cmp	r3, #149	; 0x95
 8000c24:	d909      	bls.n	8000c3a <displayInputCheck+0xa2>
 8000c26:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <displayInputCheck+0x280>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	2baa      	cmp	r3, #170	; 0xaa
 8000c2c:	d805      	bhi.n	8000c3a <displayInputCheck+0xa2>
					pageRoute = CALIBRATE_PAGE;
 8000c2e:	4b7c      	ldr	r3, [pc, #496]	; (8000e20 <displayInputCheck+0x288>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	601a      	str	r2, [r3, #0]
					calibratePage();
 8000c34:	f001 fba2 	bl	800237c <calibratePage>
 8000c38:	e019      	b.n	8000c6e <displayInputCheck+0xd6>
				}
				else if (x > 10 && x < 230 && y > 180 - 1 && y < 220 + 1){
 8000c3a:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <displayInputCheck+0x284>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2b0a      	cmp	r3, #10
 8000c40:	f240 80e1 	bls.w	8000e06 <displayInputCheck+0x26e>
 8000c44:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <displayInputCheck+0x284>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2be5      	cmp	r3, #229	; 0xe5
 8000c4a:	f200 80dc 	bhi.w	8000e06 <displayInputCheck+0x26e>
 8000c4e:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <displayInputCheck+0x280>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	2bb3      	cmp	r3, #179	; 0xb3
 8000c54:	f240 80d7 	bls.w	8000e06 <displayInputCheck+0x26e>
 8000c58:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <displayInputCheck+0x280>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	2bdc      	cmp	r3, #220	; 0xdc
 8000c5e:	f200 80d2 	bhi.w	8000e06 <displayInputCheck+0x26e>
					pageRoute = SETTINGS_PAGE;
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <displayInputCheck+0x288>)
 8000c64:	2203      	movs	r2, #3
 8000c66:	601a      	str	r2, [r3, #0]
					settingsPage();
 8000c68:	f001 fbfa 	bl	8002460 <settingsPage>
				}
				break;
 8000c6c:	e0cb      	b.n	8000e06 <displayInputCheck+0x26e>
 8000c6e:	e0ca      	b.n	8000e06 <displayInputCheck+0x26e>
			case PLAYING_PAGE:
				if (x > 0 && x < 46 && y > 0 && y < 36){
 8000c70:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <displayInputCheck+0x284>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d014      	beq.n	8000ca2 <displayInputCheck+0x10a>
 8000c78:	4b68      	ldr	r3, [pc, #416]	; (8000e1c <displayInputCheck+0x284>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8000c7e:	d810      	bhi.n	8000ca2 <displayInputCheck+0x10a>
 8000c80:	4b65      	ldr	r3, [pc, #404]	; (8000e18 <displayInputCheck+0x280>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00c      	beq.n	8000ca2 <displayInputCheck+0x10a>
 8000c88:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <displayInputCheck+0x280>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	2b23      	cmp	r3, #35	; 0x23
 8000c8e:	d808      	bhi.n	8000ca2 <displayInputCheck+0x10a>
					// Go back widget, will pause the show
					pageRoute = MENU_PAGE;
 8000c90:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <displayInputCheck+0x288>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
					menuPage();
 8000c96:	f001 fa59 	bl	800214c <menuPage>
					sendDebugMessage("PauseTheShow\n");
 8000c9a:	4863      	ldr	r0, [pc, #396]	; (8000e28 <displayInputCheck+0x290>)
 8000c9c:	f001 fec6 	bl	8002a2c <sendDebugMessage>
					HAL_Delay(500);
					clearMessage();
					pageRoute = MENU_PAGE;
					menuPage();
				}
				break;
 8000ca0:	e0b3      	b.n	8000e0a <displayInputCheck+0x272>
				} else if (x > 10 && x < 230 && y > 80 - 1 && y < 120 + 1) {
 8000ca2:	4b5e      	ldr	r3, [pc, #376]	; (8000e1c <displayInputCheck+0x284>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	f240 80af 	bls.w	8000e0a <displayInputCheck+0x272>
 8000cac:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <displayInputCheck+0x284>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	2be5      	cmp	r3, #229	; 0xe5
 8000cb2:	f200 80aa 	bhi.w	8000e0a <displayInputCheck+0x272>
 8000cb6:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <displayInputCheck+0x280>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	2b4f      	cmp	r3, #79	; 0x4f
 8000cbc:	f240 80a5 	bls.w	8000e0a <displayInputCheck+0x272>
 8000cc0:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <displayInputCheck+0x280>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	2b78      	cmp	r3, #120	; 0x78
 8000cc6:	f200 80a0 	bhi.w	8000e0a <displayInputCheck+0x272>
					clearMessage();
 8000cca:	f001 fadb 	bl	8002284 <clearMessage>
					message("Aborting...");
 8000cce:	4857      	ldr	r0, [pc, #348]	; (8000e2c <displayInputCheck+0x294>)
 8000cd0:	f001 faac 	bl	800222c <message>
					sendDebugMessage("AbortTheShow\n");
 8000cd4:	4856      	ldr	r0, [pc, #344]	; (8000e30 <displayInputCheck+0x298>)
 8000cd6:	f001 fea9 	bl	8002a2c <sendDebugMessage>
					HAL_Delay(2000);
 8000cda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cde:	f001 ff71 	bl	8002bc4 <HAL_Delay>
					clearMessage();
 8000ce2:	f001 facf 	bl	8002284 <clearMessage>
					message("Aborted!");
 8000ce6:	4853      	ldr	r0, [pc, #332]	; (8000e34 <displayInputCheck+0x29c>)
 8000ce8:	f001 faa0 	bl	800222c <message>
					HAL_Delay(500);
 8000cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf0:	f001 ff68 	bl	8002bc4 <HAL_Delay>
					clearMessage();
 8000cf4:	f001 fac6 	bl	8002284 <clearMessage>
					pageRoute = MENU_PAGE;
 8000cf8:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <displayInputCheck+0x288>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
					menuPage();
 8000cfe:	f001 fa25 	bl	800214c <menuPage>
				break;
 8000d02:	e082      	b.n	8000e0a <displayInputCheck+0x272>
			case CALIBRATE_PAGE:
				if (x > 0 && x < 46 && y > 0 && y < 36){
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <displayInputCheck+0x284>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d011      	beq.n	8000d30 <displayInputCheck+0x198>
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <displayInputCheck+0x284>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	2b2d      	cmp	r3, #45	; 0x2d
 8000d12:	d80d      	bhi.n	8000d30 <displayInputCheck+0x198>
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <displayInputCheck+0x280>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d009      	beq.n	8000d30 <displayInputCheck+0x198>
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <displayInputCheck+0x280>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	2b23      	cmp	r3, #35	; 0x23
 8000d22:	d805      	bhi.n	8000d30 <displayInputCheck+0x198>
					pageRoute = MENU_PAGE;
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <displayInputCheck+0x288>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
					menuPage();
 8000d2a:	f001 fa0f 	bl	800214c <menuPage>
 8000d2e:	e051      	b.n	8000dd4 <displayInputCheck+0x23c>
				} else if (x > 10 && x < 230 && y > 80 - 1 && y < 120 + 1){
 8000d30:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <displayInputCheck+0x284>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	2b0a      	cmp	r3, #10
 8000d36:	d924      	bls.n	8000d82 <displayInputCheck+0x1ea>
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <displayInputCheck+0x284>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2be5      	cmp	r3, #229	; 0xe5
 8000d3e:	d820      	bhi.n	8000d82 <displayInputCheck+0x1ea>
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <displayInputCheck+0x280>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	2b4f      	cmp	r3, #79	; 0x4f
 8000d46:	d91c      	bls.n	8000d82 <displayInputCheck+0x1ea>
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <displayInputCheck+0x280>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	2b78      	cmp	r3, #120	; 0x78
 8000d4e:	d818      	bhi.n	8000d82 <displayInputCheck+0x1ea>
					message("Please wait");
 8000d50:	4839      	ldr	r0, [pc, #228]	; (8000e38 <displayInputCheck+0x2a0>)
 8000d52:	f001 fa6b 	bl	800222c <message>
					messageDetail("V-Slot Linear");
 8000d56:	4839      	ldr	r0, [pc, #228]	; (8000e3c <displayInputCheck+0x2a4>)
 8000d58:	f001 fa7e 	bl	8002258 <messageDetail>
					sendDebugMessage("VSlotCalibrate\n");
 8000d5c:	4838      	ldr	r0, [pc, #224]	; (8000e40 <displayInputCheck+0x2a8>)
 8000d5e:	f001 fe65 	bl	8002a2c <sendDebugMessage>
					HAL_Delay(2000);
 8000d62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d66:	f001 ff2d 	bl	8002bc4 <HAL_Delay>
					clearMessage();
 8000d6a:	f001 fa8b 	bl	8002284 <clearMessage>
					message("Done!");
 8000d6e:	4835      	ldr	r0, [pc, #212]	; (8000e44 <displayInputCheck+0x2ac>)
 8000d70:	f001 fa5c 	bl	800222c <message>
					HAL_Delay(500);
 8000d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d78:	f001 ff24 	bl	8002bc4 <HAL_Delay>
					clearMessage();
 8000d7c:	f001 fa82 	bl	8002284 <clearMessage>
 8000d80:	e028      	b.n	8000dd4 <displayInputCheck+0x23c>

				} else if (x > 10 && x < 230 && y > 130 - 1 && y < 170 + 1){
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <displayInputCheck+0x284>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d941      	bls.n	8000e0e <displayInputCheck+0x276>
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <displayInputCheck+0x284>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2be5      	cmp	r3, #229	; 0xe5
 8000d90:	d83d      	bhi.n	8000e0e <displayInputCheck+0x276>
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <displayInputCheck+0x280>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	2b81      	cmp	r3, #129	; 0x81
 8000d98:	d939      	bls.n	8000e0e <displayInputCheck+0x276>
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <displayInputCheck+0x280>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	2baa      	cmp	r3, #170	; 0xaa
 8000da0:	d835      	bhi.n	8000e0e <displayInputCheck+0x276>
					message("Please wait");
 8000da2:	4825      	ldr	r0, [pc, #148]	; (8000e38 <displayInputCheck+0x2a0>)
 8000da4:	f001 fa42 	bl	800222c <message>
					messageDetail("Wayang's Hand");
 8000da8:	4827      	ldr	r0, [pc, #156]	; (8000e48 <displayInputCheck+0x2b0>)
 8000daa:	f001 fa55 	bl	8002258 <messageDetail>
					sendDebugMessage("WayangsHandCalibrate\n");
 8000dae:	4827      	ldr	r0, [pc, #156]	; (8000e4c <displayInputCheck+0x2b4>)
 8000db0:	f001 fe3c 	bl	8002a2c <sendDebugMessage>
					HAL_Delay(2000);
 8000db4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db8:	f001 ff04 	bl	8002bc4 <HAL_Delay>
					clearMessage();
 8000dbc:	f001 fa62 	bl	8002284 <clearMessage>
					message("Done!");
 8000dc0:	4820      	ldr	r0, [pc, #128]	; (8000e44 <displayInputCheck+0x2ac>)
 8000dc2:	f001 fa33 	bl	800222c <message>
					HAL_Delay(500);
 8000dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dca:	f001 fefb 	bl	8002bc4 <HAL_Delay>
					clearMessage();
 8000dce:	f001 fa59 	bl	8002284 <clearMessage>
				}
				break;
 8000dd2:	e01c      	b.n	8000e0e <displayInputCheck+0x276>
 8000dd4:	e01b      	b.n	8000e0e <displayInputCheck+0x276>
			case SETTINGS_PAGE:
				if (x > 0 && x < 46 && y > 0 && y < 36){
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <displayInputCheck+0x284>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d019      	beq.n	8000e12 <displayInputCheck+0x27a>
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <displayInputCheck+0x284>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b2d      	cmp	r3, #45	; 0x2d
 8000de4:	d815      	bhi.n	8000e12 <displayInputCheck+0x27a>
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <displayInputCheck+0x280>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d011      	beq.n	8000e12 <displayInputCheck+0x27a>
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <displayInputCheck+0x280>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	2b23      	cmp	r3, #35	; 0x23
 8000df4:	d80d      	bhi.n	8000e12 <displayInputCheck+0x27a>
					pageRoute = MENU_PAGE;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <displayInputCheck+0x288>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
					menuPage();
 8000dfc:	f001 f9a6 	bl	800214c <menuPage>

				}
				break;
 8000e00:	e007      	b.n	8000e12 <displayInputCheck+0x27a>
			default:
				break;
 8000e02:	bf00      	nop
 8000e04:	e006      	b.n	8000e14 <displayInputCheck+0x27c>
				break;
 8000e06:	bf00      	nop
 8000e08:	e004      	b.n	8000e14 <displayInputCheck+0x27c>
				break;
 8000e0a:	bf00      	nop
 8000e0c:	e002      	b.n	8000e14 <displayInputCheck+0x27c>
				break;
 8000e0e:	bf00      	nop
 8000e10:	e000      	b.n	8000e14 <displayInputCheck+0x27c>
				break;
 8000e12:	bf00      	nop
		}

	}
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000009a 	.word	0x2000009a
 8000e1c:	20000098 	.word	0x20000098
 8000e20:	2000009c 	.word	0x2000009c
 8000e24:	08007ed8 	.word	0x08007ed8
 8000e28:	08007ee8 	.word	0x08007ee8
 8000e2c:	08007ef8 	.word	0x08007ef8
 8000e30:	08007f04 	.word	0x08007f04
 8000e34:	08007f14 	.word	0x08007f14
 8000e38:	08007f20 	.word	0x08007f20
 8000e3c:	08007f2c 	.word	0x08007f2c
 8000e40:	08007f3c 	.word	0x08007f3c
 8000e44:	08007f4c 	.word	0x08007f4c
 8000e48:	08007f54 	.word	0x08007f54
 8000e4c:	08007f64 	.word	0x08007f64

08000e50 <waitUntilTapAnywhere>:

void waitUntilTapAnywhere(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	while(!ILI9341_TouchGetCoordinates(&x, &y)) {
 8000e54:	bf00      	nop
 8000e56:	4906      	ldr	r1, [pc, #24]	; (8000e70 <waitUntilTapAnywhere+0x20>)
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <waitUntilTapAnywhere+0x24>)
 8000e5a:	f000 fe57 	bl	8001b0c <ILI9341_TouchGetCoordinates>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f083 0301 	eor.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f5      	bne.n	8000e56 <waitUntilTapAnywhere+0x6>
		// do nothing, press the screen to break the while loop
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000009a 	.word	0x2000009a
 8000e74:	20000098 	.word	0x20000098

08000e78 <ILI9341_DrawHollowRectangleCoord>:
		}
	}
}

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eba:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 8000ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	d501      	bpl.n	8000ed0 <ILI9341_DrawHollowRectangleCoord+0x58>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 8000ed6:	883a      	ldrh	r2, [r7, #0]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 8000ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	d501      	bpl.n	8000efa <ILI9341_DrawHollowRectangleCoord+0x82>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8000efa:	7cfb      	ldrb	r3, [r7, #19]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8000f00:	887a      	ldrh	r2, [r7, #2]
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	82fb      	strh	r3, [r7, #22]
 8000f08:	e003      	b.n	8000f12 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 8000f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f14:	8afa      	ldrh	r2, [r7, #22]
 8000f16:	88b9      	ldrh	r1, [r7, #4]
 8000f18:	88f8      	ldrh	r0, [r7, #6]
 8000f1a:	f000 fd47 	bl	80019ac <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8000f1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f20:	8afa      	ldrh	r2, [r7, #22]
 8000f22:	8839      	ldrh	r1, [r7, #0]
 8000f24:	88f8      	ldrh	r0, [r7, #6]
 8000f26:	f000 fd41 	bl	80019ac <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8000f2a:	7cbb      	ldrb	r3, [r7, #18]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d104      	bne.n	8000f3a <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8000f30:	883a      	ldrh	r2, [r7, #0]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	82bb      	strh	r3, [r7, #20]
 8000f38:	e003      	b.n	8000f42 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	883b      	ldrh	r3, [r7, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 8000f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f44:	8aba      	ldrh	r2, [r7, #20]
 8000f46:	88b9      	ldrh	r1, [r7, #4]
 8000f48:	88f8      	ldrh	r0, [r7, #6]
 8000f4a:	f000 fd73 	bl	8001a34 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 8000f4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f50:	8aba      	ldrh	r2, [r7, #20]
 8000f52:	88b9      	ldrh	r1, [r7, #4]
 8000f54:	8878      	ldrh	r0, [r7, #2]
 8000f56:	f000 fd6d 	bl	8001a34 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 8000f5a:	8afb      	ldrh	r3, [r7, #22]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <ILI9341_DrawHollowRectangleCoord+0xee>
 8000f60:	8abb      	ldrh	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 8000f66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f68:	8839      	ldrh	r1, [r7, #0]
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fc5b 	bl	8001828 <ILI9341_DrawPixel>
	}
}
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}

08000f7a <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b089      	sub	sp, #36	; 0x24
 8000f7e:	af02      	add	r7, sp, #8
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	80fb      	strh	r3, [r7, #6]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da01      	bge.n	8000fc6 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000fca:	883a      	ldrh	r2, [r7, #0]
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	da01      	bge.n	8000fdc <ILI9341_DrawFilledRectangleCoord+0x62>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	823b      	strh	r3, [r7, #16]
 8000fee:	e005      	b.n	8000ffc <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 8000ffc:	7cbb      	ldrb	r3, [r7, #18]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 8001002:	883a      	ldrh	r2, [r7, #0]
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	e005      	b.n	800101c <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 8001010:	88ba      	ldrh	r2, [r7, #4]
 8001012:	883b      	ldrh	r3, [r7, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 8001018:	883b      	ldrh	r3, [r7, #0]
 800101a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 800101c:	8abc      	ldrh	r4, [r7, #20]
 800101e:	8afa      	ldrh	r2, [r7, #22]
 8001020:	89f9      	ldrh	r1, [r7, #14]
 8001022:	8a38      	ldrh	r0, [r7, #16]
 8001024:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4623      	mov	r3, r4
 800102a:	f000 fc63 	bl	80018f4 <ILI9341_DrawRectangle>
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af02      	add	r7, sp, #8
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	460b      	mov	r3, r1
 8001048:	81bb      	strh	r3, [r7, #12]
 800104a:	4613      	mov	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b1e      	cmp	r3, #30
 8001052:	d964      	bls.n	800111e <ILI9341_DrawChar+0xe8>
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db60      	blt.n	800111e <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3302      	adds	r3, #2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3303      	adds	r3, #3
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3b20      	subs	r3, #32
 800107e:	7ffa      	ldrb	r2, [r7, #31]
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	3304      	adds	r3, #4
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800108c:	7fbb      	ldrb	r3, [r7, #30]
 800108e:	b29a      	uxth	r2, r3
 8001090:	7f7b      	ldrb	r3, [r7, #29]
 8001092:	b29c      	uxth	r4, r3
 8001094:	88f9      	ldrh	r1, [r7, #6]
 8001096:	89b8      	ldrh	r0, [r7, #12]
 8001098:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4623      	mov	r3, r4
 800109e:	f000 fc29 	bl	80018f4 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	e035      	b.n	8001114 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	e02b      	b.n	8001106 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80010ae:	7f3b      	ldrb	r3, [r7, #28]
 80010b0:	6a3a      	ldr	r2, [r7, #32]
 80010b2:	fb03 f202 	mul.w	r2, r3, r2
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	10db      	asrs	r3, r3, #3
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	4413      	add	r3, r2
 80010c0:	3301      	adds	r3, #1
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2201      	movs	r2, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80010d8:	7dfa      	ldrb	r2, [r7, #23]
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	4013      	ands	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00d      	beq.n	8001100 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	89bb      	ldrh	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	b298      	uxth	r0, r3
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010fa:	4619      	mov	r1, r3
 80010fc:	f000 fb94 	bl	8001828 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	3301      	adds	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	7fbb      	ldrb	r3, [r7, #30]
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	429a      	cmp	r2, r3
 800110c:	dbcf      	blt.n	80010ae <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	3301      	adds	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
 8001114:	7f7b      	ldrb	r3, [r7, #29]
 8001116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001118:	429a      	cmp	r2, r3
 800111a:	dbc5      	blt.n	80010a8 <ILI9341_DrawChar+0x72>
 800111c:	e000      	b.n	8001120 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 800111e:	bf00      	nop
			}
		}
	}
}
 8001120:	372c      	adds	r7, #44	; 0x2c
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}

08001126 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b08a      	sub	sp, #40	; 0x28
 800112a:	af02      	add	r7, sp, #8
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	4611      	mov	r1, r2
 8001132:	461a      	mov	r2, r3
 8001134:	460b      	mov	r3, r1
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	4613      	mov	r3, r2
 800113a:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	77bb      	strb	r3, [r7, #30]

	while (*str)
 800114a:	e02d      	b.n	80011a8 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	7818      	ldrb	r0, [r3, #0]
 8001150:	88b9      	ldrh	r1, [r7, #4]
 8001152:	88fa      	ldrh	r2, [r7, #6]
 8001154:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	460b      	mov	r3, r1
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	f7ff ff69 	bl	8001036 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3b20      	subs	r3, #32
 800116a:	7ffa      	ldrb	r2, [r7, #31]
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	3304      	adds	r3, #4
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	1c9a      	adds	r2, r3, #2
 8001182:	7fbb      	ldrb	r3, [r7, #30]
 8001184:	429a      	cmp	r2, r3
 8001186:	da07      	bge.n	8001198 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	b29a      	uxth	r2, r3
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4413      	add	r3, r2
 8001190:	b29b      	uxth	r3, r3
 8001192:	3302      	adds	r3, #2
 8001194:	80fb      	strh	r3, [r7, #6]
 8001196:	e004      	b.n	80011a2 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001198:	7fbb      	ldrb	r3, [r7, #30]
 800119a:	b29a      	uxth	r2, r3
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4413      	add	r3, r2
 80011a0:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
	while (*str)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1cd      	bne.n	800114c <ILI9341_DrawText+0x26>
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_SPI_TxCpltCallback+0x24>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d105      	bne.n	80011d8 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <HAL_SPI_TxCpltCallback+0x28>)
 80011d4:	f002 fb54 	bl	8003880 <HAL_GPIO_WritePin>
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	40020000 	.word	0x40020000

080011e8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011f2:	bf00      	nop
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <ILI9341_SPI_Tx+0x30>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d1f8      	bne.n	80011f4 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <ILI9341_SPI_Tx+0x30>)
 800120a:	f003 fb21 	bl	8004850 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000a8 	.word	0x200000a8

0800121c <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001228:	bf00      	nop
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <ILI9341_SPI_TxBuffer+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b02      	cmp	r3, #2
 8001236:	d1f8      	bne.n	800122a <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	461a      	mov	r2, r3
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <ILI9341_SPI_TxBuffer+0x30>)
 8001240:	f003 fb06 	bl	8004850 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000a8 	.word	0x200000a8

08001250 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001260:	4808      	ldr	r0, [pc, #32]	; (8001284 <ILI9341_WriteCommand+0x34>)
 8001262:	f002 fb0d 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <ILI9341_WriteCommand+0x34>)
 800126e:	f002 fb07 	bl	8003880 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ffb7 	bl	80011e8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020000 	.word	0x40020000

08001288 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <ILI9341_WriteData+0x34>)
 800129a:	f002 faf1 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <ILI9341_WriteData+0x34>)
 80012a6:	f002 faeb 	bl	8003880 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff9b 	bl	80011e8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020000 	.word	0x40020000

080012c0 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <ILI9341_WriteBuffer+0x38>)
 80012d4:	f002 fad4 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <ILI9341_WriteBuffer+0x38>)
 80012e0:	f002 face 	bl	8003880 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff97 	bl	800121c <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020000 	.word	0x40020000

080012fc <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4604      	mov	r4, r0
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	461a      	mov	r2, r3
 800130a:	4623      	mov	r3, r4
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	4603      	mov	r3, r0
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]
 8001316:	4613      	mov	r3, r2
 8001318:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800133a:	202a      	movs	r0, #42	; 0x2a
 800133c:	f7ff ff88 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2104      	movs	r1, #4
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffba 	bl	80012c0 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 800135c:	883b      	ldrh	r3, [r7, #0]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	b29b      	uxth	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001366:	883b      	ldrh	r3, [r7, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800136c:	202b      	movs	r0, #43	; 0x2b
 800136e:	f7ff ff6f 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2104      	movs	r1, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ffa1 	bl	80012c0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800137e:	202c      	movs	r0, #44	; 0x2c
 8001380:	f7ff ff66 	bl	8001250 <ILI9341_WriteCommand>
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}

0800138c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <ILI9341_Reset+0x44>)
 8001398:	f002 fa72 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f001 fc11 	bl	8002bc4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <ILI9341_Reset+0x44>)
 80013aa:	f002 fa69 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f001 fc08 	bl	8002bc4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <ILI9341_Reset+0x44>)
 80013bc:	f002 fa60 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c6:	4802      	ldr	r0, [pc, #8]	; (80013d0 <ILI9341_Reset+0x44>)
 80013c8:	f002 fa5a 	bl	8003880 <HAL_GPIO_WritePin>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020000 	.word	0x40020000

080013d4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013de:	4802      	ldr	r0, [pc, #8]	; (80013e8 <ILI9341_Enable+0x14>)
 80013e0:	f002 fa4e 	bl	8003880 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020000 	.word	0x40020000

080013ec <ILI9341_Init>:

void ILI9341_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80013f0:	f7ff fff0 	bl	80013d4 <ILI9341_Enable>
	ILI9341_Reset();
 80013f4:	f7ff ffca 	bl	800138c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff ff29 	bl	8001250 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80013fe:	200a      	movs	r0, #10
 8001400:	f001 fbe0 	bl	8002bc4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001404:	20cb      	movs	r0, #203	; 0xcb
 8001406:	f7ff ff23 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800140a:	2039      	movs	r0, #57	; 0x39
 800140c:	f7ff ff3c 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001410:	202c      	movs	r0, #44	; 0x2c
 8001412:	f7ff ff39 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ff36 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800141c:	2034      	movs	r0, #52	; 0x34
 800141e:	f7ff ff33 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001422:	2002      	movs	r0, #2
 8001424:	f7ff ff30 	bl	8001288 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001428:	20cf      	movs	r0, #207	; 0xcf
 800142a:	f7ff ff11 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ff2a 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001434:	20c1      	movs	r0, #193	; 0xc1
 8001436:	f7ff ff27 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800143a:	2030      	movs	r0, #48	; 0x30
 800143c:	f7ff ff24 	bl	8001288 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001440:	20e8      	movs	r0, #232	; 0xe8
 8001442:	f7ff ff05 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001446:	2085      	movs	r0, #133	; 0x85
 8001448:	f7ff ff1e 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ff1b 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8001452:	2078      	movs	r0, #120	; 0x78
 8001454:	f7ff ff18 	bl	8001288 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001458:	20ea      	movs	r0, #234	; 0xea
 800145a:	f7ff fef9 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff ff12 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff ff0f 	bl	8001288 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800146a:	20ed      	movs	r0, #237	; 0xed
 800146c:	f7ff fef0 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f7ff ff09 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001476:	2003      	movs	r0, #3
 8001478:	f7ff ff06 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 800147c:	2012      	movs	r0, #18
 800147e:	f7ff ff03 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001482:	2081      	movs	r0, #129	; 0x81
 8001484:	f7ff ff00 	bl	8001288 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001488:	20f7      	movs	r0, #247	; 0xf7
 800148a:	f7ff fee1 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800148e:	2020      	movs	r0, #32
 8001490:	f7ff fefa 	bl	8001288 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001494:	20c0      	movs	r0, #192	; 0xc0
 8001496:	f7ff fedb 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800149a:	2023      	movs	r0, #35	; 0x23
 800149c:	f7ff fef4 	bl	8001288 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80014a0:	20c1      	movs	r0, #193	; 0xc1
 80014a2:	f7ff fed5 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80014a6:	2010      	movs	r0, #16
 80014a8:	f7ff feee 	bl	8001288 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80014ac:	20c5      	movs	r0, #197	; 0xc5
 80014ae:	f7ff fecf 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80014b2:	203e      	movs	r0, #62	; 0x3e
 80014b4:	f7ff fee8 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80014b8:	2028      	movs	r0, #40	; 0x28
 80014ba:	f7ff fee5 	bl	8001288 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80014be:	20c7      	movs	r0, #199	; 0xc7
 80014c0:	f7ff fec6 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80014c4:	2086      	movs	r0, #134	; 0x86
 80014c6:	f7ff fedf 	bl	8001288 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80014ca:	2036      	movs	r0, #54	; 0x36
 80014cc:	f7ff fec0 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80014d0:	2048      	movs	r0, #72	; 0x48
 80014d2:	f7ff fed9 	bl	8001288 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80014d6:	203a      	movs	r0, #58	; 0x3a
 80014d8:	f7ff feba 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80014dc:	2055      	movs	r0, #85	; 0x55
 80014de:	f7ff fed3 	bl	8001288 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80014e2:	20b1      	movs	r0, #177	; 0xb1
 80014e4:	f7ff feb4 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fecd 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80014ee:	2018      	movs	r0, #24
 80014f0:	f7ff feca 	bl	8001288 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80014f4:	20b6      	movs	r0, #182	; 0xb6
 80014f6:	f7ff feab 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80014fa:	2008      	movs	r0, #8
 80014fc:	f7ff fec4 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001500:	2082      	movs	r0, #130	; 0x82
 8001502:	f7ff fec1 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001506:	2027      	movs	r0, #39	; 0x27
 8001508:	f7ff febe 	bl	8001288 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800150c:	20f2      	movs	r0, #242	; 0xf2
 800150e:	f7ff fe9f 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff feb8 	bl	8001288 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001518:	2026      	movs	r0, #38	; 0x26
 800151a:	f7ff fe99 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff feb2 	bl	8001288 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001524:	20e0      	movs	r0, #224	; 0xe0
 8001526:	f7ff fe93 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800152a:	200f      	movs	r0, #15
 800152c:	f7ff feac 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001530:	2031      	movs	r0, #49	; 0x31
 8001532:	f7ff fea9 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001536:	202b      	movs	r0, #43	; 0x2b
 8001538:	f7ff fea6 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800153c:	200c      	movs	r0, #12
 800153e:	f7ff fea3 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001542:	200e      	movs	r0, #14
 8001544:	f7ff fea0 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001548:	2008      	movs	r0, #8
 800154a:	f7ff fe9d 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800154e:	204e      	movs	r0, #78	; 0x4e
 8001550:	f7ff fe9a 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001554:	20f1      	movs	r0, #241	; 0xf1
 8001556:	f7ff fe97 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800155a:	2037      	movs	r0, #55	; 0x37
 800155c:	f7ff fe94 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001560:	2007      	movs	r0, #7
 8001562:	f7ff fe91 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001566:	2010      	movs	r0, #16
 8001568:	f7ff fe8e 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800156c:	2003      	movs	r0, #3
 800156e:	f7ff fe8b 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001572:	200e      	movs	r0, #14
 8001574:	f7ff fe88 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001578:	2009      	movs	r0, #9
 800157a:	f7ff fe85 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fe82 	bl	8001288 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001584:	20e1      	movs	r0, #225	; 0xe1
 8001586:	f7ff fe63 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fe7c 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001590:	200e      	movs	r0, #14
 8001592:	f7ff fe79 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001596:	2014      	movs	r0, #20
 8001598:	f7ff fe76 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800159c:	2003      	movs	r0, #3
 800159e:	f7ff fe73 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80015a2:	2011      	movs	r0, #17
 80015a4:	f7ff fe70 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80015a8:	2007      	movs	r0, #7
 80015aa:	f7ff fe6d 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80015ae:	2031      	movs	r0, #49	; 0x31
 80015b0:	f7ff fe6a 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80015b4:	20c1      	movs	r0, #193	; 0xc1
 80015b6:	f7ff fe67 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80015ba:	2048      	movs	r0, #72	; 0x48
 80015bc:	f7ff fe64 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80015c0:	2008      	movs	r0, #8
 80015c2:	f7ff fe61 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f7ff fe5e 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80015cc:	200c      	movs	r0, #12
 80015ce:	f7ff fe5b 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80015d2:	2031      	movs	r0, #49	; 0x31
 80015d4:	f7ff fe58 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80015d8:	2036      	movs	r0, #54	; 0x36
 80015da:	f7ff fe55 	bl	8001288 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80015de:	200f      	movs	r0, #15
 80015e0:	f7ff fe52 	bl	8001288 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80015e4:	2011      	movs	r0, #17
 80015e6:	f7ff fe33 	bl	8001250 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80015ea:	2064      	movs	r0, #100	; 0x64
 80015ec:	f001 faea 	bl	8002bc4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80015f0:	2029      	movs	r0, #41	; 0x29
 80015f2:	f7ff fe2d 	bl	8001250 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f802 	bl	8001600 <ILI9341_SetRotation>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800160a:	2036      	movs	r0, #54	; 0x36
 800160c:	f7ff fe20 	bl	8001250 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f001 fad7 	bl	8002bc4 <HAL_Delay>

	switch(rotation)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d837      	bhi.n	800168c <ILI9341_SetRotation+0x8c>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <ILI9341_SetRotation+0x24>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001635 	.word	0x08001635
 8001628:	0800164b 	.word	0x0800164b
 800162c:	08001661 	.word	0x08001661
 8001630:	08001677 	.word	0x08001677
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001634:	2048      	movs	r0, #72	; 0x48
 8001636:	f7ff fe27 	bl	8001288 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <ILI9341_SetRotation+0x98>)
 800163c:	22f0      	movs	r2, #240	; 0xf0
 800163e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <ILI9341_SetRotation+0x9c>)
 8001642:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001646:	801a      	strh	r2, [r3, #0]
		break;
 8001648:	e021      	b.n	800168e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800164a:	2028      	movs	r0, #40	; 0x28
 800164c:	f7ff fe1c 	bl	8001288 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <ILI9341_SetRotation+0x98>)
 8001652:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001656:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <ILI9341_SetRotation+0x9c>)
 800165a:	22f0      	movs	r2, #240	; 0xf0
 800165c:	801a      	strh	r2, [r3, #0]
		break;
 800165e:	e016      	b.n	800168e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001660:	2088      	movs	r0, #136	; 0x88
 8001662:	f7ff fe11 	bl	8001288 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <ILI9341_SetRotation+0x98>)
 8001668:	22f0      	movs	r2, #240	; 0xf0
 800166a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <ILI9341_SetRotation+0x9c>)
 800166e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001672:	801a      	strh	r2, [r3, #0]
		break;
 8001674:	e00b      	b.n	800168e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001676:	20e8      	movs	r0, #232	; 0xe8
 8001678:	f7ff fe06 	bl	8001288 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <ILI9341_SetRotation+0x98>)
 800167e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001682:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <ILI9341_SetRotation+0x9c>)
 8001686:	22f0      	movs	r2, #240	; 0xf0
 8001688:	801a      	strh	r2, [r3, #0]
		break;
 800168a:	e000      	b.n	800168e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800168c:	bf00      	nop
	}
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000002 	.word	0x20000002
 800169c:	20000000 	.word	0x20000000

080016a0 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80016a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a4:	b08d      	sub	sp, #52	; 0x34
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	6039      	str	r1, [r7, #0]
 80016ac:	80fb      	strh	r3, [r7, #6]
 80016ae:	466b      	mov	r3, sp
 80016b0:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016be:	d202      	bcs.n	80016c6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c4:	e002      	b.n	80016cc <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80016c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	4840      	ldr	r0, [pc, #256]	; (80017d4 <ILI9341_DrawColorBurst+0x134>)
 80016d4:	f002 f8d4 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016de:	483d      	ldr	r0, [pc, #244]	; (80017d4 <ILI9341_DrawColorBurst+0x134>)
 80016e0:	f002 f8ce 	bl	8003880 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 80016ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016f0:	460b      	mov	r3, r1
 80016f2:	3b01      	subs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	2300      	movs	r3, #0
 80016f8:	4688      	mov	r8, r1
 80016fa:	4699      	mov	r9, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001710:	2300      	movs	r3, #0
 8001712:	460c      	mov	r4, r1
 8001714:	461d      	mov	r5, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	00eb      	lsls	r3, r5, #3
 8001720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001724:	00e2      	lsls	r2, r4, #3
 8001726:	1dcb      	adds	r3, r1, #7
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	ebad 0d03 	sub.w	sp, sp, r3
 8001730:	466b      	mov	r3, sp
 8001732:	3300      	adds	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
 800173a:	e00e      	b.n	800175a <ILI9341_DrawColorBurst+0xba>
	{
		BurstBuffer[j] = chifted;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	4413      	add	r3, r2
 8001742:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001746:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	3301      	adds	r3, #1
 800174c:	88fa      	ldrh	r2, [r7, #6]
 800174e:	b2d1      	uxtb	r1, r2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	3302      	adds	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
 800175a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175e:	429a      	cmp	r2, r3
 8001760:	d3ec      	bcc.n	800173c <ILI9341_DrawColorBurst+0x9c>
	}

	uint32_t SendingSize = size * 2;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001776:	fbb3 f2f2 	udiv	r2, r3, r2
 800177a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800177c:	fb01 f202 	mul.w	r2, r1, r2
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d010      	beq.n	80017ac <ILI9341_DrawColorBurst+0x10c>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	e009      	b.n	80017a4 <ILI9341_DrawColorBurst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	b29a      	uxth	r2, r3
 8001794:	230a      	movs	r3, #10
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	480f      	ldr	r0, [pc, #60]	; (80017d8 <ILI9341_DrawColorBurst+0x138>)
 800179a:	f002 fd6c 	bl	8004276 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
 80017a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d3f1      	bcc.n	8001790 <ILI9341_DrawColorBurst+0xf0>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	230a      	movs	r3, #10
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <ILI9341_DrawColorBurst+0x138>)
 80017b6:	f002 fd5e 	bl	8004276 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <ILI9341_DrawColorBurst+0x134>)
 80017c2:	f002 f85d 	bl	8003880 <HAL_GPIO_WritePin>
 80017c6:	46b5      	mov	sp, r6
}
 80017c8:	bf00      	nop
 80017ca:	3734      	adds	r7, #52	; 0x34
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d2:	bf00      	nop
 80017d4:	40020000 	.word	0x40020000
 80017d8:	200000a8 	.word	0x200000a8

080017dc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <ILI9341_FillScreen+0x44>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <ILI9341_FillScreen+0x48>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2100      	movs	r1, #0
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fd81 	bl	80012fc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <ILI9341_FillScreen+0x44>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <ILI9341_FillScreen+0x48>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	461a      	mov	r2, r3
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff44 	bl	80016a0 <ILI9341_DrawColorBurst>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000002 	.word	0x20000002
 8001824:	20000000 	.word	0x20000000

08001828 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	460b      	mov	r3, r1
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <ILI9341_DrawPixel+0xc4>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d24d      	bcs.n	80018e2 <ILI9341_DrawPixel+0xba>
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <ILI9341_DrawPixel+0xc8>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	88ba      	ldrh	r2, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d247      	bcs.n	80018e2 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	753b      	strb	r3, [r7, #20]
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	757b      	strb	r3, [r7, #21]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	3301      	adds	r3, #1
 8001866:	121b      	asrs	r3, r3, #8
 8001868:	b2db      	uxtb	r3, r3
 800186a:	75bb      	strb	r3, [r7, #22]
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	b29b      	uxth	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	743b      	strb	r3, [r7, #16]
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	747b      	strb	r3, [r7, #17]
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	121b      	asrs	r3, r3, #8
 800188c:	b2db      	uxtb	r3, r3
 800188e:	74bb      	strb	r3, [r7, #18]
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	733b      	strb	r3, [r7, #12]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80018aa:	202a      	movs	r0, #42	; 0x2a
 80018ac:	f7ff fcd0 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2104      	movs	r1, #4
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fd02 	bl	80012c0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80018bc:	202b      	movs	r0, #43	; 0x2b
 80018be:	f7ff fcc7 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	2104      	movs	r1, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fcf9 	bl	80012c0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80018ce:	202c      	movs	r0, #44	; 0x2c
 80018d0:	f7ff fcbe 	bl	8001250 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fcf0 	bl	80012c0 <ILI9341_WriteBuffer>
 80018e0:	e000      	b.n	80018e4 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018e2:	bf00      	nop
}
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000002 	.word	0x20000002
 80018f0:	20000000 	.word	0x20000000

080018f4 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	80fb      	strh	r3, [r7, #6]
 8001906:	4603      	mov	r3, r0
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <ILI9341_DrawRectangle+0xb0>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	d23d      	bcs.n	800199a <ILI9341_DrawRectangle+0xa6>
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <ILI9341_DrawRectangle+0xb4>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	88ba      	ldrh	r2, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d237      	bcs.n	800199a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4413      	add	r3, r2
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <ILI9341_DrawRectangle+0xb0>)
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	b292      	uxth	r2, r2
 8001936:	4293      	cmp	r3, r2
 8001938:	dd05      	ble.n	8001946 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <ILI9341_DrawRectangle+0xb0>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	883b      	ldrh	r3, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <ILI9341_DrawRectangle+0xb4>)
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	b292      	uxth	r2, r2
 8001952:	4293      	cmp	r3, r2
 8001954:	dd05      	ble.n	8001962 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <ILI9341_DrawRectangle+0xb4>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29a      	uxth	r2, r3
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29c      	uxth	r4, r3
 800196e:	88ba      	ldrh	r2, [r7, #4]
 8001970:	883b      	ldrh	r3, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	88b9      	ldrh	r1, [r7, #4]
 800197c:	88f8      	ldrh	r0, [r7, #6]
 800197e:	4622      	mov	r2, r4
 8001980:	f7ff fcbc 	bl	80012fc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001984:	883b      	ldrh	r3, [r7, #0]
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	461a      	mov	r2, r3
 800198e:	8b3b      	ldrh	r3, [r7, #24]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fe84 	bl	80016a0 <ILI9341_DrawColorBurst>
 8001998:	e000      	b.n	800199c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800199a:	bf00      	nop
}
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000002 	.word	0x20000002
 80019a8:	20000000 	.word	0x20000000

080019ac <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <ILI9341_DrawHLine+0x80>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d225      	bcs.n	8001a22 <ILI9341_DrawHLine+0x76>
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <ILI9341_DrawHLine+0x84>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d21f      	bcs.n	8001a22 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <ILI9341_DrawHLine+0x80>)
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	b292      	uxth	r2, r2
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd05      	ble.n	80019fe <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <ILI9341_DrawHLine+0x80>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4413      	add	r3, r2
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	88b9      	ldrh	r1, [r7, #4]
 8001a0e:	88f8      	ldrh	r0, [r7, #6]
 8001a10:	f7ff fc74 	bl	80012fc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	883b      	ldrh	r3, [r7, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fe40 	bl	80016a0 <ILI9341_DrawColorBurst>
 8001a20:	e000      	b.n	8001a24 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a22:	bf00      	nop
}
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000002 	.word	0x20000002
 8001a30:	20000000 	.word	0x20000000

08001a34 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	80fb      	strh	r3, [r7, #6]
 8001a46:	4603      	mov	r3, r0
 8001a48:	80bb      	strh	r3, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	807b      	strh	r3, [r7, #2]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <ILI9341_DrawVLine+0x80>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d225      	bcs.n	8001aaa <ILI9341_DrawVLine+0x76>
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <ILI9341_DrawVLine+0x84>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	88ba      	ldrh	r2, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d21f      	bcs.n	8001aaa <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001a6a:	88ba      	ldrh	r2, [r7, #4]
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <ILI9341_DrawVLine+0x84>)
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	b292      	uxth	r2, r2
 8001a76:	4293      	cmp	r3, r2
 8001a78:	dd05      	ble.n	8001a86 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <ILI9341_DrawVLine+0x84>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001a86:	88ba      	ldrh	r2, [r7, #4]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	88b9      	ldrh	r1, [r7, #4]
 8001a96:	88f8      	ldrh	r0, [r7, #6]
 8001a98:	f7ff fc30 	bl	80012fc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fdfc 	bl	80016a0 <ILI9341_DrawColorBurst>
 8001aa8:	e000      	b.n	8001aac <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001aaa:	bf00      	nop
}
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000002 	.word	0x20000002
 8001ab8:	20000000 	.word	0x20000000

08001abc <ILI9341_TouchSelect>:
#define READ_X 0xD0	// 208
#define READ_Y 0x90	// 144

#define TARGET_SAMPLE 8

static void ILI9341_TouchSelect() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <ILI9341_TouchSelect+0x14>)
 8001ac6:	f001 fedb 	bl	8003880 <HAL_GPIO_WritePin>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <ILI9341_TouchUnselect>:

void ILI9341_TouchUnselect() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <ILI9341_TouchUnselect+0x14>)
 8001ade:	f001 fecf 	bl	8003880 <HAL_GPIO_WritePin>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40020400 	.word	0x40020400

08001aec <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <ILI9341_TouchPressed+0x1c>)
 8001af4:	f001 feac 	bl	8003850 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40020400 	.word	0x40020400

08001b0c <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t* x, uint16_t* y) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    ILI9341_TouchSelect();
 8001b16:	f7ff ffd1 	bl	8001abc <ILI9341_TouchSelect>

    uint32_t avg_x = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 32; i++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	77bb      	strb	r3, [r7, #30]
 8001b2a:	e03f      	b.n	8001bac <ILI9341_TouchGetCoordinates+0xa0>
        if(!ILI9341_TouchPressed())
 8001b2c:	f7ff ffde 	bl	8001aec <ILI9341_TouchPressed>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d13b      	bne.n	8001bb4 <ILI9341_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	2201      	movs	r2, #1
 8001b48:	4944      	ldr	r1, [pc, #272]	; (8001c5c <ILI9341_TouchGetCoordinates+0x150>)
 8001b4a:	4845      	ldr	r0, [pc, #276]	; (8001c60 <ILI9341_TouchGetCoordinates+0x154>)
 8001b4c:	f002 fb93 	bl	8004276 <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	4941      	ldr	r1, [pc, #260]	; (8001c64 <ILI9341_TouchGetCoordinates+0x158>)
 8001b5e:	4840      	ldr	r0, [pc, #256]	; (8001c60 <ILI9341_TouchGetCoordinates+0x154>)
 8001b60:	f002 fccd 	bl	80044fe <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2201      	movs	r2, #1
 8001b6a:	493f      	ldr	r1, [pc, #252]	; (8001c68 <ILI9341_TouchGetCoordinates+0x15c>)
 8001b6c:	483c      	ldr	r0, [pc, #240]	; (8001c60 <ILI9341_TouchGetCoordinates+0x154>)
 8001b6e:	f002 fb82 	bl	8004276 <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8001b72:	f107 020c 	add.w	r2, r7, #12
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	4939      	ldr	r1, [pc, #228]	; (8001c64 <ILI9341_TouchGetCoordinates+0x158>)
 8001b80:	4837      	ldr	r0, [pc, #220]	; (8001c60 <ILI9341_TouchGetCoordinates+0x154>)
 8001b82:	f002 fcbc 	bl	80044fe <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8001b86:	7b3b      	ldrb	r3, [r7, #12]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	7b7a      	ldrb	r2, [r7, #13]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	4413      	add	r3, r2
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8001b96:	7c3b      	ldrb	r3, [r7, #16]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	7c7a      	ldrb	r2, [r7, #17]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 32; i++) {
 8001ba6:	7fbb      	ldrb	r3, [r7, #30]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	77bb      	strb	r3, [r7, #30]
 8001bac:	7fbb      	ldrb	r3, [r7, #30]
 8001bae:	2b1f      	cmp	r3, #31
 8001bb0:	d9bc      	bls.n	8001b2c <ILI9341_TouchGetCoordinates+0x20>
 8001bb2:	e000      	b.n	8001bb6 <ILI9341_TouchGetCoordinates+0xaa>
            break;
 8001bb4:	bf00      	nop
    }

    ILI9341_TouchUnselect();
 8001bb6:	f7ff ff8d 	bl	8001ad4 <ILI9341_TouchUnselect>

    if(nsamples < 32)
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	2b1f      	cmp	r3, #31
 8001bbe:	d801      	bhi.n	8001bc4 <ILI9341_TouchGetCoordinates+0xb8>
        return false;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e047      	b.n	8001c54 <ILI9341_TouchGetCoordinates+0x148>

    uint32_t raw_x = (avg_x / 32);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	61bb      	str	r3, [r7, #24]
    if(raw_x < ILI9341_TOUCH_MIN_RAW_X) raw_x = ILI9341_TOUCH_MIN_RAW_X;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d802      	bhi.n	8001bda <ILI9341_TouchGetCoordinates+0xce>
 8001bd4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001bd8:	61bb      	str	r3, [r7, #24]
    if(raw_x > ILI9341_TOUCH_MAX_RAW_X) raw_x = ILI9341_TOUCH_MAX_RAW_X;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f647 1218 	movw	r2, #31000	; 0x7918
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d902      	bls.n	8001bea <ILI9341_TouchGetCoordinates+0xde>
 8001be4:	f647 1318 	movw	r3, #31000	; 0x7918
 8001be8:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 32);
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	617b      	str	r3, [r7, #20]
    if(raw_y < ILI9341_TOUCH_MIN_RAW_X) raw_y = ILI9341_TOUCH_MIN_RAW_Y;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d802      	bhi.n	8001c00 <ILI9341_TouchGetCoordinates+0xf4>
 8001bfa:	f640 43cc 	movw	r3, #3276	; 0xccc
 8001bfe:	617b      	str	r3, [r7, #20]
    if(raw_y > ILI9341_TOUCH_MAX_RAW_Y) raw_y = ILI9341_TOUCH_MAX_RAW_Y;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f247 529e 	movw	r2, #30110	; 0x759e
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d902      	bls.n	8001c10 <ILI9341_TouchGetCoordinates+0x104>
 8001c0a:	f247 539e 	movw	r3, #30110	; 0x759e
 8001c0e:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    // UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);
//    sendDebugMessage("raw_x = %d, raw_y = %d\r\n", x, y);

    *x = (raw_x - ILI9341_TOUCH_MIN_RAW_X) * ILI9341_TOUCH_SCALE_X / (ILI9341_TOUCH_MAX_RAW_X - ILI9341_TOUCH_MIN_RAW_X);
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8001c1e:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <ILI9341_TouchGetCoordinates+0x160>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0b9b      	lsrs	r3, r3, #14
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - ILI9341_TOUCH_MIN_RAW_Y) * ILI9341_TOUCH_SCALE_Y / (ILI9341_TOUCH_MAX_RAW_Y - ILI9341_TOUCH_MIN_RAW_Y);
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
 8001c3e:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <ILI9341_TouchGetCoordinates+0x164>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	801a      	strh	r2, [r3, #0]

    return true;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08009cd4 	.word	0x08009cd4
 8001c60:	20000100 	.word	0x20000100
 8001c64:	08009cd8 	.word	0x08009cd8
 8001c68:	08009cdc 	.word	0x08009cdc
 8001c6c:	8e2e0727 	.word	0x8e2e0727
 8001c70:	1389c755 	.word	0x1389c755

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f000 ff32 	bl	8002ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f822 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c80:	f000 f954 	bl	8001f2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c84:	f000 f932 	bl	8001eec <MX_DMA_Init>
  MX_SPI1_Init();
 8001c88:	f000 f89a 	bl	8001dc0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c8c:	f000 f904 	bl	8001e98 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001c90:	f000 f882 	bl	8001d98 <MX_CRC_Init>
  MX_SPI2_Init();
 8001c94:	f000 f8ca 	bl	8001e2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  pageSetup();
 8001c98:	f000 f9cd 	bl	8002036 <pageSetup>
  firstPage();
 8001c9c:	f000 f9d4 	bl	8002048 <firstPage>
  waitUntilTapAnywhere();
 8001ca0:	f7ff f8d6 	bl	8000e50 <waitUntilTapAnywhere>
  sendDebugMessage("Hello World! from STM32Cube\n");
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <main+0x48>)
 8001ca6:	f000 fec1 	bl	8002a2c <sendDebugMessage>
  menuPage();
 8001caa:	f000 fa4f 	bl	800214c <menuPage>
  sendDebugMessage("Going to loop!\n");
 8001cae:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <main+0x4c>)
 8001cb0:	f000 febc 	bl	8002a2c <sendDebugMessage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  displayInputCheck();
 8001cb4:	f7fe ff70 	bl	8000b98 <displayInputCheck>
 8001cb8:	e7fc      	b.n	8001cb4 <main+0x40>
 8001cba:	bf00      	nop
 8001cbc:	08007f7c 	.word	0x08007f7c
 8001cc0:	08007f9c 	.word	0x08007f9c

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	; 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f005 f918 	bl	8006f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d24:	2302      	movs	r3, #2
 8001d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d30:	2302      	movs	r3, #2
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d3c:	2354      	movs	r3, #84	; 0x54
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 fdb1 	bl	80038b4 <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d58:	f000 f968 	bl	800202c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2302      	movs	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	2102      	movs	r1, #2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 f813 	bl	8003da4 <HAL_RCC_ClockConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d84:	f000 f952 	bl	800202c <Error_Handler>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3750      	adds	r7, #80	; 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_CRC_Init+0x20>)
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <MX_CRC_Init+0x24>)
 8001da0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_CRC_Init+0x20>)
 8001da4:	f001 f843 	bl	8002e2e <HAL_CRC_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001dae:	f000 f93d 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200000a0 	.word	0x200000a0
 8001dbc:	40023000 	.word	0x40023000

08001dc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <MX_SPI1_Init+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001df4:	2210      	movs	r2, #16
 8001df6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e12:	f002 f9a7 	bl	8004164 <HAL_SPI_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f000 f906 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200000a8 	.word	0x200000a8
 8001e28:	40013000 	.word	0x40013000

08001e2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI2_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e60:	2220      	movs	r2, #32
 8001e62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e7e:	f002 f971 	bl	8004164 <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 f8d0 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000100 	.word	0x20000100
 8001e94:	40003800 	.word	0x40003800

08001e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <MX_USART2_UART_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f002 fee2 	bl	8004c98 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eda:	f000 f8a7 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001b8 	.word	0x200001b8
 8001ee8:	40004400 	.word	0x40004400

08001eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_DMA_Init+0x3c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <MX_DMA_Init+0x3c>)
 8001efc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_DMA_Init+0x3c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	203b      	movs	r0, #59	; 0x3b
 8001f14:	f000 ff55 	bl	8002dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001f18:	203b      	movs	r0, #59	; 0x3b
 8001f1a:	f000 ff6e 	bl	8002dfa <HAL_NVIC_EnableIRQ>

}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a35      	ldr	r2, [pc, #212]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a27      	ldr	r2, [pc, #156]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <MX_GPIO_Init+0xf4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_PIN_Pin|RESET_PIN_Pin|DC_PIN_Pin|T_CS_PIN_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001f9c:	4821      	ldr	r0, [pc, #132]	; (8002024 <MX_GPIO_Init+0xf8>)
 8001f9e:	f001 fc6f 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	4820      	ldr	r0, [pc, #128]	; (8002028 <MX_GPIO_Init+0xfc>)
 8001fa8:	f001 fc6a 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_PIN_Pin RESET_PIN_Pin DC_PIN_Pin T_CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin|RESET_PIN_Pin|DC_PIN_Pin|T_CS_PIN_Pin;
 8001fac:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <MX_GPIO_Init+0xf8>)
 8001fc6:	f001 fabf 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = T_IRQ_PIN_Pin;
 8001fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4811      	ldr	r0, [pc, #68]	; (8002024 <MX_GPIO_Init+0xf8>)
 8001fe0:	f001 fab2 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fe4:	2340      	movs	r3, #64	; 0x40
 8001fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <MX_GPIO_Init+0xfc>)
 8001ffc:	f001 faa4 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4619      	mov	r1, r3
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_GPIO_Init+0xfc>)
 8002014:	f001 fa98 	bl	8003548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002018:	bf00      	nop
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400

0800202c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
}
 8002032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002034:	e7fe      	b.n	8002034 <Error_Handler+0x8>

08002036 <pageSetup>:
#include "check_display_input.h"

char * volumeInSettings = "20";
char * versionString = "v7.2.7	wysi Firmware w/ STM32Cube";

void pageSetup(void){
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
	ILI9341_Init();
 800203a:	f7ff f9d7 	bl	80013ec <ILI9341_Init>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	0000      	movs	r0, r0
 8002044:	0000      	movs	r0, r0
	...

08002048 <firstPage>:
void firstPage(void){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
	char * str1 = "Automated Leather";
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <firstPage+0xf0>)
 8002050:	60bb      	str	r3, [r7, #8]
	char * str2 = "Wayang Player 2025";
 8002052:	4b3a      	ldr	r3, [pc, #232]	; (800213c <firstPage+0xf4>)
 8002054:	607b      	str	r3, [r7, #4]

	ILI9341_FillScreen(WHITE);
 8002056:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800205a:	f7ff fbbf 	bl	80017dc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 800205e:	2002      	movs	r0, #2
 8002060:	f7ff face 	bl	8001600 <ILI9341_SetRotation>

	ILI9341_DrawText(str1, FONT4, 10, 149, BLACK, WHITE);
 8002064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	2300      	movs	r3, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2395      	movs	r3, #149	; 0x95
 8002070:	220a      	movs	r2, #10
 8002072:	4933      	ldr	r1, [pc, #204]	; (8002140 <firstPage+0xf8>)
 8002074:	68b8      	ldr	r0, [r7, #8]
 8002076:	f7ff f856 	bl	8001126 <ILI9341_DrawText>
	ILI9341_DrawText(str2, FONT4, 10, 169, BLACK, WHITE);
 800207a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	23a9      	movs	r3, #169	; 0xa9
 8002086:	220a      	movs	r2, #10
 8002088:	492d      	ldr	r1, [pc, #180]	; (8002140 <firstPage+0xf8>)
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff f84b 	bl	8001126 <ILI9341_DrawText>

	HAL_Delay(1000);
 8002090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002094:	f000 fd96 	bl	8002bc4 <HAL_Delay>

	// progress bar
	ILI9341_DrawHollowRectangleCoord(8, 200, 231, 219, BLACK);
 8002098:	2300      	movs	r3, #0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	23db      	movs	r3, #219	; 0xdb
 800209e:	22e7      	movs	r2, #231	; 0xe7
 80020a0:	21c8      	movs	r1, #200	; 0xc8
 80020a2:	2008      	movs	r0, #8
 80020a4:	f7fe fee8 	bl	8000e78 <ILI9341_DrawHollowRectangleCoord>
	HAL_Delay(500);
 80020a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020ac:	f000 fd8a 	bl	8002bc4 <HAL_Delay>
	for (int var = 0; var < 201; var++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e01c      	b.n	80020f0 <firstPage+0xa8>
		ILI9341_DrawRectangle(10, 202, 1.1*var, 16, BLUE);
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7fe fb66 	bl	8000788 <__aeabi_i2d>
 80020bc:	a31c      	add	r3, pc, #112	; (adr r3, 8002130 <firstPage+0xe8>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe f8e5 	bl	8000290 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fbc5 	bl	800085c <__aeabi_d2uiz>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	231f      	movs	r3, #31
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2310      	movs	r3, #16
 80020dc:	21ca      	movs	r1, #202	; 0xca
 80020de:	200a      	movs	r0, #10
 80020e0:	f7ff fc08 	bl	80018f4 <ILI9341_DrawRectangle>
		HAL_Delay(10);
 80020e4:	200a      	movs	r0, #10
 80020e6:	f000 fd6d 	bl	8002bc4 <HAL_Delay>
	for (int var = 0; var < 201; var++) {
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2bc8      	cmp	r3, #200	; 0xc8
 80020f4:	dddf      	ble.n	80020b6 <firstPage+0x6e>
	}
	HAL_Delay(100);
 80020f6:	2064      	movs	r0, #100	; 0x64
 80020f8:	f000 fd64 	bl	8002bc4 <HAL_Delay>

	// remove the progress bar
	ILI9341_DrawFilledRectangleCoord(8, 200, 232, 220, WHITE);
 80020fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	23dc      	movs	r3, #220	; 0xdc
 8002104:	22e8      	movs	r2, #232	; 0xe8
 8002106:	21c8      	movs	r1, #200	; 0xc8
 8002108:	2008      	movs	r0, #8
 800210a:	f7fe ff36 	bl	8000f7a <ILI9341_DrawFilledRectangleCoord>

	message("Opening...");
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <firstPage+0xfc>)
 8002110:	f000 f88c 	bl	800222c <message>
	HAL_Delay(2000);
 8002114:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002118:	f000 fd54 	bl	8002bc4 <HAL_Delay>
	message("Tap anywhere");
 800211c:	480a      	ldr	r0, [pc, #40]	; (8002148 <firstPage+0x100>)
 800211e:	f000 f885 	bl	800222c <message>

}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w
 8002130:	9999999a 	.word	0x9999999a
 8002134:	3ff19999 	.word	0x3ff19999
 8002138:	08007fd4 	.word	0x08007fd4
 800213c:	08007fe8 	.word	0x08007fe8
 8002140:	08008b90 	.word	0x08008b90
 8002144:	08007ffc 	.word	0x08007ffc
 8002148:	08008008 	.word	0x08008008

0800214c <menuPage>:

void menuPage(void){
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af02      	add	r7, sp, #8
	char * menuString[4] = {
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <menuPage+0xd0>)
 8002154:	463c      	mov	r4, r7
 8002156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"Play the show",
			"Calibrate",
			"Settings",
	};

	ILI9341_FillScreen(WHITE);
 800215c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002160:	f7ff fb3c 	bl	80017dc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8002164:	2002      	movs	r0, #2
 8002166:	f7ff fa4b 	bl	8001600 <ILI9341_SetRotation>
	// Blue Bar like flutter
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 800216a:	231f      	movs	r3, #31
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2323      	movs	r3, #35	; 0x23
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	2100      	movs	r1, #0
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fbbd 	bl	80018f4 <ILI9341_DrawRectangle>
	ILI9341_DrawText(menuString[0], FONT4, 10, 10, WHITE, BLUE);
 800217a:	6838      	ldr	r0, [r7, #0]
 800217c:	231f      	movs	r3, #31
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	230a      	movs	r3, #10
 8002188:	220a      	movs	r2, #10
 800218a:	4925      	ldr	r1, [pc, #148]	; (8002220 <menuPage+0xd4>)
 800218c:	f7fe ffcb 	bl	8001126 <ILI9341_DrawText>
	for (int var = 0; var < 3; ++var) {
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e02e      	b.n	80021f4 <menuPage+0xa8>
		int y_position = 30*(var + 1) + 20*var + 50;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4619      	mov	r1, r3
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	613b      	str	r3, [r7, #16]
		ILI9341_DrawRectangle(10, y_position , 220, 40, BLUE);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	b299      	uxth	r1, r3
 80021b8:	231f      	movs	r3, #31
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2328      	movs	r3, #40	; 0x28
 80021be:	22dc      	movs	r2, #220	; 0xdc
 80021c0:	200a      	movs	r0, #10
 80021c2:	f7ff fb97 	bl	80018f4 <ILI9341_DrawRectangle>
		ILI9341_DrawText(menuString[var + 1], FONT4, 30, y_position + 10, WHITE, BLUE);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	3318      	adds	r3, #24
 80021ce:	443b      	add	r3, r7
 80021d0:	f853 0c18 	ldr.w	r0, [r3, #-24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	330a      	adds	r3, #10
 80021da:	b29b      	uxth	r3, r3
 80021dc:	221f      	movs	r2, #31
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e4:	9200      	str	r2, [sp, #0]
 80021e6:	221e      	movs	r2, #30
 80021e8:	490d      	ldr	r1, [pc, #52]	; (8002220 <menuPage+0xd4>)
 80021ea:	f7fe ff9c 	bl	8001126 <ILI9341_DrawText>
	for (int var = 0; var < 3; ++var) {
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	ddcd      	ble.n	8002196 <menuPage+0x4a>
	};

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <menuPage+0xd8>)
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	231f      	movs	r3, #31
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f240 1331 	movw	r3, #305	; 0x131
 800220c:	2205      	movs	r2, #5
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <menuPage+0xdc>)
 8002210:	f7fe ff89 	bl	8001126 <ILI9341_DrawText>
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	08008048 	.word	0x08008048
 8002220:	08008b90 	.word	0x08008b90
 8002224:	20000008 	.word	0x20000008
 8002228:	080083ac 	.word	0x080083ac

0800222c <message>:

void message(char *msg){
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af02      	add	r7, sp, #8
 8002232:	6078      	str	r0, [r7, #4]
	ILI9341_DrawText(msg, FONT2, 60, 269, WHITE, BLACK);
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f240 130d 	movw	r3, #269	; 0x10d
 8002242:	223c      	movs	r2, #60	; 0x3c
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <message+0x28>)
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe ff6d 	bl	8001126 <ILI9341_DrawText>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	080083ac 	.word	0x080083ac

08002258 <messageDetail>:

void messageDetail(char * msg){
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
	ILI9341_DrawText(msg, FONT2, 60, 284, WHITE, BLACK);
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800226e:	223c      	movs	r2, #60	; 0x3c
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <messageDetail+0x28>)
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe ff57 	bl	8001126 <ILI9341_DrawText>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	080083ac 	.word	0x080083ac

08002284 <clearMessage>:

void clearMessage(){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af02      	add	r7, sp, #8
	ILI9341_DrawText("                                                 ", FONT4, 10, 269, WHITE, WHITE);
 800228a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	f240 130d 	movw	r3, #269	; 0x10d
 800229a:	220a      	movs	r2, #10
 800229c:	4909      	ldr	r1, [pc, #36]	; (80022c4 <clearMessage+0x40>)
 800229e:	480a      	ldr	r0, [pc, #40]	; (80022c8 <clearMessage+0x44>)
 80022a0:	f7fe ff41 	bl	8001126 <ILI9341_DrawText>
	ILI9341_DrawText("                                                 ", FONT4, 10, 284, WHITE, WHITE);
 80022a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80022b4:	220a      	movs	r2, #10
 80022b6:	4903      	ldr	r1, [pc, #12]	; (80022c4 <clearMessage+0x40>)
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <clearMessage+0x44>)
 80022ba:	f7fe ff34 	bl	8001126 <ILI9341_DrawText>
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	08008b90 	.word	0x08008b90
 80022c8:	08008058 	.word	0x08008058

080022cc <playingPage>:

void playingPage(){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(WHITE);
 80022d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022d6:	f7ff fa81 	bl	80017dc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 80022da:	2002      	movs	r0, #2
 80022dc:	f7ff f990 	bl	8001600 <ILI9341_SetRotation>
	// Blue Bar like flutter
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 80022e0:	231f      	movs	r3, #31
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2323      	movs	r3, #35	; 0x23
 80022e6:	22f0      	movs	r2, #240	; 0xf0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff fb02 	bl	80018f4 <ILI9341_DrawRectangle>
	ILI9341_DrawText("< Back", FONT4, 10, 10, WHITE, BLUE);
 80022f0:	231f      	movs	r3, #31
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	230a      	movs	r3, #10
 80022fc:	220a      	movs	r2, #10
 80022fe:	4919      	ldr	r1, [pc, #100]	; (8002364 <playingPage+0x98>)
 8002300:	4819      	ldr	r0, [pc, #100]	; (8002368 <playingPage+0x9c>)
 8002302:	f7fe ff10 	bl	8001126 <ILI9341_DrawText>

//	ILI9341_DrawText("Play the show page!", FONT4, 10, 159 + 10, BLUE, WHITE);

	ILI9341_DrawRectangle(10, 80 , 220, 40, BLUE);
 8002306:	231f      	movs	r3, #31
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2328      	movs	r3, #40	; 0x28
 800230c:	22dc      	movs	r2, #220	; 0xdc
 800230e:	2150      	movs	r1, #80	; 0x50
 8002310:	200a      	movs	r0, #10
 8002312:	f7ff faef 	bl	80018f4 <ILI9341_DrawRectangle>
	ILI9341_DrawText("Abort", FONT4, 30, 80 + 10, WHITE, BLUE);
 8002316:	231f      	movs	r3, #31
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	235a      	movs	r3, #90	; 0x5a
 8002322:	221e      	movs	r2, #30
 8002324:	490f      	ldr	r1, [pc, #60]	; (8002364 <playingPage+0x98>)
 8002326:	4811      	ldr	r0, [pc, #68]	; (800236c <playingPage+0xa0>)
 8002328:	f7fe fefd 	bl	8001126 <ILI9341_DrawText>

	ILI9341_DrawText("Currently playing the show...", FONT2, 10, 269, WHITE, BLACK);
 800232c:	2300      	movs	r3, #0
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f240 130d 	movw	r3, #269	; 0x10d
 800233a:	220a      	movs	r2, #10
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <playingPage+0xa4>)
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <playingPage+0xa8>)
 8002340:	f7fe fef1 	bl	8001126 <ILI9341_DrawText>

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <playingPage+0xac>)
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	231f      	movs	r3, #31
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	f240 1331 	movw	r3, #305	; 0x131
 8002356:	2205      	movs	r2, #5
 8002358:	4905      	ldr	r1, [pc, #20]	; (8002370 <playingPage+0xa4>)
 800235a:	f7fe fee4 	bl	8001126 <ILI9341_DrawText>

}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	08008b90 	.word	0x08008b90
 8002368:	0800808c 	.word	0x0800808c
 800236c:	08008094 	.word	0x08008094
 8002370:	080083ac 	.word	0x080083ac
 8002374:	0800809c 	.word	0x0800809c
 8002378:	20000008 	.word	0x20000008

0800237c <calibratePage>:

void calibratePage(){
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
	const char * calibrateString[2] = {
 8002382:	4a32      	ldr	r2, [pc, #200]	; (800244c <calibratePage+0xd0>)
 8002384:	463b      	mov	r3, r7
 8002386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800238a:	e883 0003 	stmia.w	r3, {r0, r1}
			"V-Slot Linear",
			"Wayang's Hand"
	};
	ILI9341_FillScreen(WHITE);
 800238e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002392:	f7ff fa23 	bl	80017dc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8002396:	2002      	movs	r0, #2
 8002398:	f7ff f932 	bl	8001600 <ILI9341_SetRotation>
	// Flutter like blue bar
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 800239c:	231f      	movs	r3, #31
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2323      	movs	r3, #35	; 0x23
 80023a2:	22f0      	movs	r2, #240	; 0xf0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff faa4 	bl	80018f4 <ILI9341_DrawRectangle>
	ILI9341_DrawText("< Back", FONT4, 10, 10, WHITE, BLUE);
 80023ac:	231f      	movs	r3, #31
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	230a      	movs	r3, #10
 80023b8:	220a      	movs	r2, #10
 80023ba:	4925      	ldr	r1, [pc, #148]	; (8002450 <calibratePage+0xd4>)
 80023bc:	4825      	ldr	r0, [pc, #148]	; (8002454 <calibratePage+0xd8>)
 80023be:	f7fe feb2 	bl	8001126 <ILI9341_DrawText>

//	ILI9341_DrawText("Calibrating page!", FONT4, 10, 159 + 10, BLUE, WHITE);
	for (int var = 0; var < 2; ++var) {
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	e02d      	b.n	8002424 <calibratePage+0xa8>
		int y_position = 30*(var + 1) + 20*var + 50;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4619      	mov	r1, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3332      	adds	r3, #50	; 0x32
 80023e4:	60bb      	str	r3, [r7, #8]
		ILI9341_DrawRectangle(10, y_position , 220, 40, BLUE);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	b299      	uxth	r1, r3
 80023ea:	231f      	movs	r3, #31
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2328      	movs	r3, #40	; 0x28
 80023f0:	22dc      	movs	r2, #220	; 0xdc
 80023f2:	200a      	movs	r0, #10
 80023f4:	f7ff fa7e 	bl	80018f4 <ILI9341_DrawRectangle>
		ILI9341_DrawText(calibrateString[var], FONT4, 30, y_position + 10, WHITE, BLUE);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3310      	adds	r3, #16
 80023fe:	443b      	add	r3, r7
 8002400:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	b29b      	uxth	r3, r3
 8002408:	330a      	adds	r3, #10
 800240a:	b29b      	uxth	r3, r3
 800240c:	221f      	movs	r2, #31
 800240e:	9201      	str	r2, [sp, #4]
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	9200      	str	r2, [sp, #0]
 8002416:	221e      	movs	r2, #30
 8002418:	490d      	ldr	r1, [pc, #52]	; (8002450 <calibratePage+0xd4>)
 800241a:	f7fe fe84 	bl	8001126 <ILI9341_DrawText>
	for (int var = 0; var < 2; ++var) {
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	ddce      	ble.n	80023c8 <calibratePage+0x4c>
	};

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <calibratePage+0xdc>)
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	231f      	movs	r3, #31
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f240 1331 	movw	r3, #305	; 0x131
 800243c:	2205      	movs	r2, #5
 800243e:	4907      	ldr	r1, [pc, #28]	; (800245c <calibratePage+0xe0>)
 8002440:	f7fe fe71 	bl	8001126 <ILI9341_DrawText>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	080080dc 	.word	0x080080dc
 8002450:	08008b90 	.word	0x08008b90
 8002454:	0800808c 	.word	0x0800808c
 8002458:	20000008 	.word	0x20000008
 800245c:	080083ac 	.word	0x080083ac

08002460 <settingsPage>:

void settingsPage(){
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af02      	add	r7, sp, #8
	char * settingString[2] = {
 8002466:	4a43      	ldr	r2, [pc, #268]	; (8002574 <settingsPage+0x114>)
 8002468:	463b      	mov	r3, r7
 800246a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800246e:	e883 0003 	stmia.w	r3, {r0, r1}
			"Volume",
			"Voice Language"
	};
	ILI9341_FillScreen(WHITE);
 8002472:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002476:	f7ff f9b1 	bl	80017dc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 800247a:	2002      	movs	r0, #2
 800247c:	f7ff f8c0 	bl	8001600 <ILI9341_SetRotation>
	// Blue Bar like flutter
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 8002480:	231f      	movs	r3, #31
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2323      	movs	r3, #35	; 0x23
 8002486:	22f0      	movs	r2, #240	; 0xf0
 8002488:	2100      	movs	r1, #0
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fa32 	bl	80018f4 <ILI9341_DrawRectangle>
	ILI9341_DrawText("< Back", FONT4, 10, 10, WHITE, BLUE);
 8002490:	231f      	movs	r3, #31
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	230a      	movs	r3, #10
 800249c:	220a      	movs	r2, #10
 800249e:	4936      	ldr	r1, [pc, #216]	; (8002578 <settingsPage+0x118>)
 80024a0:	4836      	ldr	r0, [pc, #216]	; (800257c <settingsPage+0x11c>)
 80024a2:	f7fe fe40 	bl	8001126 <ILI9341_DrawText>

	for (int var = 0; var < 2; ++var) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e04e      	b.n	800254a <settingsPage+0xea>
		int y_position = 30*(var + 1) + 20*var + 50;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4619      	mov	r1, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3332      	adds	r3, #50	; 0x32
 80024c8:	60bb      	str	r3, [r7, #8]
		ILI9341_DrawRectangle(10, y_position , 220, 40, BLUE);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	b299      	uxth	r1, r3
 80024ce:	231f      	movs	r3, #31
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2328      	movs	r3, #40	; 0x28
 80024d4:	22dc      	movs	r2, #220	; 0xdc
 80024d6:	200a      	movs	r0, #10
 80024d8:	f7ff fa0c 	bl	80018f4 <ILI9341_DrawRectangle>
		ILI9341_DrawText(settingString[var], FONT4, 20, y_position + 10, WHITE, BLUE);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	3310      	adds	r3, #16
 80024e2:	443b      	add	r3, r7
 80024e4:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	330a      	adds	r3, #10
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	221f      	movs	r2, #31
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f8:	9200      	str	r2, [sp, #0]
 80024fa:	2214      	movs	r2, #20
 80024fc:	491e      	ldr	r1, [pc, #120]	; (8002578 <settingsPage+0x118>)
 80024fe:	f7fe fe12 	bl	8001126 <ILI9341_DrawText>
		if (var == 0) {
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <settingsPage+0xc8>
			ILI9341_DrawText(volumeInSettings, FONT4, 192, y_position + 10, WHITE, BLUE);
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <settingsPage+0x120>)
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	b29b      	uxth	r3, r3
 8002510:	330a      	adds	r3, #10
 8002512:	b29b      	uxth	r3, r3
 8002514:	221f      	movs	r2, #31
 8002516:	9201      	str	r2, [sp, #4]
 8002518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251c:	9200      	str	r2, [sp, #0]
 800251e:	22c0      	movs	r2, #192	; 0xc0
 8002520:	4915      	ldr	r1, [pc, #84]	; (8002578 <settingsPage+0x118>)
 8002522:	f7fe fe00 	bl	8001126 <ILI9341_DrawText>
 8002526:	e00d      	b.n	8002544 <settingsPage+0xe4>
		} else {
			ILI9341_DrawText("EN", FONT4, 192, y_position + 10, WHITE, BLUE);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	b29b      	uxth	r3, r3
 800252c:	330a      	adds	r3, #10
 800252e:	b29b      	uxth	r3, r3
 8002530:	221f      	movs	r2, #31
 8002532:	9201      	str	r2, [sp, #4]
 8002534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002538:	9200      	str	r2, [sp, #0]
 800253a:	22c0      	movs	r2, #192	; 0xc0
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <settingsPage+0x118>)
 800253e:	4811      	ldr	r0, [pc, #68]	; (8002584 <settingsPage+0x124>)
 8002540:	f7fe fdf1 	bl	8001126 <ILI9341_DrawText>
	for (int var = 0; var < 2; ++var) {
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	ddad      	ble.n	80024ac <settingsPage+0x4c>
		}
	};

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <settingsPage+0x128>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	231f      	movs	r3, #31
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f240 1331 	movw	r3, #305	; 0x131
 8002562:	2205      	movs	r2, #5
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <settingsPage+0x12c>)
 8002566:	f7fe fdde 	bl	8001126 <ILI9341_DrawText>

}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	08008100 	.word	0x08008100
 8002578:	08008b90 	.word	0x08008b90
 800257c:	0800808c 	.word	0x0800808c
 8002580:	20000004 	.word	0x20000004
 8002584:	080080e4 	.word	0x080080e4
 8002588:	20000008 	.word	0x20000008
 800258c:	080083ac 	.word	0x080083ac

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_MspInit+0x4c>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_MspInit+0x4c>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_MspInit+0x4c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800

080025e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0b      	ldr	r2, [pc, #44]	; (800261c <HAL_CRC_MspInit+0x3c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_CRC_MspInit+0x40>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_CRC_MspInit+0x40>)
 80025fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_CRC_MspInit+0x40>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023000 	.word	0x40023000
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_SPI_MspInit+0x144>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d15a      	bne.n	80026fc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_SPI_MspInit+0x148>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a47      	ldr	r2, [pc, #284]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b45      	ldr	r3, [pc, #276]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a40      	ldr	r2, [pc, #256]	; (800276c <HAL_SPI_MspInit+0x148>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23e0      	movs	r3, #224	; 0xe0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268e:	2305      	movs	r3, #5
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	4835      	ldr	r0, [pc, #212]	; (8002770 <HAL_SPI_MspInit+0x14c>)
 800269a:	f000 ff55 	bl	8003548 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800269e:	4b35      	ldr	r3, [pc, #212]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026a0:	4a35      	ldr	r2, [pc, #212]	; (8002778 <HAL_SPI_MspInit+0x154>)
 80026a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b2:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026b8:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026de:	4825      	ldr	r0, [pc, #148]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026e0:	f000 fbc2 	bl	8002e68 <HAL_DMA_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80026ea:	f7ff fc9f 	bl	800202c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026f2:	649a      	str	r2, [r3, #72]	; 0x48
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_SPI_MspInit+0x150>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026fa:	e031      	b.n	8002760 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_SPI_MspInit+0x158>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d12c      	bne.n	8002760 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_SPI_MspInit+0x148>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_SPI_MspInit+0x148>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_SPI_MspInit+0x148>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800273e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002750:	2305      	movs	r3, #5
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4809      	ldr	r0, [pc, #36]	; (8002780 <HAL_SPI_MspInit+0x15c>)
 800275c:	f000 fef4 	bl	8003548 <HAL_GPIO_Init>
}
 8002760:	bf00      	nop
 8002762:	3730      	adds	r7, #48	; 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40013000 	.word	0x40013000
 800276c:	40023800 	.word	0x40023800
 8002770:	40020000 	.word	0x40020000
 8002774:	20000158 	.word	0x20000158
 8002778:	40026458 	.word	0x40026458
 800277c:	40003800 	.word	0x40003800
 8002780:	40020400 	.word	0x40020400

08002784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_UART_MspInit+0x84>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12b      	bne.n	80027fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_UART_MspInit+0x88>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_UART_MspInit+0x88>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_UART_MspInit+0x88>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_UART_MspInit+0x88>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_UART_MspInit+0x88>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_UART_MspInit+0x88>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027de:	230c      	movs	r3, #12
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ee:	2307      	movs	r3, #7
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <HAL_UART_MspInit+0x8c>)
 80027fa:	f000 fea5 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40004400 	.word	0x40004400
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000

08002814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002818:	e7fe      	b.n	8002818 <NMI_Handler+0x4>

0800281a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <HardFault_Handler+0x4>

08002820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <MemManage_Handler+0x4>

08002826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <BusFault_Handler+0x4>

0800282c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <UsageFault_Handler+0x4>

08002832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002860:	f000 f990 	bl	8002b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <DMA2_Stream3_IRQHandler+0x10>)
 800286e:	f000 fc01 	bl	8003074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000158 	.word	0x20000158

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002896:	f004 fbd9 	bl	800704c <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
  return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
  while (1) {}    /* Make sure we hang here */
 80028be:	e7fe      	b.n	80028be <_exit+0x12>

080028c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e00a      	b.n	80028e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d2:	f3af 8000 	nop.w
 80028d6:	4601      	mov	r1, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf0      	blt.n	80028d2 <_read+0x12>
  }

  return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf1      	blt.n	800290c <_write+0x12>
  }
  return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_close>:

int _close(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295a:	605a      	str	r2, [r3, #4]
  return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_isatty>:

int _isatty(int file)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f004 fb3e 	bl	800704c <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20010000 	.word	0x20010000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20000200 	.word	0x20000200
 8002a04:	20000598 	.word	0x20000598

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <sendDebugMessage>:
	HAL_UART_Transmit(&huart2, data, 16, 500);
	UART_
}
*/

void sendDebugMessage(const char * msg, ...){
 8002a2c:	b40f      	push	{r0, r1, r2, r3}
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b0c2      	sub	sp, #264	; 0x108
 8002a32:	af00      	add	r7, sp, #0
	char buff[256];
	va_list args;
	va_start(args, msg);
 8002a34:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a40:	601a      	str	r2, [r3, #0]
	vsnprintf(buff, sizeof(buff), msg, args);
 8002a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a4a:	f107 0008 	add.w	r0, r7, #8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a58:	f004 fa48 	bl	8006eec <vsniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fbbd 	bl	80001e0 <strlen>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	f107 0108 	add.w	r1, r7, #8
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <sendDebugMessage+0x5c>)
 8002a74:	f002 f960 	bl	8004d38 <HAL_UART_Transmit>
	va_end(args);
}
 8002a78:	bf00      	nop
 8002a7a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a84:	b004      	add	sp, #16
 8002a86:	4770      	bx	lr
 8002a88:	200001b8 	.word	0x200001b8

08002a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a90:	f7ff ffba 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a94:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a96:	490d      	ldr	r1, [pc, #52]	; (8002acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a9c:	e002      	b.n	8002aa4 <LoopCopyDataInit>

08002a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa2:	3304      	adds	r3, #4

08002aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa8:	d3f9      	bcc.n	8002a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aac:	4c0a      	ldr	r4, [pc, #40]	; (8002ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab0:	e001      	b.n	8002ab6 <LoopFillZerobss>

08002ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab4:	3204      	adds	r2, #4

08002ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab8:	d3fb      	bcc.n	8002ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aba:	f004 facd 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002abe:	f7ff f8d9 	bl	8001c74 <main>
  bx  lr    
 8002ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002acc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002ad0:	0800b0a4 	.word	0x0800b0a4
  ldr r2, =_sbss
 8002ad4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002ad8:	20000594 	.word	0x20000594

08002adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002adc:	e7fe      	b.n	8002adc <ADC_IRQHandler>
	...

08002ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <HAL_Init+0x40>)
 8002aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_Init+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_Init+0x40>)
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <HAL_Init+0x40>)
 8002b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b08:	2003      	movs	r0, #3
 8002b0a:	f000 f94f 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0e:	200f      	movs	r0, #15
 8002b10:	f000 f808 	bl	8002b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b14:	f7ff fd3c 	bl	8002590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023c00 	.word	0x40023c00

08002b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_InitTick+0x54>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_InitTick+0x58>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f967 	bl	8002e16 <HAL_SYSTICK_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00e      	b.n	8002b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b0f      	cmp	r3, #15
 8002b56:	d80a      	bhi.n	8002b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f000 f92f 	bl	8002dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b64:	4a06      	ldr	r2, [pc, #24]	; (8002b80 <HAL_InitTick+0x5c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	2000000c 	.word	0x2000000c
 8002b7c:	20000014 	.word	0x20000014
 8002b80:	20000010 	.word	0x20000010

08002b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_IncTick+0x20>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_IncTick+0x24>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <HAL_IncTick+0x24>)
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000014 	.word	0x20000014
 8002ba8:	20000204 	.word	0x20000204

08002bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_GetTick+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000204 	.word	0x20000204

08002bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff ffee 	bl	8002bac <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d005      	beq.n	8002bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_Delay+0x44>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bea:	bf00      	nop
 8002bec:	f7ff ffde 	bl	8002bac <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d8f7      	bhi.n	8002bec <HAL_Delay+0x28>
  {
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000014 	.word	0x20000014

08002c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3e:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60d3      	str	r3, [r2, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <__NVIC_GetPriorityGrouping+0x18>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 0307 	and.w	r3, r3, #7
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	db0b      	blt.n	8002c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4907      	ldr	r1, [pc, #28]	; (8002ca8 <__NVIC_EnableIRQ+0x38>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2001      	movs	r0, #1
 8002c92:	fa00 f202 	lsl.w	r2, r0, r2
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000e100 	.word	0xe000e100

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d78:	d301      	bcc.n	8002d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <SysTick_Config+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d86:	210f      	movs	r1, #15
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff8e 	bl	8002cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <SysTick_Config+0x40>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SysTick_Config+0x40>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff29 	bl	8002c0c <__NVIC_SetPriorityGrouping>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff3e 	bl	8002c54 <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff8e 	bl	8002d00 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5d 	bl	8002cac <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff31 	bl	8002c70 <__NVIC_EnableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffa2 	bl	8002d68 <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00e      	b.n	8002e5e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	795b      	ldrb	r3, [r3, #5]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff fbc5 	bl	80025e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff fe9a 	bl	8002bac <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e099      	b.n	8002fb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea4:	e00f      	b.n	8002ec6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea6:	f7ff fe81 	bl	8002bac <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d908      	bls.n	8002ec6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e078      	b.n	8002fb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e8      	bne.n	8002ea6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_DMA_Init+0x158>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d107      	bne.n	8002f30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0307 	bic.w	r3, r3, #7
 8002f46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d117      	bne.n	8002f8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fa6f 	bl	8003450 <DMA_CheckFifoParam>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2240      	movs	r2, #64	; 0x40
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f86:	2301      	movs	r3, #1
 8002f88:	e016      	b.n	8002fb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa26 	bl	80033e4 <DMA_CalcBaseAndBitshift>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	223f      	movs	r2, #63	; 0x3f
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	f010803f 	.word	0xf010803f

08002fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_DMA_Start_IT+0x26>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e040      	b.n	800306c <HAL_DMA_Start_IT+0xa8>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d12f      	bne.n	800305e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f9b8 	bl	8003388 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	223f      	movs	r2, #63	; 0x3f
 800301e:	409a      	lsls	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0216 	orr.w	r2, r2, #22
 8003032:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e005      	b.n	800306a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003080:	4b8e      	ldr	r3, [pc, #568]	; (80032bc <HAL_DMA_IRQHandler+0x248>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a8e      	ldr	r2, [pc, #568]	; (80032c0 <HAL_DMA_IRQHandler+0x24c>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a9b      	lsrs	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	2208      	movs	r2, #8
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0204 	bic.w	r2, r2, #4
 80030c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2208      	movs	r2, #8
 80030ce:	409a      	lsls	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	2201      	movs	r2, #1
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d012      	beq.n	8003116 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2201      	movs	r2, #1
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f043 0202 	orr.w	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	2204      	movs	r2, #4
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	2204      	movs	r2, #4
 800313a:	409a      	lsls	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f043 0204 	orr.w	r2, r3, #4
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	2210      	movs	r2, #16
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d043      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03c      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	2210      	movs	r2, #16
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d018      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d108      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d024      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
 80031a2:	e01f      	b.n	80031e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
 80031b4:	e016      	b.n	80031e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0208 	bic.w	r2, r2, #8
 80031d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2220      	movs	r2, #32
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 808f 	beq.w	8003314 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8087 	beq.w	8003314 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	2220      	movs	r2, #32
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b05      	cmp	r3, #5
 800321c:	d136      	bne.n	800328c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0216 	bic.w	r2, r2, #22
 800322c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800323c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_DMA_IRQHandler+0x1da>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0208 	bic.w	r2, r2, #8
 800325c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	223f      	movs	r2, #63	; 0x3f
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	2b00      	cmp	r3, #0
 8003280:	d07e      	beq.n	8003380 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
        }
        return;
 800328a:	e079      	b.n	8003380 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01d      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d031      	beq.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e02c      	b.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
 80032ba:	bf00      	nop
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
 80032d4:	e01e      	b.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10f      	bne.n	8003304 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0210 	bic.w	r2, r2, #16
 80032f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	2b00      	cmp	r3, #0
 800331a:	d032      	beq.n	8003382 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d022      	beq.n	800336e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2205      	movs	r2, #5
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3301      	adds	r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	d307      	bcc.n	800335c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f2      	bne.n	8003340 <HAL_DMA_IRQHandler+0x2cc>
 800335a:	e000      	b.n	800335e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800335c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
 800337e:	e000      	b.n	8003382 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003380:	bf00      	nop
    }
  }
}
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d108      	bne.n	80033c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033c6:	e007      	b.n	80033d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	3b10      	subs	r3, #16
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <DMA_CalcBaseAndBitshift+0x64>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <DMA_CalcBaseAndBitshift+0x68>)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d909      	bls.n	8003426 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	659a      	str	r2, [r3, #88]	; 0x58
 8003424:	e007      	b.n	8003436 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	aaaaaaab 	.word	0xaaaaaaab
 800344c:	08009cf8 	.word	0x08009cf8

08003450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11f      	bne.n	80034aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d856      	bhi.n	800351e <DMA_CheckFifoParam+0xce>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <DMA_CheckFifoParam+0x28>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	08003489 	.word	0x08003489
 800347c:	0800349b 	.word	0x0800349b
 8003480:	08003489 	.word	0x08003489
 8003484:	0800351f 	.word	0x0800351f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d046      	beq.n	8003522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e043      	b.n	8003522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034a2:	d140      	bne.n	8003526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a8:	e03d      	b.n	8003526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b2:	d121      	bne.n	80034f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d837      	bhi.n	800352a <DMA_CheckFifoParam+0xda>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <DMA_CheckFifoParam+0x70>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034d7 	.word	0x080034d7
 80034c8:	080034d1 	.word	0x080034d1
 80034cc:	080034e9 	.word	0x080034e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      break;
 80034d4:	e030      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d025      	beq.n	800352e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e6:	e022      	b.n	800352e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034f0:	d11f      	bne.n	8003532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034f6:	e01c      	b.n	8003532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d903      	bls.n	8003506 <DMA_CheckFifoParam+0xb6>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d003      	beq.n	800350c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003504:	e018      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      break;
 800350a:	e015      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e00b      	b.n	8003536 <DMA_CheckFifoParam+0xe6>
      break;
 800351e:	bf00      	nop
 8003520:	e00a      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 8003522:	bf00      	nop
 8003524:	e008      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 8003526:	bf00      	nop
 8003528:	e006      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 800352a:	bf00      	nop
 800352c:	e004      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;   
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 8003536:	bf00      	nop
    }
  } 
  
  return status; 
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	; 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e159      	b.n	8003818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	429a      	cmp	r2, r3
 800357e:	f040 8148 	bne.w	8003812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d005      	beq.n	800359a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003596:	2b02      	cmp	r3, #2
 8003598:	d130      	bne.n	80035fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a2 	beq.w	8003812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b57      	ldr	r3, [pc, #348]	; (8003830 <HAL_GPIO_Init+0x2e8>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_GPIO_Init+0x2e8>)
 80036d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_GPIO_Init+0x2e8>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ea:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_GPIO_Init+0x2ec>)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	3302      	adds	r3, #2
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a49      	ldr	r2, [pc, #292]	; (8003838 <HAL_GPIO_Init+0x2f0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x202>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a48      	ldr	r2, [pc, #288]	; (800383c <HAL_GPIO_Init+0x2f4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x1fe>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a47      	ldr	r2, [pc, #284]	; (8003840 <HAL_GPIO_Init+0x2f8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x1fa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a46      	ldr	r2, [pc, #280]	; (8003844 <HAL_GPIO_Init+0x2fc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x1f6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a45      	ldr	r2, [pc, #276]	; (8003848 <HAL_GPIO_Init+0x300>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x1f2>
 8003736:	2304      	movs	r3, #4
 8003738:	e008      	b.n	800374c <HAL_GPIO_Init+0x204>
 800373a:	2307      	movs	r3, #7
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x204>
 800373e:	2303      	movs	r3, #3
 8003740:	e004      	b.n	800374c <HAL_GPIO_Init+0x204>
 8003742:	2302      	movs	r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_Init+0x204>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_GPIO_Init+0x204>
 800374a:	2300      	movs	r3, #0
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	f002 0203 	and.w	r2, r2, #3
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	4093      	lsls	r3, r2
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800375c:	4935      	ldr	r1, [pc, #212]	; (8003834 <HAL_GPIO_Init+0x2ec>)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3302      	adds	r3, #2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_GPIO_Init+0x304>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378e:	4a2f      	ldr	r2, [pc, #188]	; (800384c <HAL_GPIO_Init+0x304>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_GPIO_Init+0x304>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b8:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_GPIO_Init+0x304>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <HAL_GPIO_Init+0x304>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_GPIO_Init+0x304>)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_GPIO_Init+0x304>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800380c:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_GPIO_Init+0x304>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	f67f aea2 	bls.w	8003564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40013800 	.word	0x40013800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40021000 	.word	0x40021000
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e267      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d075      	beq.n	80039be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b82      	ldr	r3, [pc, #520]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f6:	d10b      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4b7e      	ldr	r3, [pc, #504]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05b      	beq.n	80039bc <HAL_RCC_OscConfig+0x108>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d157      	bne.n	80039bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e242      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d106      	bne.n	8003928 <HAL_RCC_OscConfig+0x74>
 800391a:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x98>
 8003932:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6f      	ldr	r2, [pc, #444]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b6d      	ldr	r3, [pc, #436]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6c      	ldr	r2, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 800394c:	4b69      	ldr	r3, [pc, #420]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a68      	ldr	r2, [pc, #416]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7ff f91e 	bl	8002bac <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7ff f91a 	bl	8002bac <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e207      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xc0>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7ff f90a 	bl	8002bac <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7ff f906 	bl	8002bac <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1f3      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0xe8>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ca:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c7      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7ff f8bf 	bl	8002bac <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7ff f8bb 	bl	8002bac <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a8      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7ff f89e 	bl	8002bac <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7ff f89a 	bl	8002bac <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e187      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <HAL_RCC_OscConfig+0x248>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7ff f87e 	bl	8002bac <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7ff f87a 	bl	8002bac <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e167      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x200>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_OscConfig+0x248>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7ff f867 	bl	8002bac <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7ff f863 	bl	8002bac <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e150      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a7c      	ldr	r2, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b77      	ldr	r3, [pc, #476]	; (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a73      	ldr	r2, [pc, #460]	; (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7ff f823 	bl	8002bac <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7ff f81f 	bl	8002bac <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e10c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ea>
 8003b90:	4b64      	ldr	r3, [pc, #400]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4a63      	ldr	r2, [pc, #396]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x30c>
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a5e      	ldr	r2, [pc, #376]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003bc0:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a57      	ldr	r2, [pc, #348]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	4b55      	ldr	r3, [pc, #340]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a54      	ldr	r2, [pc, #336]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fe ffe4 	bl	8002bac <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fe ffe0 	bl	8002bac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0cb      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x334>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7fe ffce 	bl	8002bac <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fe ffca 	bl	8002bac <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0b5      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a1 	beq.w	8003d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d05c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d141      	bne.n	8003cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe ff9e 	bl	8002bac <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe ff9a 	bl	8002bac <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e087      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	491b      	ldr	r1, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe ff73 	bl	8002bac <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fe ff6f 	bl	8002bac <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e05c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x416>
 8003ce8:	e054      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe ff5c 	bl	8002bac <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe ff58 	bl	8002bac <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e045      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x444>
 8003d16:	e03d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e038      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d121      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0cc      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d90c      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b65      	ldr	r3, [pc, #404]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b63      	ldr	r3, [pc, #396]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0b8      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df8:	4b59      	ldr	r3, [pc, #356]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a58      	ldr	r2, [pc, #352]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e10:	4b53      	ldr	r3, [pc, #332]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a52      	ldr	r2, [pc, #328]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	494d      	ldr	r1, [pc, #308]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e067      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4934      	ldr	r1, [pc, #208]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fe fe8a 	bl	8002bac <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fe fe86 	bl	8002bac <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d20c      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4916      	ldr	r1, [pc, #88]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	490e      	ldr	r1, [pc, #56]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f2a:	f000 f821 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490a      	ldr	r1, [pc, #40]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fdea 	bl	8002b24 <HAL_InitTick>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	08009ce0 	.word	0x08009ce0
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	20000010 	.word	0x20000010

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b090      	sub	sp, #64	; 0x40
 8003f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f88:	4b59      	ldr	r3, [pc, #356]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f200 80a1 	bhi.w	80040dc <HAL_RCC_GetSysClockFreq+0x16c>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa2:	e09b      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fa6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fa8:	e09b      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fae:	e098      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b4f      	ldr	r3, [pc, #316]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b4d      	ldr	r3, [pc, #308]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d028      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2200      	movs	r2, #0
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fdc:	fb03 f201 	mul.w	r2, r3, r1
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fea:	fba0 1202 	umull	r1, r2, r0, r2
 8003fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff0:	460a      	mov	r2, r1
 8003ff2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff6:	4413      	add	r3, r2
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	61fa      	str	r2, [r7, #28]
 8004002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004006:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800400a:	f7fc fc47 	bl	800089c <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4613      	mov	r3, r2
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004016:	e053      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	2200      	movs	r2, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	617a      	str	r2, [r7, #20]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800402a:	f04f 0b00 	mov.w	fp, #0
 800402e:	4652      	mov	r2, sl
 8004030:	465b      	mov	r3, fp
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	ebb2 080a 	subs.w	r8, r2, sl
 800404a:	eb63 090b 	sbc.w	r9, r3, fp
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800405a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800405e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004062:	ebb2 0408 	subs.w	r4, r2, r8
 8004066:	eb63 0509 	sbc.w	r5, r3, r9
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	00eb      	lsls	r3, r5, #3
 8004074:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004078:	00e2      	lsls	r2, r4, #3
 800407a:	4614      	mov	r4, r2
 800407c:	461d      	mov	r5, r3
 800407e:	eb14 030a 	adds.w	r3, r4, sl
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	eb45 030b 	adc.w	r3, r5, fp
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004096:	4629      	mov	r1, r5
 8004098:	028b      	lsls	r3, r1, #10
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a0:	4621      	mov	r1, r4
 80040a2:	028a      	lsls	r2, r1, #10
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	2200      	movs	r2, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b4:	f7fc fbf2 	bl	800089c <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	3301      	adds	r3, #1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80040d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040da:	e002      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3740      	adds	r7, #64	; 0x40
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	017d7840 	.word	0x017d7840

080040fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCC_GetHCLKFreq+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	2000000c 	.word	0x2000000c

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004118:	f7ff fff0 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	08009cf0 	.word	0x08009cf0

0800413c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004140:	f7ff ffdc 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0b5b      	lsrs	r3, r3, #13
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	08009cf0 	.word	0x08009cf0

08004164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07b      	b.n	800426e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d108      	bne.n	8004190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004186:	d009      	beq.n	800419c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	61da      	str	r2, [r3, #28]
 800418e:	e005      	b.n	800419c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fa34 	bl	8002624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004220:	ea42 0103 	orr.w	r1, r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0104 	and.w	r1, r3, #4
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0210 	and.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b088      	sub	sp, #32
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004286:	f7fe fc91 	bl	8002bac <HAL_GetTick>
 800428a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d001      	beq.n	80042a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	e12a      	b.n	80044f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Transmit+0x36>
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e122      	b.n	80044f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_SPI_Transmit+0x48>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e11b      	b.n	80044f6 <HAL_SPI_Transmit+0x280>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d10f      	bne.n	800432e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d007      	beq.n	800434c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004354:	d152      	bne.n	80043fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0xee>
 800435e:	8b7b      	ldrh	r3, [r7, #26]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d145      	bne.n	80043f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004388:	e032      	b.n	80043f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d112      	bne.n	80043be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80043bc:	e018      	b.n	80043f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043be:	f7fe fbf5 	bl	8002bac <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d803      	bhi.n	80043d6 <HAL_SPI_Transmit+0x160>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d102      	bne.n	80043dc <HAL_SPI_Transmit+0x166>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e082      	b.n	80044f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1c7      	bne.n	800438a <HAL_SPI_Transmit+0x114>
 80043fa:	e053      	b.n	80044a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_SPI_Transmit+0x194>
 8004404:	8b7b      	ldrh	r3, [r7, #26]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d147      	bne.n	800449a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004430:	e033      	b.n	800449a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d113      	bne.n	8004468 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	7812      	ldrb	r2, [r2, #0]
 800444c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	86da      	strh	r2, [r3, #54]	; 0x36
 8004466:	e018      	b.n	800449a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004468:	f7fe fba0 	bl	8002bac <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d803      	bhi.n	8004480 <HAL_SPI_Transmit+0x20a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d102      	bne.n	8004486 <HAL_SPI_Transmit+0x210>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e02d      	b.n	80044f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1c6      	bne.n	8004432 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fba1 	bl	8004bf0 <SPI_EndRxTxTransaction>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b08a      	sub	sp, #40	; 0x28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800450c:	2301      	movs	r3, #1
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004510:	f7fe fb4c 	bl	8002bac <HAL_GetTick>
 8004514:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004528:	7ffb      	ldrb	r3, [r7, #31]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00c      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x4a>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004534:	d106      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x46>
 800453e:	7ffb      	ldrb	r3, [r7, #31]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d001      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
 8004546:	e17f      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_SPI_TransmitReceive+0x5c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x5c>
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e174      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_SPI_TransmitReceive+0x6e>
 8004568:	2302      	movs	r3, #2
 800456a:	e16d      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b04      	cmp	r3, #4
 800457e:	d003      	beq.n	8004588 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2205      	movs	r2, #5
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e4:	d17e      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0xf6>
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d16c      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004618:	e059      	b.n	80046ce <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d11b      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x162>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x162>
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	2b01      	cmp	r3, #1
 8004636:	d113      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	881a      	ldrh	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	1c9a      	adds	r2, r3, #2
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d119      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x1a4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d014      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	b292      	uxth	r2, r2
 8004684:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800469e:	2301      	movs	r3, #1
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046a2:	f7fe fa83 	bl	8002bac <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d80d      	bhi.n	80046ce <HAL_SPI_TransmitReceive+0x1d0>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d009      	beq.n	80046ce <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0bc      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1a0      	bne.n	800461a <HAL_SPI_TransmitReceive+0x11c>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d19b      	bne.n	800461a <HAL_SPI_TransmitReceive+0x11c>
 80046e2:	e082      	b.n	80047ea <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x1f4>
 80046ec:	8afb      	ldrh	r3, [r7, #22]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d171      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004718:	e05d      	b.n	80047d6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11c      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x264>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x264>
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	2b01      	cmp	r3, #1
 8004736:	d114      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d119      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x2a6>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047a0:	2301      	movs	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047a4:	f7fe fa02 	bl	8002bac <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d803      	bhi.n	80047bc <HAL_SPI_TransmitReceive+0x2be>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x2c4>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e038      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d19c      	bne.n	800471a <HAL_SPI_TransmitReceive+0x21c>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d197      	bne.n	800471a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ea:	6a3a      	ldr	r2, [r7, #32]
 80047ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f9fe 	bl	8004bf0 <SPI_EndRxTxTransaction>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e01d      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004846:	2300      	movs	r3, #0
  }
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	; 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
 800486c:	e097      	b.n	800499e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_Transmit_DMA+0x2a>
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e08f      	b.n	800499e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_SPI_Transmit_DMA+0x3c>
 8004888:	2302      	movs	r3, #2
 800488a:	e088      	b.n	800499e <HAL_SPI_Transmit_DMA+0x14e>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2203      	movs	r2, #3
 8004898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048da:	d10f      	bne.n	80048fc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <HAL_SPI_Transmit_DMA+0x158>)
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <HAL_SPI_Transmit_DMA+0x15c>)
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <HAL_SPI_Transmit_DMA+0x160>)
 8004912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	2200      	movs	r2, #0
 800491a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	4619      	mov	r1, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004934:	f7fe fb46 	bl	8002fc4 <HAL_DMA_Start_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f043 0210 	orr.w	r2, r3, #16
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e023      	b.n	800499e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d007      	beq.n	8004974 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004972:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0220 	orr.w	r2, r2, #32
 800498a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0202 	orr.w	r2, r2, #2
 800499a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	08004a85 	.word	0x08004a85
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	08004aa1 	.word	0x08004aa1

080049b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ea:	f7fe f8df 	bl	8002bac <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d03b      	beq.n	8004a78 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0220 	bic.w	r2, r2, #32
 8004a0e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0202 	bic.w	r2, r2, #2
 8004a1e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	2164      	movs	r1, #100	; 0x64
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f000 f8e3 	bl	8004bf0 <SPI_EndRxTxTransaction>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	f7ff ffa9 	bl	80049c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a76:	e002      	b.n	8004a7e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a78:	6978      	ldr	r0, [r7, #20]
 8004a7a:	f7fc fb9f 	bl	80011bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff ff8e 	bl	80049b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0203 	bic.w	r2, r2, #3
 8004abc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f043 0210 	orr.w	r2, r3, #16
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff78 	bl	80049c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004af0:	f7fe f85c 	bl	8002bac <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b00:	f7fe f854 	bl	8002bac <HAL_GetTick>
 8004b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	015b      	lsls	r3, r3, #5
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	e055      	b.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d051      	beq.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b20:	f7fe f844 	bl	8002bac <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d902      	bls.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d13d      	bne.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4e:	d111      	bne.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	d004      	beq.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d107      	bne.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7c:	d10f      	bne.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e018      	b.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	e002      	b.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d19a      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2201      	movs	r2, #1
 8004c04:	2102      	movs	r1, #2
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff ff6a 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e032      	b.n	8004c88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <SPI_EndRxTxTransaction+0xa0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <SPI_EndRxTxTransaction+0xa4>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	0d5b      	lsrs	r3, r3, #21
 8004c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c40:	d112      	bne.n	8004c68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff ff47 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d016      	beq.n	8004c86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e00f      	b.n	8004c88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d0f2      	beq.n	8004c68 <SPI_EndRxTxTransaction+0x78>
 8004c82:	e000      	b.n	8004c86 <SPI_EndRxTxTransaction+0x96>
        break;
 8004c84:	bf00      	nop
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	2000000c 	.word	0x2000000c
 8004c94:	165e9f81 	.word	0x165e9f81

08004c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e042      	b.n	8004d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fd60 	bl	8002784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f973 	bl	8004fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d175      	bne.n	8004e44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Transmit+0x2c>
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e06e      	b.n	8004e46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2221      	movs	r2, #33	; 0x21
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d76:	f7fd ff19 	bl	8002bac <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d90:	d108      	bne.n	8004da4 <HAL_UART_Transmit+0x6c>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e003      	b.n	8004dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dac:	e02e      	b.n	8004e0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f848 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e03a      	b.n	8004e46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3302      	adds	r3, #2
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e007      	b.n	8004dfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1cb      	bne.n	8004dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f814 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e006      	b.n	8004e46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5e:	e03b      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d037      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e68:	f7fd fea0 	bl	8002bac <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d302      	bcc.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e03a      	b.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d020      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d01d      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d116      	bne.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f81d 	bl	8004f00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e00f      	b.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d0b4      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b095      	sub	sp, #84	; 0x54
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f28:	643a      	str	r2, [r7, #64]	; 0x40
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3314      	adds	r3, #20
 8004f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3314      	adds	r3, #20
 8004f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e5      	bne.n	8004f3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d119      	bne.n	8004fac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f98:	61ba      	str	r2, [r7, #24]
 8004f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fba:	bf00      	nop
 8004fbc:	3754      	adds	r7, #84	; 0x54
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b0c0      	sub	sp, #256	; 0x100
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	68d9      	ldr	r1, [r3, #12]
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	ea40 0301 	orr.w	r3, r0, r1
 8004ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	431a      	orrs	r2, r3
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005020:	f021 010c 	bic.w	r1, r1, #12
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800502e:	430b      	orrs	r3, r1
 8005030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	6999      	ldr	r1, [r3, #24]
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	ea40 0301 	orr.w	r3, r0, r1
 800504e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b8f      	ldr	r3, [pc, #572]	; (8005294 <UART_SetConfig+0x2cc>)
 8005058:	429a      	cmp	r2, r3
 800505a:	d005      	beq.n	8005068 <UART_SetConfig+0xa0>
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b8d      	ldr	r3, [pc, #564]	; (8005298 <UART_SetConfig+0x2d0>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d104      	bne.n	8005072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7ff f868 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 800506c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005070:	e003      	b.n	800507a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005072:	f7ff f84f 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8005076:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005084:	f040 810c 	bne.w	80052a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005092:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800509a:	4622      	mov	r2, r4
 800509c:	462b      	mov	r3, r5
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050a2:	415b      	adcs	r3, r3
 80050a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050aa:	4621      	mov	r1, r4
 80050ac:	eb12 0801 	adds.w	r8, r2, r1
 80050b0:	4629      	mov	r1, r5
 80050b2:	eb43 0901 	adc.w	r9, r3, r1
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ca:	4690      	mov	r8, r2
 80050cc:	4699      	mov	r9, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	eb18 0303 	adds.w	r3, r8, r3
 80050d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050d8:	462b      	mov	r3, r5
 80050da:	eb49 0303 	adc.w	r3, r9, r3
 80050de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050f6:	460b      	mov	r3, r1
 80050f8:	18db      	adds	r3, r3, r3
 80050fa:	653b      	str	r3, [r7, #80]	; 0x50
 80050fc:	4613      	mov	r3, r2
 80050fe:	eb42 0303 	adc.w	r3, r2, r3
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
 8005104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800510c:	f7fb fbc6 	bl	800089c <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4b61      	ldr	r3, [pc, #388]	; (800529c <UART_SetConfig+0x2d4>)
 8005116:	fba3 2302 	umull	r2, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	011c      	lsls	r4, r3, #4
 800511e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005128:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800512c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	64b9      	str	r1, [r7, #72]	; 0x48
 8005138:	415b      	adcs	r3, r3
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005140:	4641      	mov	r1, r8
 8005142:	eb12 0a01 	adds.w	sl, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb43 0b01 	adc.w	fp, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800515c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005160:	4692      	mov	sl, r2
 8005162:	469b      	mov	fp, r3
 8005164:	4643      	mov	r3, r8
 8005166:	eb1a 0303 	adds.w	r3, sl, r3
 800516a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800516e:	464b      	mov	r3, r9
 8005170:	eb4b 0303 	adc.w	r3, fp, r3
 8005174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005184:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800518c:	460b      	mov	r3, r1
 800518e:	18db      	adds	r3, r3, r3
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
 8005192:	4613      	mov	r3, r2
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	647b      	str	r3, [r7, #68]	; 0x44
 800519a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800519e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051a2:	f7fb fb7b 	bl	800089c <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b3b      	ldr	r3, [pc, #236]	; (800529c <UART_SetConfig+0x2d4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	; 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051c2:	4b36      	ldr	r3, [pc, #216]	; (800529c <UART_SetConfig+0x2d4>)
 80051c4:	fba3 2302 	umull	r2, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051d0:	441c      	add	r4, r3
 80051d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80051ec:	415b      	adcs	r3, r3
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051f4:	4641      	mov	r1, r8
 80051f6:	1851      	adds	r1, r2, r1
 80051f8:	6339      	str	r1, [r7, #48]	; 0x30
 80051fa:	4649      	mov	r1, r9
 80051fc:	414b      	adcs	r3, r1
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800520c:	4659      	mov	r1, fp
 800520e:	00cb      	lsls	r3, r1, #3
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005216:	4651      	mov	r1, sl
 8005218:	00ca      	lsls	r2, r1, #3
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	4603      	mov	r3, r0
 8005220:	4642      	mov	r2, r8
 8005222:	189b      	adds	r3, r3, r2
 8005224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005228:	464b      	mov	r3, r9
 800522a:	460a      	mov	r2, r1
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005240:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005248:	460b      	mov	r3, r1
 800524a:	18db      	adds	r3, r3, r3
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
 800524e:	4613      	mov	r3, r2
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800525a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800525e:	f7fb fb1d 	bl	800089c <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <UART_SetConfig+0x2d4>)
 8005268:	fba3 1302 	umull	r1, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	2164      	movs	r1, #100	; 0x64
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	3332      	adds	r3, #50	; 0x32
 800527a:	4a08      	ldr	r2, [pc, #32]	; (800529c <UART_SetConfig+0x2d4>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	f003 0207 	and.w	r2, r3, #7
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4422      	add	r2, r4
 800528e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005290:	e106      	b.n	80054a0 <UART_SetConfig+0x4d8>
 8005292:	bf00      	nop
 8005294:	40011000 	.word	0x40011000
 8005298:	40011400 	.word	0x40011400
 800529c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052b2:	4642      	mov	r2, r8
 80052b4:	464b      	mov	r3, r9
 80052b6:	1891      	adds	r1, r2, r2
 80052b8:	6239      	str	r1, [r7, #32]
 80052ba:	415b      	adcs	r3, r3
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052c2:	4641      	mov	r1, r8
 80052c4:	1854      	adds	r4, r2, r1
 80052c6:	4649      	mov	r1, r9
 80052c8:	eb43 0501 	adc.w	r5, r3, r1
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	00eb      	lsls	r3, r5, #3
 80052d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052da:	00e2      	lsls	r2, r4, #3
 80052dc:	4614      	mov	r4, r2
 80052de:	461d      	mov	r5, r3
 80052e0:	4643      	mov	r3, r8
 80052e2:	18e3      	adds	r3, r4, r3
 80052e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052e8:	464b      	mov	r3, r9
 80052ea:	eb45 0303 	adc.w	r3, r5, r3
 80052ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800530e:	4629      	mov	r1, r5
 8005310:	008b      	lsls	r3, r1, #2
 8005312:	4621      	mov	r1, r4
 8005314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005318:	4621      	mov	r1, r4
 800531a:	008a      	lsls	r2, r1, #2
 800531c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005320:	f7fb fabc 	bl	800089c <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4b60      	ldr	r3, [pc, #384]	; (80054ac <UART_SetConfig+0x4e4>)
 800532a:	fba3 2302 	umull	r2, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	011c      	lsls	r4, r3, #4
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800533c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	1891      	adds	r1, r2, r2
 800534a:	61b9      	str	r1, [r7, #24]
 800534c:	415b      	adcs	r3, r3
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005354:	4641      	mov	r1, r8
 8005356:	1851      	adds	r1, r2, r1
 8005358:	6139      	str	r1, [r7, #16]
 800535a:	4649      	mov	r1, r9
 800535c:	414b      	adcs	r3, r1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800536c:	4659      	mov	r1, fp
 800536e:	00cb      	lsls	r3, r1, #3
 8005370:	4651      	mov	r1, sl
 8005372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005376:	4651      	mov	r1, sl
 8005378:	00ca      	lsls	r2, r1, #3
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	4603      	mov	r3, r0
 8005380:	4642      	mov	r2, r8
 8005382:	189b      	adds	r3, r3, r2
 8005384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005388:	464b      	mov	r3, r9
 800538a:	460a      	mov	r2, r1
 800538c:	eb42 0303 	adc.w	r3, r2, r3
 8005390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	67bb      	str	r3, [r7, #120]	; 0x78
 800539e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053ac:	4649      	mov	r1, r9
 80053ae:	008b      	lsls	r3, r1, #2
 80053b0:	4641      	mov	r1, r8
 80053b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b6:	4641      	mov	r1, r8
 80053b8:	008a      	lsls	r2, r1, #2
 80053ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053be:	f7fb fa6d 	bl	800089c <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	4b38      	ldr	r3, [pc, #224]	; (80054ac <UART_SetConfig+0x4e4>)
 80053ca:	fba3 2301 	umull	r2, r3, r3, r1
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	2264      	movs	r2, #100	; 0x64
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	1acb      	subs	r3, r1, r3
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	3332      	adds	r3, #50	; 0x32
 80053dc:	4a33      	ldr	r2, [pc, #204]	; (80054ac <UART_SetConfig+0x4e4>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e8:	441c      	add	r4, r3
 80053ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ee:	2200      	movs	r2, #0
 80053f0:	673b      	str	r3, [r7, #112]	; 0x70
 80053f2:	677a      	str	r2, [r7, #116]	; 0x74
 80053f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	1891      	adds	r1, r2, r2
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	415b      	adcs	r3, r3
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005408:	4641      	mov	r1, r8
 800540a:	1851      	adds	r1, r2, r1
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	4649      	mov	r1, r9
 8005410:	414b      	adcs	r3, r1
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005420:	4659      	mov	r1, fp
 8005422:	00cb      	lsls	r3, r1, #3
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800542a:	4651      	mov	r1, sl
 800542c:	00ca      	lsls	r2, r1, #3
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	4603      	mov	r3, r0
 8005434:	4642      	mov	r2, r8
 8005436:	189b      	adds	r3, r3, r2
 8005438:	66bb      	str	r3, [r7, #104]	; 0x68
 800543a:	464b      	mov	r3, r9
 800543c:	460a      	mov	r2, r1
 800543e:	eb42 0303 	adc.w	r3, r2, r3
 8005442:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	663b      	str	r3, [r7, #96]	; 0x60
 800544e:	667a      	str	r2, [r7, #100]	; 0x64
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800545c:	4649      	mov	r1, r9
 800545e:	008b      	lsls	r3, r1, #2
 8005460:	4641      	mov	r1, r8
 8005462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005466:	4641      	mov	r1, r8
 8005468:	008a      	lsls	r2, r1, #2
 800546a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800546e:	f7fb fa15 	bl	800089c <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <UART_SetConfig+0x4e4>)
 8005478:	fba3 1302 	umull	r1, r3, r3, r2
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	2164      	movs	r1, #100	; 0x64
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	3332      	adds	r3, #50	; 0x32
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <UART_SetConfig+0x4e4>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f003 020f 	and.w	r2, r3, #15
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4422      	add	r2, r4
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	bf00      	nop
 80054a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054a6:	46bd      	mov	sp, r7
 80054a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    {
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <_ZN8touchgfx4FontD1Ev+0x1c>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
    }
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	08009d70 	.word	0x08009d70

080054d0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    }
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ffe9 	bl	80054b0 <_ZN8touchgfx4FontD1Ev>
 80054de:	2114      	movs	r1, #20
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fab3 	bl	8006a4c <_ZdlPvj>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005502:	2300      	movs	r3, #0
 8005504:	e010      	b.n	8005528 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	681c      	ldr	r4, [r3, #0]
 8005516:	f107 030f 	add.w	r3, r7, #15
 800551a:	f107 0210 	add.w	r2, r7, #16
 800551e:	8879      	ldrh	r1, [r7, #2]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	47a0      	blx	r4
 8005524:	6178      	str	r0, [r7, #20]
        return glyph;
 8005526:	697b      	ldr	r3, [r7, #20]
    }
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}

08005530 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	89db      	ldrh	r3, [r3, #14]
    }
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8a1b      	ldrh	r3, [r3, #16]
    }
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	88db      	ldrh	r3, [r3, #6]
    }
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	889b      	ldrh	r3, [r3, #4]
    }
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7a9b      	ldrb	r3, [r3, #10]
 800559c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80055a0:	b2db      	uxtb	r3, r3
    }
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7a9b      	ldrb	r3, [r3, #10]
 80055ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055be:	b2db      	uxtb	r3, r3
    }
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    {
        return false;
 80055d4:	2300      	movs	r3, #0
    }
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	ee07 3a90 	vmov	s15, r3
    }
 80055f2:	eeb0 0a67 	vmov.f32	s0, s15
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	4a05      	ldr	r2, [pc, #20]	; (8005620 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ff4d 	bl	80054b0 <_ZN8touchgfx4FontD1Ev>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	08009dd4 	.word	0x08009dd4

08005624 <_ZN8touchgfx9ConstFontD0Ev>:
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ffe7 	bl	8005600 <_ZN8touchgfx9ConstFontD1Ev>
 8005632:	211c      	movs	r1, #28
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 fa09 	bl	8006a4c <_ZdlPvj>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	4a05      	ldr	r2, [pc, #20]	; (8005664 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ffd3 	bl	8005600 <_ZN8touchgfx9ConstFontD1Ev>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	08009d08 	.word	0x08009d08

08005668 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff ffe7 	bl	8005644 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005676:	212c      	movs	r1, #44	; 0x2c
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 f9e7 	bl	8006a4c <_ZdlPvj>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af0a      	add	r7, sp, #40	; 0x28
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4611      	mov	r1, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	460b      	mov	r3, r1
 80056c8:	80fb      	strh	r3, [r7, #6]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	88b9      	ldrh	r1, [r7, #4]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056d8:	9308      	str	r3, [sp, #32]
 80056da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056dc:	9307      	str	r3, [sp, #28]
 80056de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056e2:	9306      	str	r3, [sp, #24]
 80056e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056fa:	9302      	str	r3, [sp, #8]
 80056fc:	7f3b      	ldrb	r3, [r7, #28]
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	8b3b      	ldrh	r3, [r7, #24]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	f000 fc02 	bl	8005f10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800570c:	4a09      	ldr	r2, [pc, #36]	; (8005734 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005716:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800571c:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	08009d08 	.word	0x08009d08

08005738 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	3302      	adds	r3, #2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	461a      	mov	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	889b      	ldrh	r3, [r3, #4]
 800576a:	0adb      	lsrs	r3, r3, #11
 800576c:	b29b      	uxth	r3, r3
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
}
 800577e:	4618      	mov	r0, r3
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800578a:	b480      	push	{r7}
 800578c:	b089      	sub	sp, #36	; 0x24
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	460b      	mov	r3, r1
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7b1b      	ldrb	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e031      	b.n	800580e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	7b5b      	ldrb	r3, [r3, #13]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057be:	b219      	sxth	r1, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	7adb      	ldrb	r3, [r3, #11]
 80057c4:	b21b      	sxth	r3, r3
 80057c6:	430b      	orrs	r3, r1
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7b1b      	ldrb	r3, [r3, #12]
 80057d6:	837b      	strh	r3, [r7, #26]
 80057d8:	e013      	b.n	8005802 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	897a      	ldrh	r2, [r7, #10]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d103      	bne.n	80057ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80057ea:	e010      	b.n	800580e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	897a      	ldrh	r2, [r7, #10]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d309      	bcc.n	800580a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80057f6:	8b7b      	ldrh	r3, [r7, #26]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	837b      	strh	r3, [r7, #26]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3304      	adds	r3, #4
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	8b7b      	ldrh	r3, [r7, #26]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e8      	bne.n	80057da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8005808:	e000      	b.n	800580c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800580a:	bf00      	nop
        }
    }
    return 0;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3724      	adds	r7, #36	; 0x24
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
 8005820:	4801      	ldr	r0, [pc, #4]	; (8005828 <__tcf_0+0xc>)
 8005822:	f7ff ff0f 	bl	8005644 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000208 	.word	0x20000208

0800582c <_Z23getFont_verdana_10_4bppv>:
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08e      	sub	sp, #56	; 0x38
 8005830:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005832:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f3bf 8f5b 	dmb	ish
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf0c      	ite	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	2300      	movne	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d030      	beq.n	80058ae <_Z23getFont_verdana_10_4bppv+0x82>
 800584c:	481a      	ldr	r0, [pc, #104]	; (80058b8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800584e:	f001 f8ff 	bl	8006a50 <__cxa_guard_acquire>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d025      	beq.n	80058ae <_Z23getFont_verdana_10_4bppv+0x82>
 8005862:	2300      	movs	r3, #0
 8005864:	930c      	str	r3, [sp, #48]	; 0x30
 8005866:	2300      	movs	r3, #0
 8005868:	930b      	str	r3, [sp, #44]	; 0x2c
 800586a:	2300      	movs	r3, #0
 800586c:	930a      	str	r3, [sp, #40]	; 0x28
 800586e:	233f      	movs	r3, #63	; 0x3f
 8005870:	9309      	str	r3, [sp, #36]	; 0x24
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <_Z23getFont_verdana_10_4bppv+0x90>)
 8005874:	9308      	str	r3, [sp, #32]
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8005878:	9307      	str	r3, [sp, #28]
 800587a:	2300      	movs	r3, #0
 800587c:	9306      	str	r3, [sp, #24]
 800587e:	2300      	movs	r3, #0
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	2301      	movs	r3, #1
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	2304      	movs	r3, #4
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	2300      	movs	r3, #0
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	2300      	movs	r3, #0
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	230a      	movs	r3, #10
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	230a      	movs	r3, #10
 8005898:	2201      	movs	r2, #1
 800589a:	490a      	ldr	r1, [pc, #40]	; (80058c4 <_Z23getFont_verdana_10_4bppv+0x98>)
 800589c:	480a      	ldr	r0, [pc, #40]	; (80058c8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800589e:	f7ff ff0b 	bl	80056b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80058a2:	480a      	ldr	r0, [pc, #40]	; (80058cc <_Z23getFont_verdana_10_4bppv+0xa0>)
 80058a4:	f001 f91e 	bl	8006ae4 <atexit>
 80058a8:	4803      	ldr	r0, [pc, #12]	; (80058b8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80058aa:	f001 f8dd 	bl	8006a68 <__cxa_guard_release>
    return verdana_10_4bpp;
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000234 	.word	0x20000234
 80058bc:	0800b044 	.word	0x0800b044
 80058c0:	0800b07c 	.word	0x0800b07c
 80058c4:	0800af44 	.word	0x0800af44
 80058c8:	20000208 	.word	0x20000208
 80058cc:	0800581d 	.word	0x0800581d

080058d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	4801      	ldr	r0, [pc, #4]	; (80058dc <__tcf_0+0xc>)
 80058d6:	f7ff feb5 	bl	8005644 <_ZN8touchgfx13GeneratedFontD1Ev>
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000238 	.word	0x20000238

080058e0 <_Z23getFont_verdana_20_4bppv>:
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f3bf 8f5b 	dmb	ish
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d030      	beq.n	8005962 <_Z23getFont_verdana_20_4bppv+0x82>
 8005900:	481a      	ldr	r0, [pc, #104]	; (800596c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005902:	f001 f8a5 	bl	8006a50 <__cxa_guard_acquire>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d025      	beq.n	8005962 <_Z23getFont_verdana_20_4bppv+0x82>
 8005916:	2300      	movs	r3, #0
 8005918:	930c      	str	r3, [sp, #48]	; 0x30
 800591a:	2300      	movs	r3, #0
 800591c:	930b      	str	r3, [sp, #44]	; 0x2c
 800591e:	2300      	movs	r3, #0
 8005920:	930a      	str	r3, [sp, #40]	; 0x28
 8005922:	233f      	movs	r3, #63	; 0x3f
 8005924:	9309      	str	r3, [sp, #36]	; 0x24
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <_Z23getFont_verdana_20_4bppv+0x90>)
 8005928:	9308      	str	r3, [sp, #32]
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <_Z23getFont_verdana_20_4bppv+0x94>)
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	2300      	movs	r3, #0
 8005930:	9306      	str	r3, [sp, #24]
 8005932:	2300      	movs	r3, #0
 8005934:	9305      	str	r3, [sp, #20]
 8005936:	2301      	movs	r3, #1
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	2304      	movs	r3, #4
 800593c:	9303      	str	r3, [sp, #12]
 800593e:	2300      	movs	r3, #0
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	2300      	movs	r3, #0
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	2314      	movs	r3, #20
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2314      	movs	r3, #20
 800594c:	2201      	movs	r2, #1
 800594e:	490a      	ldr	r1, [pc, #40]	; (8005978 <_Z23getFont_verdana_20_4bppv+0x98>)
 8005950:	480a      	ldr	r0, [pc, #40]	; (800597c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8005952:	f7ff feb1 	bl	80056b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005956:	480a      	ldr	r0, [pc, #40]	; (8005980 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8005958:	f001 f8c4 	bl	8006ae4 <atexit>
 800595c:	4803      	ldr	r0, [pc, #12]	; (800596c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800595e:	f001 f883 	bl	8006a68 <__cxa_guard_release>
    return verdana_20_4bpp;
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000264 	.word	0x20000264
 8005970:	0800b048 	.word	0x0800b048
 8005974:	0800b080 	.word	0x0800b080
 8005978:	0800af54 	.word	0x0800af54
 800597c:	20000238 	.word	0x20000238
 8005980:	080058d1 	.word	0x080058d1

08005984 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__tcf_0+0xc>)
 800598a:	f7ff fe5b 	bl	8005644 <_ZN8touchgfx13GeneratedFontD1Ev>
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000268 	.word	0x20000268

08005994 <_Z23getFont_verdana_40_4bppv>:
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08e      	sub	sp, #56	; 0x38
 8005998:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f3bf 8f5b 	dmb	ish
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf0c      	ite	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	2300      	movne	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d030      	beq.n	8005a16 <_Z23getFont_verdana_40_4bppv+0x82>
 80059b4:	481a      	ldr	r0, [pc, #104]	; (8005a20 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80059b6:	f001 f84b 	bl	8006a50 <__cxa_guard_acquire>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d025      	beq.n	8005a16 <_Z23getFont_verdana_40_4bppv+0x82>
 80059ca:	2300      	movs	r3, #0
 80059cc:	930c      	str	r3, [sp, #48]	; 0x30
 80059ce:	2300      	movs	r3, #0
 80059d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d2:	2300      	movs	r3, #0
 80059d4:	930a      	str	r3, [sp, #40]	; 0x28
 80059d6:	233f      	movs	r3, #63	; 0x3f
 80059d8:	9309      	str	r3, [sp, #36]	; 0x24
 80059da:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <_Z23getFont_verdana_40_4bppv+0x90>)
 80059dc:	9308      	str	r3, [sp, #32]
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <_Z23getFont_verdana_40_4bppv+0x94>)
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	2301      	movs	r3, #1
 80059e4:	9306      	str	r3, [sp, #24]
 80059e6:	2300      	movs	r3, #0
 80059e8:	9305      	str	r3, [sp, #20]
 80059ea:	2301      	movs	r3, #1
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	2304      	movs	r3, #4
 80059f0:	9303      	str	r3, [sp, #12]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9302      	str	r3, [sp, #8]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	2328      	movs	r3, #40	; 0x28
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2330      	movs	r3, #48	; 0x30
 8005a00:	2210      	movs	r2, #16
 8005a02:	490a      	ldr	r1, [pc, #40]	; (8005a2c <_Z23getFont_verdana_40_4bppv+0x98>)
 8005a04:	480a      	ldr	r0, [pc, #40]	; (8005a30 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8005a06:	f7ff fe57 	bl	80056b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005a0a:	480a      	ldr	r0, [pc, #40]	; (8005a34 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8005a0c:	f001 f86a 	bl	8006ae4 <atexit>
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005a12:	f001 f829 	bl	8006a68 <__cxa_guard_release>
    return verdana_40_4bpp;
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000294 	.word	0x20000294
 8005a24:	0800b04c 	.word	0x0800b04c
 8005a28:	0800b084 	.word	0x0800b084
 8005a2c:	0800af64 	.word	0x0800af64
 8005a30:	20000268 	.word	0x20000268
 8005a34:	08005985 	.word	0x08005985

08005a38 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	460b      	mov	r3, r1
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	817b      	strh	r3, [r7, #10]
        return 0;
 8005a46:	2300      	movs	r3, #0
    }
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
        return 0;
 8005a5c:	2300      	movs	r3, #0
    }
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
        return 0;
 8005a72:	2300      	movs	r3, #0
    }
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005a80:	b40e      	push	{r1, r2, r3}
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8005a8a:	f107 0320 	add.w	r3, r7, #32
 8005a8e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	2100      	movs	r1, #0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f910 	bl	8005cbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aac:	b003      	add	sp, #12
 8005aae:	4770      	bx	lr

08005ab0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005ab0:	b40c      	push	{r2, r3}
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8005abe:	f107 031c 	add.w	r3, r7, #28
 8005ac2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005ac4:	78f9      	ldrb	r1, [r7, #3]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8f6 	bl	8005cbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ae0:	b002      	add	sp, #8
 8005ae2:	4770      	bx	lr

08005ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d016      	beq.n	8005b26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3322      	adds	r3, #34	; 0x22
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	8adb      	ldrh	r3, [r3, #22]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8005b06:	4b43      	ldr	r3, [pc, #268]	; (8005c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005b08:	4a43      	ldr	r2, [pc, #268]	; (8005c18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005b0a:	21c5      	movs	r1, #197	; 0xc5
 8005b0c:	4843      	ldr	r0, [pc, #268]	; (8005c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005b0e:	f000 ffcb 	bl	8006aa8 <__assert_func>
            return buffer[pos];
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	8a9b      	ldrh	r3, [r3, #20]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d06a      	beq.n	8005c02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 ff6e 	bl	8006a0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3322      	adds	r3, #34	; 0x22
 8005b36:	623b      	str	r3, [r7, #32]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	8adb      	ldrh	r3, [r3, #22]
 8005b40:	8bfa      	ldrh	r2, [r7, #30]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d305      	bcc.n	8005b52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8005b48:	4a36      	ldr	r2, [pc, #216]	; (8005c24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8005b4a:	21cb      	movs	r1, #203	; 0xcb
 8005b4c:	4833      	ldr	r0, [pc, #204]	; (8005c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005b4e:	f000 ffab 	bl	8006aa8 <__assert_func>
            const uint16_t index = pos + offset;
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	8a9a      	ldrh	r2, [r3, #20]
 8005b56:	8bfb      	ldrh	r3, [r7, #30]
 8005b58:	4413      	add	r3, r2
 8005b5a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8005b5c:	8bbb      	ldrh	r3, [r7, #28]
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d801      	bhi.n	8005b66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8005b62:	8bbb      	ldrh	r3, [r7, #28]
 8005b64:	e001      	b.n	8005b6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8005b66:	8bbb      	ldrh	r3, [r7, #28]
 8005b68:	3b0a      	subs	r3, #10
 8005b6a:	6a3a      	ldr	r2, [r7, #32]
 8005b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b70:	f640 123f 	movw	r2, #2367	; 0x93f
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03f      	beq.n	8005c02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3322      	adds	r3, #34	; 0x22
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	3222      	adds	r2, #34	; 0x22
 8005b8a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	8ad2      	ldrh	r2, [r2, #22]
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d105      	bne.n	8005ba0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005b96:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005b98:	21c5      	movs	r1, #197	; 0xc5
 8005b9a:	4820      	ldr	r0, [pc, #128]	; (8005c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005b9c:	f000 ff84 	bl	8006aa8 <__assert_func>
            return buffer[pos];
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	8a92      	ldrh	r2, [r2, #20]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	8adb      	ldrh	r3, [r3, #22]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d806      	bhi.n	8005bc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8005bbe:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005bc2:	4816      	ldr	r0, [pc, #88]	; (8005c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005bc4:	f000 ff70 	bl	8006aa8 <__assert_func>
            const uint16_t index = pos + 1;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	8a9b      	ldrh	r3, [r3, #20]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8005bd0:	89bb      	ldrh	r3, [r7, #12]
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d801      	bhi.n	8005bda <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8005bd6:	89bb      	ldrh	r3, [r7, #12]
 8005bd8:	e000      	b.n	8005bdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	89f9      	ldrh	r1, [r7, #14]
 8005be0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8005be4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3322      	adds	r3, #34	; 0x22
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	f640 133f 	movw	r3, #2367	; 0x93f
 8005bf0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	8a9b      	ldrh	r3, [r3, #20]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	8afa      	ldrh	r2, [r7, #22]
 8005bfc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8005c00:	bf00      	nop
        }
    }
    return getNextChar();
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fe06 	bl	8006814 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005c08:	4603      	mov	r3, r0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	08008108 	.word	0x08008108
 8005c18:	08008114 	.word	0x08008114
 8005c1c:	080081c0 	.word	0x080081c0
 8005c20:	08008208 	.word	0x08008208
 8005c24:	08008218 	.word	0x08008218
 8005c28:	080082ec 	.word	0x080082ec
 8005c2c:	080082f8 	.word	0x080082f8

08005c30 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fdb2 	bl	80067a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d113      	bne.n	8005c80 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10e      	bne.n	8005c80 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8005c62:	f7ff fe3d 	bl	80058e0 <_Z23getFont_verdana_20_4bppv>
 8005c66:	4603      	mov	r3, r0
};
 8005c68:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005c6a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8005c6c:	f7ff fe92 	bl	8005994 <_Z23getFont_verdana_40_4bppv>
 8005c70:	4603      	mov	r3, r0
};
 8005c72:	4a05      	ldr	r2, [pc, #20]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005c74:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8005c76:	f7ff fdd9 	bl	800582c <_Z23getFont_verdana_10_4bppv>
 8005c7a:	4603      	mov	r3, r0
};
 8005c7c:	4a02      	ldr	r2, [pc, #8]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005c7e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000298 	.word	0x20000298

08005c8c <_GLOBAL__sub_I_touchgfx_fonts>:
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7ff ffd7 	bl	8005c48 <_Z41__static_initialization_and_destruction_0ii>
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8005c9c:	4b01      	ldr	r3, [pc, #4]	; (8005ca4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	4770      	bx	lr
 8005ca4:	200002a4 	.word	0x200002a4

08005ca8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	805a      	strh	r2, [r3, #2]
 8005cb0:	809a      	strh	r2, [r3, #4]
 8005cb2:	80da      	strh	r2, [r3, #6]
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	200002a8 	.word	0x200002a8

08005cbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	b09d      	sub	sp, #116	; 0x74
 8005cc4:	a803      	add	r0, sp, #12
 8005cc6:	4614      	mov	r4, r2
 8005cc8:	468a      	mov	sl, r1
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f000 f9b2 	bl	8006034 <_ZN8touchgfx12TextProviderC1Ev>
 8005cd0:	6833      	ldr	r3, [r6, #0]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd6:	4798      	blx	r3
 8005cd8:	6833      	ldr	r3, [r6, #0]
 8005cda:	4607      	mov	r7, r0
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cde:	4630      	mov	r0, r6
 8005ce0:	4798      	blx	r3
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	9000      	str	r0, [sp, #0]
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	463b      	mov	r3, r7
 8005cea:	a803      	add	r0, sp, #12
 8005cec:	f000 f9f5 	bl	80060da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005cf0:	2500      	movs	r5, #0
 8005cf2:	462c      	mov	r4, r5
 8005cf4:	46a9      	mov	r9, r5
 8005cf6:	46a8      	mov	r8, r5
 8005cf8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9302      	str	r3, [sp, #8]
 8005d00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8005d04:	429c      	cmp	r4, r3
 8005d06:	d002      	beq.n	8005d0e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8005d08:	455c      	cmp	r4, fp
 8005d0a:	bf18      	it	ne
 8005d0c:	4625      	movne	r5, r4
 8005d0e:	ab02      	add	r3, sp, #8
 8005d10:	4632      	mov	r2, r6
 8005d12:	4651      	mov	r1, sl
 8005d14:	a803      	add	r0, sp, #12
 8005d16:	f000 fcfb 	bl	8006710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	b108      	cbz	r0, 8005d22 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8005d1e:	280a      	cmp	r0, #10
 8005d20:	d10a      	bne.n	8005d38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8005d22:	45c1      	cmp	r9, r8
 8005d24:	bf38      	it	cc
 8005d26:	46c1      	movcc	r9, r8
 8005d28:	f04f 0800 	mov.w	r8, #0
 8005d2c:	2c00      	cmp	r4, #0
 8005d2e:	d1e5      	bne.n	8005cfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8005d30:	4648      	mov	r0, r9
 8005d32:	b01d      	add	sp, #116	; 0x74
 8005d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d38:	9a02      	ldr	r2, [sp, #8]
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d0de      	beq.n	8005cfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8005d3e:	7b57      	ldrb	r7, [r2, #13]
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	8894      	ldrh	r4, [r2, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	007f      	lsls	r7, r7, #1
 8005d48:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8005d4c:	7a97      	ldrb	r7, [r2, #10]
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4307      	orrs	r7, r0
 8005d52:	4630      	mov	r0, r6
 8005d54:	4798      	blx	r3
 8005d56:	4438      	add	r0, r7
 8005d58:	4480      	add	r8, r0
 8005d5a:	fa1f f888 	uxth.w	r8, r8
 8005d5e:	e7e5      	b.n	8005d2c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08005d60 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8005d60:	b508      	push	{r3, lr}
 8005d62:	6803      	ldr	r3, [r0, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	4798      	blx	r3
 8005d68:	b128      	cbz	r0, 8005d76 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8005d6a:	7b43      	ldrb	r3, [r0, #13]
 8005d6c:	7a80      	ldrb	r0, [r0, #10]
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	4318      	orrs	r0, r3
 8005d76:	bd08      	pop	{r3, pc}

08005d78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7c:	b09e      	sub	sp, #120	; 0x78
 8005d7e:	ab23      	add	r3, sp, #140	; 0x8c
 8005d80:	4605      	mov	r5, r0
 8005d82:	f853 4b04 	ldr.w	r4, [r3], #4
 8005d86:	9303      	str	r3, [sp, #12]
 8005d88:	a805      	add	r0, sp, #20
 8005d8a:	f000 f953 	bl	8006034 <_ZN8touchgfx12TextProviderC1Ev>
 8005d8e:	682b      	ldr	r3, [r5, #0]
 8005d90:	4628      	mov	r0, r5
 8005d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d94:	4798      	blx	r3
 8005d96:	682b      	ldr	r3, [r5, #0]
 8005d98:	4606      	mov	r6, r0
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	4798      	blx	r3
 8005da0:	4633      	mov	r3, r6
 8005da2:	ae1e      	add	r6, sp, #120	; 0x78
 8005da4:	4621      	mov	r1, r4
 8005da6:	9000      	str	r0, [sp, #0]
 8005da8:	9a03      	ldr	r2, [sp, #12]
 8005daa:	2400      	movs	r4, #0
 8005dac:	a805      	add	r0, sp, #20
 8005dae:	f000 f994 	bl	80060da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005db2:	f846 4d68 	str.w	r4, [r6, #-104]!
 8005db6:	462a      	mov	r2, r5
 8005db8:	4633      	mov	r3, r6
 8005dba:	4621      	mov	r1, r4
 8005dbc:	a805      	add	r0, sp, #20
 8005dbe:	f000 fca7 	bl	8006710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8005dc2:	b1f0      	cbz	r0, 8005e02 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8005dc4:	280a      	cmp	r0, #10
 8005dc6:	d018      	beq.n	8005dfa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8005dc8:	9f04      	ldr	r7, [sp, #16]
 8005dca:	b1b7      	cbz	r7, 8005dfa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8005dcc:	7b78      	ldrb	r0, [r7, #13]
 8005dce:	7a3b      	ldrb	r3, [r7, #8]
 8005dd0:	88ea      	ldrh	r2, [r5, #6]
 8005dd2:	00c1      	lsls	r1, r0, #3
 8005dd4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8005dd8:	4319      	orrs	r1, r3
 8005dda:	0643      	lsls	r3, r0, #25
 8005ddc:	bf44      	itt	mi
 8005dde:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8005de2:	b219      	sxthmi	r1, r3
 8005de4:	0100      	lsls	r0, r0, #4
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8005dec:	4303      	orrs	r3, r0
 8005dee:	4413      	add	r3, r2
 8005df0:	1a5b      	subs	r3, r3, r1
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	429c      	cmp	r4, r3
 8005df6:	bfb8      	it	lt
 8005df8:	461c      	movlt	r4, r3
 8005dfa:	4633      	mov	r3, r6
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	2100      	movs	r1, #0
 8005e00:	e7dc      	b.n	8005dbc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8005e02:	b2a0      	uxth	r0, r4
 8005e04:	b01e      	add	sp, #120	; 0x78
 8005e06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e0a:	b003      	add	sp, #12
 8005e0c:	4770      	bx	lr

08005e0e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8005e0e:	7a43      	ldrb	r3, [r0, #9]
 8005e10:	8880      	ldrh	r0, [r0, #4]
 8005e12:	4418      	add	r0, r3
 8005e14:	b280      	uxth	r0, r0
 8005e16:	4770      	bx	lr

08005e18 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8005e18:	6803      	ldr	r3, [r0, #0]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	4718      	bx	r3

08005e1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8005e1e:	b40e      	push	{r1, r2, r3}
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	b09d      	sub	sp, #116	; 0x74
 8005e24:	ab21      	add	r3, sp, #132	; 0x84
 8005e26:	4604      	mov	r4, r0
 8005e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e2c:	9302      	str	r3, [sp, #8]
 8005e2e:	a803      	add	r0, sp, #12
 8005e30:	f000 f900 	bl	8006034 <_ZN8touchgfx12TextProviderC1Ev>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	4620      	mov	r0, r4
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	4798      	blx	r3
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	4606      	mov	r6, r0
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	4620      	mov	r0, r4
 8005e44:	4798      	blx	r3
 8005e46:	4633      	mov	r3, r6
 8005e48:	9000      	str	r0, [sp, #0]
 8005e4a:	9a02      	ldr	r2, [sp, #8]
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	a803      	add	r0, sp, #12
 8005e50:	f000 f943 	bl	80060da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005e54:	a803      	add	r0, sp, #12
 8005e56:	f000 fcdd 	bl	8006814 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005e5a:	2401      	movs	r4, #1
 8005e5c:	b2a3      	uxth	r3, r4
 8005e5e:	b140      	cbz	r0, 8005e72 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8005e60:	280a      	cmp	r0, #10
 8005e62:	bf08      	it	eq
 8005e64:	3301      	addeq	r3, #1
 8005e66:	a803      	add	r0, sp, #12
 8005e68:	bf08      	it	eq
 8005e6a:	b21c      	sxtheq	r4, r3
 8005e6c:	f000 fcd2 	bl	8006814 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005e70:	e7f4      	b.n	8005e5c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8005e72:	4618      	mov	r0, r3
 8005e74:	b01d      	add	sp, #116	; 0x74
 8005e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e7a:	b003      	add	sp, #12
 8005e7c:	4770      	bx	lr

08005e7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8005e7e:	b40e      	push	{r1, r2, r3}
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	b09e      	sub	sp, #120	; 0x78
 8005e84:	ab23      	add	r3, sp, #140	; 0x8c
 8005e86:	4604      	mov	r4, r0
 8005e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e8c:	9303      	str	r3, [sp, #12]
 8005e8e:	a805      	add	r0, sp, #20
 8005e90:	f000 f8d0 	bl	8006034 <_ZN8touchgfx12TextProviderC1Ev>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	4620      	mov	r0, r4
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	4798      	blx	r3
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4798      	blx	r3
 8005ea6:	4633      	mov	r3, r6
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	9000      	str	r0, [sp, #0]
 8005eac:	9a03      	ldr	r2, [sp, #12]
 8005eae:	a805      	add	r0, sp, #20
 8005eb0:	ad1e      	add	r5, sp, #120	; 0x78
 8005eb2:	f000 f912 	bl	80060da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	f845 1d68 	str.w	r1, [r5, #-104]!
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	a805      	add	r0, sp, #20
 8005ec2:	f000 fc25 	bl	8006710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8005ec6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8005eca:	b1d8      	cbz	r0, 8005f04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8005ecc:	280a      	cmp	r0, #10
 8005ece:	d012      	beq.n	8005ef6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8005ed0:	9804      	ldr	r0, [sp, #16]
 8005ed2:	b180      	cbz	r0, 8005ef6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8005ed4:	7b47      	ldrb	r7, [r0, #13]
 8005ed6:	88e2      	ldrh	r2, [r4, #6]
 8005ed8:	00fb      	lsls	r3, r7, #3
 8005eda:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8005ede:	7a03      	ldrb	r3, [r0, #8]
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	0679      	lsls	r1, r7, #25
 8005ee4:	bf44      	itt	mi
 8005ee6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8005eea:	b21b      	sxthmi	r3, r3
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	429e      	cmp	r6, r3
 8005ef2:	bfa8      	it	ge
 8005ef4:	461e      	movge	r6, r3
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	4622      	mov	r2, r4
 8005efa:	2100      	movs	r1, #0
 8005efc:	a805      	add	r0, sp, #20
 8005efe:	f000 fc07 	bl	8006710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8005f02:	e7e2      	b.n	8005eca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8005f04:	4630      	mov	r0, r6
 8005f06:	b01e      	add	sp, #120	; 0x78
 8005f08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005f0c:	b003      	add	sp, #12
 8005f0e:	4770      	bx	lr

08005f10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8005f10:	b530      	push	{r4, r5, lr}
 8005f12:	8083      	strh	r3, [r0, #4]
 8005f14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005f18:	80c3      	strh	r3, [r0, #6]
 8005f1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005f1e:	7203      	strb	r3, [r0, #8]
 8005f20:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005f24:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8005f28:	7243      	strb	r3, [r0, #9]
 8005f2a:	7a83      	ldrb	r3, [r0, #10]
 8005f2c:	6141      	str	r1, [r0, #20]
 8005f2e:	f365 0306 	bfi	r3, r5, #0, #7
 8005f32:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8005f36:	8302      	strh	r2, [r0, #24]
 8005f38:	f365 13c7 	bfi	r3, r5, #7, #1
 8005f3c:	7283      	strb	r3, [r0, #10]
 8005f3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005f42:	72c3      	strb	r3, [r0, #11]
 8005f44:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8005f48:	7303      	strb	r3, [r0, #12]
 8005f4a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8005f4e:	81c3      	strh	r3, [r0, #14]
 8005f50:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8005f54:	8203      	strh	r3, [r0, #16]
 8005f56:	4b01      	ldr	r3, [pc, #4]	; (8005f5c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8005f58:	6003      	str	r3, [r0, #0]
 8005f5a:	bd30      	pop	{r4, r5, pc}
 8005f5c:	08009dd4 	.word	0x08009dd4

08005f60 <_ZNK8touchgfx9ConstFont4findEt>:
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	6944      	ldr	r4, [r0, #20]
 8005f64:	b3bc      	cbz	r4, 8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005f66:	88a3      	ldrh	r3, [r4, #4]
 8005f68:	8b02      	ldrh	r2, [r0, #24]
 8005f6a:	1acb      	subs	r3, r1, r3
 8005f6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f70:	d431      	bmi.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005f72:	4293      	cmp	r3, r2
 8005f74:	dd0c      	ble.n	8005f90 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8005f76:	230e      	movs	r3, #14
 8005f78:	fb03 4302 	mla	r3, r3, r2, r4
 8005f7c:	889b      	ldrh	r3, [r3, #4]
 8005f7e:	1a5b      	subs	r3, r3, r1
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	429a      	cmp	r2, r3
 8005f84:	db27      	blt.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfbc      	itt	lt
 8005f8a:	2302      	movlt	r3, #2
 8005f8c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8005f90:	2500      	movs	r5, #0
 8005f92:	260e      	movs	r6, #14
 8005f94:	4295      	cmp	r5, r2
 8005f96:	dc1e      	bgt.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005f98:	fb06 4003 	mla	r0, r6, r3, r4
 8005f9c:	8887      	ldrh	r7, [r0, #4]
 8005f9e:	42b9      	cmp	r1, r7
 8005fa0:	d01a      	beq.n	8005fd8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8005fa2:	d20d      	bcs.n	8005fc0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	4295      	cmp	r5, r2
 8005fa8:	dc15      	bgt.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005faa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8005fae:	1a5b      	subs	r3, r3, r1
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	db0f      	blt.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	ddec      	ble.n	8005f94 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8005fba:	1953      	adds	r3, r2, r5
 8005fbc:	105b      	asrs	r3, r3, #1
 8005fbe:	e7e9      	b.n	8005f94 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8005fc0:	1c5d      	adds	r5, r3, #1
 8005fc2:	42aa      	cmp	r2, r5
 8005fc4:	db07      	blt.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005fc6:	8a43      	ldrh	r3, [r0, #18]
 8005fc8:	1acb      	subs	r3, r1, r3
 8005fca:	442b      	add	r3, r5
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	dc02      	bgt.n	8005fd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	dadf      	bge.n	8005f94 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8005fd4:	e7f1      	b.n	8005fba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8005fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fdc:	4604      	mov	r4, r0
 8005fde:	4617      	mov	r7, r2
 8005fe0:	461e      	mov	r6, r3
 8005fe2:	b911      	cbnz	r1, 8005fea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fea:	290a      	cmp	r1, #10
 8005fec:	d0fa      	beq.n	8005fe4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8005fee:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	d0f6      	beq.n	8005fe4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8005ff6:	f242 020b 	movw	r2, #8203	; 0x200b
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	d0f2      	beq.n	8005fe4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8005ffe:	f7ff ffaf 	bl	8005f60 <_ZNK8touchgfx9ConstFont4findEt>
 8006002:	4605      	mov	r5, r0
 8006004:	b950      	cbnz	r0, 800601c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	4620      	mov	r0, r4
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4798      	blx	r3
 800600e:	4601      	mov	r1, r0
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff ffa5 	bl	8005f60 <_ZNK8touchgfx9ConstFont4findEt>
 8006016:	4605      	mov	r5, r0
 8006018:	2800      	cmp	r0, #0
 800601a:	d0e3      	beq.n	8005fe4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	4629      	mov	r1, r5
 8006020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006022:	4620      	mov	r0, r4
 8006024:	4798      	blx	r3
 8006026:	6038      	str	r0, [r7, #0]
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	4620      	mov	r0, r4
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	4798      	blx	r3
 8006030:	7030      	strb	r0, [r6, #0]
 8006032:	e7d8      	b.n	8005fe6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08006034 <_ZN8touchgfx12TextProviderC1Ev>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	2500      	movs	r5, #0
 8006038:	2302      	movs	r3, #2
 800603a:	4604      	mov	r4, r0
 800603c:	e9c0 5500 	strd	r5, r5, [r0]
 8006040:	7403      	strb	r3, [r0, #16]
 8006042:	6145      	str	r5, [r0, #20]
 8006044:	7605      	strb	r5, [r0, #24]
 8006046:	83c5      	strh	r5, [r0, #30]
 8006048:	8405      	strh	r5, [r0, #32]
 800604a:	86c5      	strh	r5, [r0, #54]	; 0x36
 800604c:	8705      	strh	r5, [r0, #56]	; 0x38
 800604e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8006050:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8006054:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8006058:	220e      	movs	r2, #14
 800605a:	4629      	mov	r1, r5
 800605c:	304c      	adds	r0, #76	; 0x4c
 800605e:	f000 ff53 	bl	8006f08 <memset>
 8006062:	2301      	movs	r3, #1
 8006064:	4620      	mov	r0, r4
 8006066:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800606a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800606e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8006072:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8006076:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800607a:	f7ff fdd9 	bl	8005c30 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800607e:	4620      	mov	r0, r4
 8006080:	bd38      	pop	{r3, r4, r5, pc}

08006082 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8006082:	b530      	push	{r4, r5, lr}
 8006084:	2500      	movs	r5, #0
 8006086:	2401      	movs	r4, #1
 8006088:	6843      	ldr	r3, [r0, #4]
 800608a:	b913      	cbnz	r3, 8006092 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800608c:	6803      	ldr	r3, [r0, #0]
 800608e:	b313      	cbz	r3, 80060d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8006090:	6043      	str	r3, [r0, #4]
 8006092:	7e03      	ldrb	r3, [r0, #24]
 8006094:	b143      	cbz	r3, 80060a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8006096:	6943      	ldr	r3, [r0, #20]
 8006098:	b12b      	cbz	r3, 80060a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	b11a      	cbz	r2, 80060a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800609e:	1c9a      	adds	r2, r3, #2
 80060a0:	6142      	str	r2, [r0, #20]
 80060a2:	8818      	ldrh	r0, [r3, #0]
 80060a4:	bd30      	pop	{r4, r5, pc}
 80060a6:	7605      	strb	r5, [r0, #24]
 80060a8:	6843      	ldr	r3, [r0, #4]
 80060aa:	8819      	ldrh	r1, [r3, #0]
 80060ac:	b199      	cbz	r1, 80060d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	2902      	cmp	r1, #2
 80060b2:	6042      	str	r2, [r0, #4]
 80060b4:	d1f5      	bne.n	80060a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80060b6:	7c03      	ldrb	r3, [r0, #16]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d8e5      	bhi.n	8006088 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	3302      	adds	r3, #2
 80060c0:	7402      	strb	r2, [r0, #16]
 80060c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80060c6:	6143      	str	r3, [r0, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0dd      	beq.n	8006088 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0da      	beq.n	8006088 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80060d2:	7604      	strb	r4, [r0, #24]
 80060d4:	e7d8      	b.n	8006088 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80060d6:	2000      	movs	r0, #0
 80060d8:	e7e4      	b.n	80060a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080060da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80060da:	b430      	push	{r4, r5}
 80060dc:	6001      	str	r1, [r0, #0]
 80060de:	2100      	movs	r1, #0
 80060e0:	6041      	str	r1, [r0, #4]
 80060e2:	6815      	ldr	r5, [r2, #0]
 80060e4:	6085      	str	r5, [r0, #8]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	6443      	str	r3, [r0, #68]	; 0x44
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	60c2      	str	r2, [r0, #12]
 80060ee:	7401      	strb	r1, [r0, #16]
 80060f0:	6141      	str	r1, [r0, #20]
 80060f2:	7601      	strb	r1, [r0, #24]
 80060f4:	8701      	strh	r1, [r0, #56]	; 0x38
 80060f6:	8401      	strh	r1, [r0, #32]
 80060f8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80060fc:	6483      	str	r3, [r0, #72]	; 0x48
 80060fe:	bc30      	pop	{r4, r5}
 8006100:	f7ff bd96 	b.w	8005c30 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08006104 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8006104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006106:	4605      	mov	r5, r0
 8006108:	4608      	mov	r0, r1
 800610a:	b1e9      	cbz	r1, 8006148 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800610c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8006110:	460b      	mov	r3, r1
 8006112:	f101 0708 	add.w	r7, r1, #8
 8006116:	4622      	mov	r2, r4
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	6859      	ldr	r1, [r3, #4]
 800611c:	4626      	mov	r6, r4
 800611e:	c603      	stmia	r6!, {r0, r1}
 8006120:	3308      	adds	r3, #8
 8006122:	42bb      	cmp	r3, r7
 8006124:	4634      	mov	r4, r6
 8006126:	d1f7      	bne.n	8006118 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	6030      	str	r0, [r6, #0]
 800612c:	889b      	ldrh	r3, [r3, #4]
 800612e:	80b3      	strh	r3, [r6, #4]
 8006130:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8006134:	015b      	lsls	r3, r3, #5
 8006136:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800613a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800613e:	430b      	orrs	r3, r1
 8006140:	425b      	negs	r3, r3
 8006142:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8006146:	4610      	mov	r0, r2
 8006148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800614a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800614a:	b538      	push	{r3, r4, r5, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	6811      	ldr	r1, [r2, #0]
 8006150:	4610      	mov	r0, r2
 8006152:	68cd      	ldr	r5, [r1, #12]
 8006154:	4619      	mov	r1, r3
 8006156:	47a8      	blx	r5
 8006158:	2800      	cmp	r0, #0
 800615a:	bf08      	it	eq
 800615c:	4620      	moveq	r0, r4
 800615e:	bd38      	pop	{r3, r4, r5, pc}

08006160 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8006160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	468c      	mov	ip, r1
 8006166:	4605      	mov	r5, r0
 8006168:	4614      	mov	r4, r2
 800616a:	b942      	cbnz	r2, 800617e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800616c:	f8a5 205a 	strh.w	r2, [r5, #90]	; 0x5a
 8006170:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
 8006174:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
 8006178:	4620      	mov	r0, r4
 800617a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800617e:	7b50      	ldrb	r0, [r2, #13]
 8006180:	8893      	ldrh	r3, [r2, #4]
 8006182:	0106      	lsls	r6, r0, #4
 8006184:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8006188:	79e6      	ldrb	r6, [r4, #7]
 800618a:	f46f 6163 	mvn.w	r1, #3632	; 0xe30
 800618e:	4316      	orrs	r6, r2
 8006190:	185a      	adds	r2, r3, r1
 8006192:	b291      	uxth	r1, r2
 8006194:	291d      	cmp	r1, #29
 8006196:	b2b7      	uxth	r7, r6
 8006198:	d87e      	bhi.n	8006298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800619a:	2201      	movs	r2, #1
 800619c:	408a      	lsls	r2, r1
 800619e:	498a      	ldr	r1, [pc, #552]	; (80063c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 80061a0:	420a      	tst	r2, r1
 80061a2:	ea4f 06e6 	mov.w	r6, r6, asr #3
 80061a6:	d12d      	bne.n	8006204 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80061a8:	f412 7f60 	tst.w	r2, #896	; 0x380
 80061ac:	d074      	beq.n	8006298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 80061ae:	f105 024c 	add.w	r2, r5, #76	; 0x4c
 80061b2:	4623      	mov	r3, r4
 80061b4:	f104 0e08 	add.w	lr, r4, #8
 80061b8:	4614      	mov	r4, r2
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
 80061be:	4694      	mov	ip, r2
 80061c0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80061c4:	3308      	adds	r3, #8
 80061c6:	4573      	cmp	r3, lr
 80061c8:	4662      	mov	r2, ip
 80061ca:	d1f6      	bne.n	80061ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	f8cc 0000 	str.w	r0, [ip]
 80061d2:	889b      	ldrh	r3, [r3, #4]
 80061d4:	f8ac 3004 	strh.w	r3, [ip, #4]
 80061d8:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 80061dc:	f895 0059 	ldrb.w	r0, [r5, #89]	; 0x59
 80061e0:	b2b3      	uxth	r3, r6
 80061e2:	1aca      	subs	r2, r1, r3
 80061e4:	b292      	uxth	r2, r2
 80061e6:	f885 2054 	strb.w	r2, [r5, #84]	; 0x54
 80061ea:	10d2      	asrs	r2, r2, #3
 80061ec:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80061f0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80061f4:	4302      	orrs	r2, r0
 80061f6:	1bcf      	subs	r7, r1, r7
 80061f8:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
 80061fc:	1afb      	subs	r3, r7, r3
 80061fe:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
 8006202:	e7b9      	b.n	8006178 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8006204:	f105 024c 	add.w	r2, r5, #76	; 0x4c
 8006208:	4623      	mov	r3, r4
 800620a:	f104 0808 	add.w	r8, r4, #8
 800620e:	4614      	mov	r4, r2
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	4696      	mov	lr, r2
 8006216:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800621a:	3308      	adds	r3, #8
 800621c:	4543      	cmp	r3, r8
 800621e:	4672      	mov	r2, lr
 8006220:	d1f6      	bne.n	8006210 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	f8ce 0000 	str.w	r0, [lr]
 8006228:	889b      	ldrh	r3, [r3, #4]
 800622a:	f8ae 3004 	strh.w	r3, [lr, #4]
 800622e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8006230:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006234:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8006236:	f640 6333 	movw	r3, #3635	; 0xe33
 800623a:	4299      	cmp	r1, r3
 800623c:	d111      	bne.n	8006262 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800623e:	f8dc 3000 	ldr.w	r3, [ip]
 8006242:	4660      	mov	r0, ip
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	4798      	blx	r3
 8006248:	7b41      	ldrb	r1, [r0, #13]
 800624a:	00cb      	lsls	r3, r1, #3
 800624c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8006250:	7a03      	ldrb	r3, [r0, #8]
 8006252:	4313      	orrs	r3, r2
 8006254:	064a      	lsls	r2, r1, #25
 8006256:	bf44      	itt	mi
 8006258:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800625c:	b21b      	sxthmi	r3, r3
 800625e:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 8006262:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 8006266:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
 800626a:	443b      	add	r3, r7
 800626c:	4433      	add	r3, r6
 800626e:	b29b      	uxth	r3, r3
 8006270:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 8006274:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8006278:	10db      	asrs	r3, r3, #3
 800627a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800627e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006282:	4313      	orrs	r3, r2
 8006284:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
 8006288:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
 800628c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8006296:	e76f      	b.n	8006178 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8006298:	f023 0204 	bic.w	r2, r3, #4
 800629c:	f640 611b 	movw	r1, #3611	; 0xe1b
 80062a0:	428a      	cmp	r2, r1
 80062a2:	d003      	beq.n	80062ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 80062a4:	f640 621d 	movw	r2, #3613	; 0xe1d
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d137      	bne.n	800631c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 80062ac:	f105 064c 	add.w	r6, r5, #76	; 0x4c
 80062b0:	4622      	mov	r2, r4
 80062b2:	f104 0808 	add.w	r8, r4, #8
 80062b6:	4634      	mov	r4, r6
 80062b8:	6810      	ldr	r0, [r2, #0]
 80062ba:	6851      	ldr	r1, [r2, #4]
 80062bc:	46b6      	mov	lr, r6
 80062be:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80062c2:	3208      	adds	r2, #8
 80062c4:	4542      	cmp	r2, r8
 80062c6:	4676      	mov	r6, lr
 80062c8:	d1f6      	bne.n	80062b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80062ca:	6810      	ldr	r0, [r2, #0]
 80062cc:	f8ce 0000 	str.w	r0, [lr]
 80062d0:	8892      	ldrh	r2, [r2, #4]
 80062d2:	f8ae 2004 	strh.w	r2, [lr, #4]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29b      	uxth	r3, r3
 80062da:	4662      	mov	r2, ip
 80062dc:	4621      	mov	r1, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	f7ff ff33 	bl	800614a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80062e4:	7b41      	ldrb	r1, [r0, #13]
 80062e6:	00cb      	lsls	r3, r1, #3
 80062e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80062ec:	7a03      	ldrb	r3, [r0, #8]
 80062ee:	0648      	lsls	r0, r1, #25
 80062f0:	ea43 0302 	orr.w	r3, r3, r2
 80062f4:	bf44      	itt	mi
 80062f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80062fa:	b21b      	sxthmi	r3, r3
 80062fc:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 8006300:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8006304:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	4313      	orrs	r3, r2
 8006310:	115a      	asrs	r2, r3, #5
 8006312:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8006316:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
 800631a:	e046      	b.n	80063aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800631c:	00c2      	lsls	r2, r0, #3
 800631e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8006322:	7a22      	ldrb	r2, [r4, #8]
 8006324:	430a      	orrs	r2, r1
 8006326:	0641      	lsls	r1, r0, #25
 8006328:	bf44      	itt	mi
 800632a:	f5a2 7200 	submi.w	r2, r2, #512	; 0x200
 800632e:	b212      	sxthmi	r2, r2
 8006330:	f8a5 205a 	strh.w	r2, [r5, #90]	; 0x5a
 8006334:	f640 6109 	movw	r1, #3593	; 0xe09
 8006338:	f023 0210 	bic.w	r2, r3, #16
 800633c:	428a      	cmp	r2, r1
 800633e:	d003      	beq.n	8006348 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 8006340:	f640 6213 	movw	r2, #3603	; 0xe13
 8006344:	4293      	cmp	r3, r2
 8006346:	d13d      	bne.n	80063c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 8006348:	f105 024c 	add.w	r2, r5, #76	; 0x4c
 800634c:	f104 0808 	add.w	r8, r4, #8
 8006350:	4696      	mov	lr, r2
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	6861      	ldr	r1, [r4, #4]
 8006356:	4616      	mov	r6, r2
 8006358:	c603      	stmia	r6!, {r0, r1}
 800635a:	3408      	adds	r4, #8
 800635c:	4544      	cmp	r4, r8
 800635e:	4632      	mov	r2, r6
 8006360:	d1f7      	bne.n	8006352 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	6030      	str	r0, [r6, #0]
 8006366:	88a1      	ldrh	r1, [r4, #4]
 8006368:	80b1      	strh	r1, [r6, #4]
 800636a:	f895 6059 	ldrb.w	r6, [r5, #89]	; 0x59
 800636e:	0076      	lsls	r6, r6, #1
 8006370:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8006374:	f895 6056 	ldrb.w	r6, [r5, #86]	; 0x56
 8006378:	4316      	orrs	r6, r2
 800637a:	f640 6213 	movw	r2, #3603	; 0xe13
 800637e:	4293      	cmp	r3, r2
 8006380:	bf1a      	itte	ne
 8006382:	f103 33ff 	addne.w	r3, r3, #4294967295
 8006386:	b29b      	uxthne	r3, r3
 8006388:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800638c:	4662      	mov	r2, ip
 800638e:	4671      	mov	r1, lr
 8006390:	4628      	mov	r0, r5
 8006392:	4674      	mov	r4, lr
 8006394:	f7ff fed9 	bl	800614a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8006398:	7b43      	ldrb	r3, [r0, #13]
 800639a:	7a82      	ldrb	r2, [r0, #10]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	4313      	orrs	r3, r2
 80063a4:	1af6      	subs	r6, r6, r3
 80063a6:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
 80063aa:	7b61      	ldrb	r1, [r4, #13]
 80063ac:	00cb      	lsls	r3, r1, #3
 80063ae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80063b2:	7a23      	ldrb	r3, [r4, #8]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	064a      	lsls	r2, r1, #25
 80063b8:	bf44      	itt	mi
 80063ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80063be:	b21b      	sxthmi	r3, r3
 80063c0:	1bdb      	subs	r3, r3, r7
 80063c2:	e71c      	b.n	80061fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e7a6      	b.n	8006316 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80063c8:	3fc00079 	.word	0x3fc00079

080063cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80063cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063d0:	4604      	mov	r4, r0
 80063d2:	b942      	cbnz	r2, 80063e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80063d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80063dc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80063e0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80063e4:	e047      	b.n	8006476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80063e6:	7b51      	ldrb	r1, [r2, #13]
 80063e8:	8893      	ldrh	r3, [r2, #4]
 80063ea:	010d      	lsls	r5, r1, #4
 80063ec:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80063f0:	79d5      	ldrb	r5, [r2, #7]
 80063f2:	4305      	orrs	r5, r0
 80063f4:	2d04      	cmp	r5, #4
 80063f6:	bfcc      	ite	gt
 80063f8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80063fc:	f04f 0e01 	movle.w	lr, #1
 8006400:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8006404:	f200 80ab 	bhi.w	800655e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8006408:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800640c:	4283      	cmp	r3, r0
 800640e:	d216      	bcs.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006410:	f240 605b 	movw	r0, #1627	; 0x65b
 8006414:	4283      	cmp	r3, r0
 8006416:	d859      	bhi.n	80064cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8006418:	f240 6057 	movw	r0, #1623	; 0x657
 800641c:	4283      	cmp	r3, r0
 800641e:	d20e      	bcs.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006420:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8006424:	d24a      	bcs.n	80064bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8006426:	f240 604e 	movw	r0, #1614	; 0x64e
 800642a:	4283      	cmp	r3, r0
 800642c:	d207      	bcs.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800642e:	f240 601a 	movw	r0, #1562	; 0x61a
 8006432:	4283      	cmp	r3, r0
 8006434:	d02a      	beq.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8006436:	d821      	bhi.n	800647c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8006438:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800643c:	d35b      	bcc.n	80064f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800643e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8006442:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006446:	f040 80d0 	bne.w	80065ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800644a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800644e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8006452:	f040 80ca 	bne.w	80065ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8006456:	00cb      	lsls	r3, r1, #3
 8006458:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800645c:	7a13      	ldrb	r3, [r2, #8]
 800645e:	0649      	lsls	r1, r1, #25
 8006460:	ea43 0300 	orr.w	r3, r3, r0
 8006464:	bf44      	itt	mi
 8006466:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800646a:	b21b      	sxthmi	r3, r3
 800646c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006470:	1b5d      	subs	r5, r3, r5
 8006472:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8006476:	4610      	mov	r0, r2
 8006478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800647c:	f240 604b 	movw	r0, #1611	; 0x64b
 8006480:	4283      	cmp	r3, r0
 8006482:	d338      	bcc.n	80064f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8006484:	f240 604c 	movw	r0, #1612	; 0x64c
 8006488:	4283      	cmp	r3, r0
 800648a:	d9d8      	bls.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800648c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8006490:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8006494:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8006498:	f040 80f2 	bne.w	8006680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800649c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80064a0:	f040 80ee 	bne.w	8006680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80064a4:	00cb      	lsls	r3, r1, #3
 80064a6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80064aa:	7a13      	ldrb	r3, [r2, #8]
 80064ac:	064e      	lsls	r6, r1, #25
 80064ae:	ea43 0300 	orr.w	r3, r3, r0
 80064b2:	bf44      	itt	mi
 80064b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80064b8:	b21b      	sxthmi	r3, r3
 80064ba:	e7d9      	b.n	8006470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80064bc:	f240 6054 	movw	r0, #1620	; 0x654
 80064c0:	4283      	cmp	r3, r0
 80064c2:	d8e3      	bhi.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80064c4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80064c8:	d9e0      	bls.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80064ca:	e7b8      	b.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80064cc:	f240 6074 	movw	r0, #1652	; 0x674
 80064d0:	4283      	cmp	r3, r0
 80064d2:	d0b4      	beq.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80064d4:	d82d      	bhi.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80064d6:	f240 605e 	movw	r0, #1630	; 0x65e
 80064da:	4283      	cmp	r3, r0
 80064dc:	d804      	bhi.n	80064e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80064de:	f240 605d 	movw	r0, #1629	; 0x65d
 80064e2:	4283      	cmp	r3, r0
 80064e4:	d3d2      	bcc.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80064e6:	e7aa      	b.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80064e8:	f240 605f 	movw	r0, #1631	; 0x65f
 80064ec:	4283      	cmp	r3, r0
 80064ee:	d0cd      	beq.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80064f0:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80064f4:	d0a3      	beq.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80064f6:	00cb      	lsls	r3, r1, #3
 80064f8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80064fc:	7a13      	ldrb	r3, [r2, #8]
 80064fe:	0649      	lsls	r1, r1, #25
 8006500:	ea43 0300 	orr.w	r3, r3, r0
 8006504:	bf44      	itt	mi
 8006506:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800650a:	b21b      	sxthmi	r3, r3
 800650c:	1b5d      	subs	r5, r3, r5
 800650e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006512:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8006516:	7b53      	ldrb	r3, [r2, #13]
 8006518:	015b      	lsls	r3, r3, #5
 800651a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800651e:	7993      	ldrb	r3, [r2, #6]
 8006520:	430b      	orrs	r3, r1
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	2105      	movs	r1, #5
 8006526:	fb93 f3f1 	sdiv	r3, r3, r1
 800652a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800652e:	440b      	add	r3, r1
 8006530:	e756      	b.n	80063e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8006532:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8006536:	4283      	cmp	r3, r0
 8006538:	d809      	bhi.n	800654e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800653a:	f240 60df 	movw	r0, #1759	; 0x6df
 800653e:	4283      	cmp	r3, r0
 8006540:	f4bf af7d 	bcs.w	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006544:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8006548:	2b05      	cmp	r3, #5
 800654a:	d8d4      	bhi.n	80064f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800654c:	e777      	b.n	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800654e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8006552:	4283      	cmp	r3, r0
 8006554:	d09a      	beq.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8006556:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800655a:	4283      	cmp	r3, r0
 800655c:	e7ca      	b.n	80064f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800655e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8006562:	d22b      	bcs.n	80065bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8006564:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8006568:	4283      	cmp	r3, r0
 800656a:	d28f      	bcs.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800656c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006570:	4283      	cmp	r3, r0
 8006572:	d816      	bhi.n	80065a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8006574:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8006578:	4283      	cmp	r3, r0
 800657a:	f4bf af60 	bcs.w	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800657e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8006582:	4283      	cmp	r3, r0
 8006584:	d80a      	bhi.n	800659c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8006586:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800658a:	4283      	cmp	r3, r0
 800658c:	f4bf af57 	bcs.w	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006590:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8006594:	4283      	cmp	r3, r0
 8006596:	f43f af79 	beq.w	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800659a:	e7ac      	b.n	80064f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800659c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80065a0:	e7f8      	b.n	8006594 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80065a2:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80065a6:	4283      	cmp	r3, r0
 80065a8:	d802      	bhi.n	80065b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80065aa:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80065ae:	e798      	b.n	80064e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80065b0:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80065b4:	4283      	cmp	r3, r0
 80065b6:	f47f af42 	bne.w	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80065ba:	e767      	b.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065bc:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80065c0:	4283      	cmp	r3, r0
 80065c2:	f43f af63 	beq.w	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065c6:	d802      	bhi.n	80065ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80065c8:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80065cc:	e7f2      	b.n	80065b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80065ce:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80065d2:	4283      	cmp	r3, r0
 80065d4:	d805      	bhi.n	80065e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80065d6:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80065da:	4283      	cmp	r3, r0
 80065dc:	f4ff af2f 	bcc.w	800643e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80065e0:	e754      	b.n	800648c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065e2:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80065e6:	4283      	cmp	r3, r0
 80065e8:	e7af      	b.n	800654a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80065ea:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80065ee:	4617      	mov	r7, r2
 80065f0:	f102 0808 	add.w	r8, r2, #8
 80065f4:	4666      	mov	r6, ip
 80065f6:	6838      	ldr	r0, [r7, #0]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	46e6      	mov	lr, ip
 80065fc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8006600:	3708      	adds	r7, #8
 8006602:	4547      	cmp	r7, r8
 8006604:	46f4      	mov	ip, lr
 8006606:	d1f6      	bne.n	80065f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8006608:	6838      	ldr	r0, [r7, #0]
 800660a:	f8ce 0000 	str.w	r0, [lr]
 800660e:	88b9      	ldrh	r1, [r7, #4]
 8006610:	f8ae 1004 	strh.w	r1, [lr, #4]
 8006614:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8006618:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800661c:	d009      	beq.n	8006632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800661e:	7b51      	ldrb	r1, [r2, #13]
 8006620:	7992      	ldrb	r2, [r2, #6]
 8006622:	0149      	lsls	r1, r1, #5
 8006624:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8006628:	4311      	orrs	r1, r2
 800662a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800662e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8006632:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006636:	b2ad      	uxth	r5, r5
 8006638:	d00d      	beq.n	8006656 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800663a:	442b      	add	r3, r5
 800663c:	b29b      	uxth	r3, r3
 800663e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8006642:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8006646:	10db      	asrs	r3, r3, #3
 8006648:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800664c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006650:	4313      	orrs	r3, r2
 8006652:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8006656:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800665a:	00cb      	lsls	r3, r1, #3
 800665c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8006660:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8006664:	064f      	lsls	r7, r1, #25
 8006666:	ea43 0302 	orr.w	r3, r3, r2
 800666a:	bf44      	itt	mi
 800666c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006670:	b21b      	sxthmi	r3, r3
 8006672:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006676:	1b5b      	subs	r3, r3, r5
 8006678:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800667c:	4632      	mov	r2, r6
 800667e:	e6fa      	b.n	8006476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8006680:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8006684:	4617      	mov	r7, r2
 8006686:	f102 0908 	add.w	r9, r2, #8
 800668a:	4666      	mov	r6, ip
 800668c:	6838      	ldr	r0, [r7, #0]
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	46e0      	mov	r8, ip
 8006692:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8006696:	3708      	adds	r7, #8
 8006698:	454f      	cmp	r7, r9
 800669a:	46c4      	mov	ip, r8
 800669c:	d1f6      	bne.n	800668c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800669e:	6838      	ldr	r0, [r7, #0]
 80066a0:	f8c8 0000 	str.w	r0, [r8]
 80066a4:	88b9      	ldrh	r1, [r7, #4]
 80066a6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80066aa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80066ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80066b2:	d009      	beq.n	80066c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 80066b4:	7b51      	ldrb	r1, [r2, #13]
 80066b6:	7992      	ldrb	r2, [r2, #6]
 80066b8:	0149      	lsls	r1, r1, #5
 80066ba:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80066be:	4311      	orrs	r1, r2
 80066c0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80066c4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80066c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80066cc:	d00e      	beq.n	80066ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 80066ce:	eba3 030e 	sub.w	r3, r3, lr
 80066d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80066dc:	10db      	asrs	r3, r3, #3
 80066de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80066ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80066f0:	00cb      	lsls	r3, r1, #3
 80066f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80066f6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80066fa:	0648      	lsls	r0, r1, #25
 80066fc:	ea43 0302 	orr.w	r3, r3, r2
 8006700:	bf44      	itt	mi
 8006702:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006706:	b21b      	sxthmi	r3, r3
 8006708:	1b5d      	subs	r5, r3, r5
 800670a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800670e:	e7b5      	b.n	800667c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08006710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	461e      	mov	r6, r3
 8006716:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006718:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800671c:	4604      	mov	r4, r0
 800671e:	4617      	mov	r7, r2
 8006720:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8006724:	f7ff f9de 	bl	8005ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8006728:	4605      	mov	r5, r0
 800672a:	b918      	cbnz	r0, 8006734 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800672c:	6030      	str	r0, [r6, #0]
 800672e:	4628      	mov	r0, r5
 8006730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	4601      	mov	r1, r0
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4638      	mov	r0, r7
 800673c:	4798      	blx	r3
 800673e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8006742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006746:	4602      	mov	r2, r0
 8006748:	6030      	str	r0, [r6, #0]
 800674a:	d213      	bcs.n	8006774 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800674c:	4643      	mov	r3, r8
 800674e:	4639      	mov	r1, r7
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff fe3b 	bl	80063cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8006756:	6030      	str	r0, [r6, #0]
 8006758:	6833      	ldr	r3, [r6, #0]
 800675a:	b143      	cbz	r3, 800676e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800675c:	7b5a      	ldrb	r2, [r3, #13]
 800675e:	7a9b      	ldrb	r3, [r3, #10]
 8006760:	0052      	lsls	r2, r2, #1
 8006762:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006766:	4313      	orrs	r3, r2
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8006772:	e7dc      	b.n	800672e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8006774:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b7f      	cmp	r3, #127	; 0x7f
 800677c:	d804      	bhi.n	8006788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800677e:	4639      	mov	r1, r7
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff fced 	bl	8006160 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8006786:	e7e6      	b.n	8006756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8006788:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0e3      	beq.n	8006758 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8006790:	f640 1302 	movw	r3, #2306	; 0x902
 8006794:	429d      	cmp	r5, r3
 8006796:	d1df      	bne.n	8006758 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8006798:	4601      	mov	r1, r0
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff fcb2 	bl	8006104 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80067a0:	e7d9      	b.n	8006756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080067a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80067a2:	b510      	push	{r4, lr}
 80067a4:	4604      	mov	r4, r0
 80067a6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80067aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80067ac:	b1f1      	cbz	r1, 80067ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d02f      	beq.n	8006812 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80067b2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80067b4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80067b8:	3901      	subs	r1, #1
 80067ba:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80067bc:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80067c0:	1c51      	adds	r1, r2, #1
 80067c2:	b289      	uxth	r1, r1
 80067c4:	2901      	cmp	r1, #1
 80067c6:	bf84      	itt	hi
 80067c8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80067cc:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80067ce:	f103 0201 	add.w	r2, r3, #1
 80067d2:	8722      	strh	r2, [r4, #56]	; 0x38
 80067d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80067d6:	bf98      	it	ls
 80067d8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80067da:	4413      	add	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b09      	cmp	r3, #9
 80067e0:	bf88      	it	hi
 80067e2:	3b0a      	subhi	r3, #10
 80067e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80067e8:	8458      	strh	r0, [r3, #34]	; 0x22
 80067ea:	e7dc      	b.n	80067a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80067ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80067ee:	2b0a      	cmp	r3, #10
 80067f0:	d00f      	beq.n	8006812 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff fc45 	bl	8006082 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80067f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	8722      	strh	r2, [r4, #56]	; 0x38
 80067fe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006800:	4413      	add	r3, r2
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b09      	cmp	r3, #9
 8006806:	bf88      	it	hi
 8006808:	3b0a      	subhi	r3, #10
 800680a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800680e:	8458      	strh	r0, [r3, #34]	; 0x22
 8006810:	e7ec      	b.n	80067ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8006812:	bd10      	pop	{r4, pc}

08006814 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006818:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800681c:	4604      	mov	r4, r0
 800681e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8006820:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8006822:	3a01      	subs	r2, #1
 8006824:	8702      	strh	r2, [r0, #56]	; 0x38
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	b292      	uxth	r2, r2
 800682a:	2a09      	cmp	r2, #9
 800682c:	bf86      	itte	hi
 800682e:	3b09      	subhi	r3, #9
 8006830:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8006832:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8006834:	f7ff ffb5 	bl	80067a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8006838:	8c23      	ldrh	r3, [r4, #32]
 800683a:	2b01      	cmp	r3, #1
 800683c:	bf9c      	itt	ls
 800683e:	3301      	addls	r3, #1
 8006840:	8423      	strhls	r3, [r4, #32]
 8006842:	8be3      	ldrh	r3, [r4, #30]
 8006844:	b90b      	cbnz	r3, 800684a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8006846:	2302      	movs	r3, #2
 8006848:	83e3      	strh	r3, [r4, #30]
 800684a:	8be3      	ldrh	r3, [r4, #30]
 800684c:	3b01      	subs	r3, #1
 800684e:	b29b      	uxth	r3, r3
 8006850:	83e3      	strh	r3, [r4, #30]
 8006852:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8006856:	4628      	mov	r0, r5
 8006858:	8365      	strh	r5, [r4, #26]
 800685a:	bd38      	pop	{r3, r4, r5, pc}

0800685c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800685c:	428a      	cmp	r2, r1
 800685e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006862:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8006864:	d931      	bls.n	80068ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8006866:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8006868:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800686c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8006870:	19ee      	adds	r6, r5, r7
 8006872:	1a54      	subs	r4, r2, r1
 8006874:	3e01      	subs	r6, #1
 8006876:	fa1f fe84 	uxth.w	lr, r4
 800687a:	b2b4      	uxth	r4, r6
 800687c:	eba4 090e 	sub.w	r9, r4, lr
 8006880:	fa1f f989 	uxth.w	r9, r9
 8006884:	2c09      	cmp	r4, #9
 8006886:	4626      	mov	r6, r4
 8006888:	bf88      	it	hi
 800688a:	f1a4 060a 	subhi.w	r6, r4, #10
 800688e:	f1bc 0f00 	cmp.w	ip, #0
 8006892:	bf08      	it	eq
 8006894:	f04f 0c02 	moveq.w	ip, #2
 8006898:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800689c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068a0:	fa1f fc8c 	uxth.w	ip, ip
 80068a4:	3c01      	subs	r4, #1
 80068a6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80068aa:	b2a4      	uxth	r4, r4
 80068ac:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80068b0:	454c      	cmp	r4, r9
 80068b2:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80068b6:	d1e5      	bne.n	8006884 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80068b8:	eba5 050e 	sub.w	r5, r5, lr
 80068bc:	eb0e 0408 	add.w	r4, lr, r8
 80068c0:	8705      	strh	r5, [r0, #56]	; 0x38
 80068c2:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80068c6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80068ca:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80068cc:	1a64      	subs	r4, r4, r1
 80068ce:	4439      	add	r1, r7
 80068d0:	b289      	uxth	r1, r1
 80068d2:	2909      	cmp	r1, #9
 80068d4:	bf88      	it	hi
 80068d6:	390a      	subhi	r1, #10
 80068d8:	8704      	strh	r4, [r0, #56]	; 0x38
 80068da:	86c1      	strh	r1, [r0, #54]	; 0x36
 80068dc:	250a      	movs	r5, #10
 80068de:	b18a      	cbz	r2, 8006904 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 80068e0:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80068e2:	3a01      	subs	r2, #1
 80068e4:	b292      	uxth	r2, r2
 80068e6:	3101      	adds	r1, #1
 80068e8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80068ec:	8701      	strh	r1, [r0, #56]	; 0x38
 80068ee:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80068f0:	b901      	cbnz	r1, 80068f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 80068f2:	86c5      	strh	r5, [r0, #54]	; 0x36
 80068f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80068f6:	3901      	subs	r1, #1
 80068f8:	b289      	uxth	r1, r1
 80068fa:	86c1      	strh	r1, [r0, #54]	; 0x36
 80068fc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006900:	844c      	strh	r4, [r1, #34]	; 0x22
 8006902:	e7ec      	b.n	80068de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8006904:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	f7ff bf4b 	b.w	80067a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800690c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	2500      	movs	r5, #0
 8006910:	4295      	cmp	r5, r2
 8006912:	d011      	beq.n	8006938 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8006914:	8bc4      	ldrh	r4, [r0, #30]
 8006916:	f831 6b02 	ldrh.w	r6, [r1], #2
 800691a:	4414      	add	r4, r2
 800691c:	3c01      	subs	r4, #1
 800691e:	1b64      	subs	r4, r4, r5
 8006920:	b2a4      	uxth	r4, r4
 8006922:	2c01      	cmp	r4, #1
 8006924:	bf88      	it	hi
 8006926:	3c02      	subhi	r4, #2
 8006928:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800692c:	8b64      	ldrh	r4, [r4, #26]
 800692e:	42b4      	cmp	r4, r6
 8006930:	d117      	bne.n	8006962 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8006932:	3501      	adds	r5, #1
 8006934:	b2ad      	uxth	r5, r5
 8006936:	e7eb      	b.n	8006910 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8006938:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800693c:	2400      	movs	r4, #0
 800693e:	4413      	add	r3, r2
 8006940:	b2a2      	uxth	r2, r4
 8006942:	429a      	cmp	r2, r3
 8006944:	da0f      	bge.n	8006966 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8006946:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8006948:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800694c:	4432      	add	r2, r6
 800694e:	b292      	uxth	r2, r2
 8006950:	2a09      	cmp	r2, #9
 8006952:	bf88      	it	hi
 8006954:	3a0a      	subhi	r2, #10
 8006956:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800695a:	3401      	adds	r4, #1
 800695c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800695e:	42aa      	cmp	r2, r5
 8006960:	d0ee      	beq.n	8006940 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8006962:	2000      	movs	r0, #0
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	2001      	movs	r0, #1
 8006968:	e7fc      	b.n	8006964 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800696a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800696a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696e:	4605      	mov	r5, r0
 8006970:	4616      	mov	r6, r2
 8006972:	1c8c      	adds	r4, r1, #2
 8006974:	8809      	ldrh	r1, [r1, #0]
 8006976:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800697a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800697e:	42b3      	cmp	r3, r6
 8006980:	d124      	bne.n	80069cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8006982:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8006986:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800698a:	f001 070f 	and.w	r7, r1, #15
 800698e:	f8cd 8000 	str.w	r8, [sp]
 8006992:	464b      	mov	r3, r9
 8006994:	4652      	mov	r2, sl
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	f7ff ffb7 	bl	800690c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800699e:	4683      	mov	fp, r0
 80069a0:	b168      	cbz	r0, 80069be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80069a2:	eb0a 0109 	add.w	r1, sl, r9
 80069a6:	4441      	add	r1, r8
 80069a8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80069ac:	463a      	mov	r2, r7
 80069ae:	4649      	mov	r1, r9
 80069b0:	4628      	mov	r0, r5
 80069b2:	f7ff ff53 	bl	800685c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80069b6:	4658      	mov	r0, fp
 80069b8:	b003      	add	sp, #12
 80069ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069be:	eb07 010a 	add.w	r1, r7, sl
 80069c2:	4449      	add	r1, r9
 80069c4:	4441      	add	r1, r8
 80069c6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80069ca:	e7d2      	b.n	8006972 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80069cc:	f04f 0b00 	mov.w	fp, #0
 80069d0:	e7f1      	b.n	80069b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080069d2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	8810      	ldrh	r0, [r2, #0]
 80069d6:	4298      	cmp	r0, r3
 80069d8:	d817      	bhi.n	8006a0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80069da:	1e48      	subs	r0, r1, #1
 80069dc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80069e0:	4298      	cmp	r0, r3
 80069e2:	d312      	bcc.n	8006a0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80069e4:	2400      	movs	r4, #0
 80069e6:	428c      	cmp	r4, r1
 80069e8:	d20f      	bcs.n	8006a0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80069ea:	1860      	adds	r0, r4, r1
 80069ec:	1040      	asrs	r0, r0, #1
 80069ee:	0085      	lsls	r5, r0, #2
 80069f0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80069f4:	42b3      	cmp	r3, r6
 80069f6:	d902      	bls.n	80069fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80069f8:	3001      	adds	r0, #1
 80069fa:	b284      	uxth	r4, r0
 80069fc:	e7f3      	b.n	80069e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80069fe:	d201      	bcs.n	8006a04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8006a00:	b281      	uxth	r1, r0
 8006a02:	e7f0      	b.n	80069e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8006a04:	442a      	add	r2, r5
 8006a06:	8850      	ldrh	r0, [r2, #2]
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	e7fc      	b.n	8006a08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08006a0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8006a14:	886f      	ldrh	r7, [r5, #2]
 8006a16:	4604      	mov	r4, r0
 8006a18:	087f      	lsrs	r7, r7, #1
 8006a1a:	260b      	movs	r6, #11
 8006a1c:	3e01      	subs	r6, #1
 8006a1e:	d013      	beq.n	8006a48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8006a20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006a26:	462a      	mov	r2, r5
 8006a28:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4643      	mov	r3, r8
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7ff ffce 	bl	80069d2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8006a36:	b138      	cbz	r0, 8006a48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8006a38:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff ff93 	bl	800696a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d1e9      	bne.n	8006a1c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a4c <_ZdlPvj>:
 8006a4c:	f000 b812 	b.w	8006a74 <_ZdlPv>

08006a50 <__cxa_guard_acquire>:
 8006a50:	6803      	ldr	r3, [r0, #0]
 8006a52:	07db      	lsls	r3, r3, #31
 8006a54:	d406      	bmi.n	8006a64 <__cxa_guard_acquire+0x14>
 8006a56:	7843      	ldrb	r3, [r0, #1]
 8006a58:	b103      	cbz	r3, 8006a5c <__cxa_guard_acquire+0xc>
 8006a5a:	deff      	udf	#255	; 0xff
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	7043      	strb	r3, [r0, #1]
 8006a60:	4618      	mov	r0, r3
 8006a62:	4770      	bx	lr
 8006a64:	2000      	movs	r0, #0
 8006a66:	4770      	bx	lr

08006a68 <__cxa_guard_release>:
 8006a68:	2301      	movs	r3, #1
 8006a6a:	6003      	str	r3, [r0, #0]
 8006a6c:	4770      	bx	lr

08006a6e <__cxa_pure_virtual>:
 8006a6e:	b508      	push	{r3, lr}
 8006a70:	f000 f80e 	bl	8006a90 <_ZSt9terminatev>

08006a74 <_ZdlPv>:
 8006a74:	f000 b844 	b.w	8006b00 <free>

08006a78 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006a78:	b508      	push	{r3, lr}
 8006a7a:	4780      	blx	r0
 8006a7c:	f000 f80d 	bl	8006a9a <abort>

08006a80 <_ZSt13get_terminatev>:
 8006a80:	4b02      	ldr	r3, [pc, #8]	; (8006a8c <_ZSt13get_terminatev+0xc>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	f3bf 8f5b 	dmb	ish
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000018 	.word	0x20000018

08006a90 <_ZSt9terminatev>:
 8006a90:	b508      	push	{r3, lr}
 8006a92:	f7ff fff5 	bl	8006a80 <_ZSt13get_terminatev>
 8006a96:	f7ff ffef 	bl	8006a78 <_ZN10__cxxabiv111__terminateEPFvvE>

08006a9a <abort>:
 8006a9a:	b508      	push	{r3, lr}
 8006a9c:	2006      	movs	r0, #6
 8006a9e:	f000 fa63 	bl	8006f68 <raise>
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	f7fb ff02 	bl	80028ac <_exit>

08006aa8 <__assert_func>:
 8006aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aaa:	4614      	mov	r4, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <__assert_func+0x2c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	68d8      	ldr	r0, [r3, #12]
 8006ab6:	b14c      	cbz	r4, 8006acc <__assert_func+0x24>
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <__assert_func+0x30>)
 8006aba:	9100      	str	r1, [sp, #0]
 8006abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ac0:	4906      	ldr	r1, [pc, #24]	; (8006adc <__assert_func+0x34>)
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	f000 f974 	bl	8006db0 <fiprintf>
 8006ac8:	f7ff ffe7 	bl	8006a9a <abort>
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <__assert_func+0x38>)
 8006ace:	461c      	mov	r4, r3
 8006ad0:	e7f3      	b.n	8006aba <__assert_func+0x12>
 8006ad2:	bf00      	nop
 8006ad4:	20000074 	.word	0x20000074
 8006ad8:	08009e34 	.word	0x08009e34
 8006adc:	08009e41 	.word	0x08009e41
 8006ae0:	08009e6f 	.word	0x08009e6f

08006ae4 <atexit>:
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 baea 	b.w	80070c4 <__register_exitproc>

08006af0 <malloc>:
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <malloc+0xc>)
 8006af2:	4601      	mov	r1, r0
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	f000 b82b 	b.w	8006b50 <_malloc_r>
 8006afa:	bf00      	nop
 8006afc:	20000074 	.word	0x20000074

08006b00 <free>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <free+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f000 bb3b 	b.w	8007180 <_free_r>
 8006b0a:	bf00      	nop
 8006b0c:	20000074 	.word	0x20000074

08006b10 <sbrk_aligned>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4e0e      	ldr	r6, [pc, #56]	; (8006b4c <sbrk_aligned+0x3c>)
 8006b14:	460c      	mov	r4, r1
 8006b16:	6831      	ldr	r1, [r6, #0]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b911      	cbnz	r1, 8006b22 <sbrk_aligned+0x12>
 8006b1c:	f000 fa74 	bl	8007008 <_sbrk_r>
 8006b20:	6030      	str	r0, [r6, #0]
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 fa6f 	bl	8007008 <_sbrk_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	d00a      	beq.n	8006b44 <sbrk_aligned+0x34>
 8006b2e:	1cc4      	adds	r4, r0, #3
 8006b30:	f024 0403 	bic.w	r4, r4, #3
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d007      	beq.n	8006b48 <sbrk_aligned+0x38>
 8006b38:	1a21      	subs	r1, r4, r0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 fa64 	bl	8007008 <_sbrk_r>
 8006b40:	3001      	adds	r0, #1
 8006b42:	d101      	bne.n	8006b48 <sbrk_aligned+0x38>
 8006b44:	f04f 34ff 	mov.w	r4, #4294967295
 8006b48:	4620      	mov	r0, r4
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	200002b4 	.word	0x200002b4

08006b50 <_malloc_r>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	1ccd      	adds	r5, r1, #3
 8006b56:	f025 0503 	bic.w	r5, r5, #3
 8006b5a:	3508      	adds	r5, #8
 8006b5c:	2d0c      	cmp	r5, #12
 8006b5e:	bf38      	it	cc
 8006b60:	250c      	movcc	r5, #12
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	4607      	mov	r7, r0
 8006b66:	db01      	blt.n	8006b6c <_malloc_r+0x1c>
 8006b68:	42a9      	cmp	r1, r5
 8006b6a:	d905      	bls.n	8006b78 <_malloc_r+0x28>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	2600      	movs	r6, #0
 8006b72:	4630      	mov	r0, r6
 8006b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c4c <_malloc_r+0xfc>
 8006b7c:	f000 f868 	bl	8006c50 <__malloc_lock>
 8006b80:	f8d8 3000 	ldr.w	r3, [r8]
 8006b84:	461c      	mov	r4, r3
 8006b86:	bb5c      	cbnz	r4, 8006be0 <_malloc_r+0x90>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f7ff ffc0 	bl	8006b10 <sbrk_aligned>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	4604      	mov	r4, r0
 8006b94:	d155      	bne.n	8006c42 <_malloc_r+0xf2>
 8006b96:	f8d8 4000 	ldr.w	r4, [r8]
 8006b9a:	4626      	mov	r6, r4
 8006b9c:	2e00      	cmp	r6, #0
 8006b9e:	d145      	bne.n	8006c2c <_malloc_r+0xdc>
 8006ba0:	2c00      	cmp	r4, #0
 8006ba2:	d048      	beq.n	8006c36 <_malloc_r+0xe6>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4638      	mov	r0, r7
 8006baa:	eb04 0903 	add.w	r9, r4, r3
 8006bae:	f000 fa2b 	bl	8007008 <_sbrk_r>
 8006bb2:	4581      	cmp	r9, r0
 8006bb4:	d13f      	bne.n	8006c36 <_malloc_r+0xe6>
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	1a6d      	subs	r5, r5, r1
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	f7ff ffa7 	bl	8006b10 <sbrk_aligned>
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d037      	beq.n	8006c36 <_malloc_r+0xe6>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	442b      	add	r3, r5
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d038      	beq.n	8006c46 <_malloc_r+0xf6>
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	42a2      	cmp	r2, r4
 8006bd8:	d12b      	bne.n	8006c32 <_malloc_r+0xe2>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	e00f      	b.n	8006c00 <_malloc_r+0xb0>
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	1b52      	subs	r2, r2, r5
 8006be4:	d41f      	bmi.n	8006c26 <_malloc_r+0xd6>
 8006be6:	2a0b      	cmp	r2, #11
 8006be8:	d917      	bls.n	8006c1a <_malloc_r+0xca>
 8006bea:	1961      	adds	r1, r4, r5
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	6025      	str	r5, [r4, #0]
 8006bf0:	bf18      	it	ne
 8006bf2:	6059      	strne	r1, [r3, #4]
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	bf08      	it	eq
 8006bf8:	f8c8 1000 	streq.w	r1, [r8]
 8006bfc:	5162      	str	r2, [r4, r5]
 8006bfe:	604b      	str	r3, [r1, #4]
 8006c00:	4638      	mov	r0, r7
 8006c02:	f104 060b 	add.w	r6, r4, #11
 8006c06:	f000 f829 	bl	8006c5c <__malloc_unlock>
 8006c0a:	f026 0607 	bic.w	r6, r6, #7
 8006c0e:	1d23      	adds	r3, r4, #4
 8006c10:	1af2      	subs	r2, r6, r3
 8006c12:	d0ae      	beq.n	8006b72 <_malloc_r+0x22>
 8006c14:	1b9b      	subs	r3, r3, r6
 8006c16:	50a3      	str	r3, [r4, r2]
 8006c18:	e7ab      	b.n	8006b72 <_malloc_r+0x22>
 8006c1a:	42a3      	cmp	r3, r4
 8006c1c:	6862      	ldr	r2, [r4, #4]
 8006c1e:	d1dd      	bne.n	8006bdc <_malloc_r+0x8c>
 8006c20:	f8c8 2000 	str.w	r2, [r8]
 8006c24:	e7ec      	b.n	8006c00 <_malloc_r+0xb0>
 8006c26:	4623      	mov	r3, r4
 8006c28:	6864      	ldr	r4, [r4, #4]
 8006c2a:	e7ac      	b.n	8006b86 <_malloc_r+0x36>
 8006c2c:	4634      	mov	r4, r6
 8006c2e:	6876      	ldr	r6, [r6, #4]
 8006c30:	e7b4      	b.n	8006b9c <_malloc_r+0x4c>
 8006c32:	4613      	mov	r3, r2
 8006c34:	e7cc      	b.n	8006bd0 <_malloc_r+0x80>
 8006c36:	230c      	movs	r3, #12
 8006c38:	603b      	str	r3, [r7, #0]
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f000 f80e 	bl	8006c5c <__malloc_unlock>
 8006c40:	e797      	b.n	8006b72 <_malloc_r+0x22>
 8006c42:	6025      	str	r5, [r4, #0]
 8006c44:	e7dc      	b.n	8006c00 <_malloc_r+0xb0>
 8006c46:	605b      	str	r3, [r3, #4]
 8006c48:	deff      	udf	#255	; 0xff
 8006c4a:	bf00      	nop
 8006c4c:	200002b0 	.word	0x200002b0

08006c50 <__malloc_lock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <__malloc_lock+0x8>)
 8006c52:	f000 ba26 	b.w	80070a2 <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	200003f9 	.word	0x200003f9

08006c5c <__malloc_unlock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__malloc_unlock+0x8>)
 8006c5e:	f000 ba21 	b.w	80070a4 <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	200003f9 	.word	0x200003f9

08006c68 <std>:
 8006c68:	2300      	movs	r3, #0
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c76:	6083      	str	r3, [r0, #8]
 8006c78:	8181      	strh	r1, [r0, #12]
 8006c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c7c:	81c2      	strh	r2, [r0, #14]
 8006c7e:	6183      	str	r3, [r0, #24]
 8006c80:	4619      	mov	r1, r3
 8006c82:	2208      	movs	r2, #8
 8006c84:	305c      	adds	r0, #92	; 0x5c
 8006c86:	f000 f93f 	bl	8006f08 <memset>
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <std+0x58>)
 8006c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <std+0x5c>)
 8006c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <std+0x60>)
 8006c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <std+0x64>)
 8006c98:	6323      	str	r3, [r4, #48]	; 0x30
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <std+0x68>)
 8006c9c:	6224      	str	r4, [r4, #32]
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d006      	beq.n	8006cb0 <std+0x48>
 8006ca2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006ca6:	4294      	cmp	r4, r2
 8006ca8:	d002      	beq.n	8006cb0 <std+0x48>
 8006caa:	33d0      	adds	r3, #208	; 0xd0
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d105      	bne.n	8006cbc <std+0x54>
 8006cb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f000 b9f2 	b.w	80070a0 <__retarget_lock_init_recursive>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	bf00      	nop
 8006cc0:	08006e11 	.word	0x08006e11
 8006cc4:	08006e33 	.word	0x08006e33
 8006cc8:	08006e6b 	.word	0x08006e6b
 8006ccc:	08006e8f 	.word	0x08006e8f
 8006cd0:	200002b8 	.word	0x200002b8

08006cd4 <stdio_exit_handler>:
 8006cd4:	4a02      	ldr	r2, [pc, #8]	; (8006ce0 <stdio_exit_handler+0xc>)
 8006cd6:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <stdio_exit_handler+0x10>)
 8006cd8:	4803      	ldr	r0, [pc, #12]	; (8006ce8 <stdio_exit_handler+0x14>)
 8006cda:	f000 b87b 	b.w	8006dd4 <_fwalk_sglue>
 8006cde:	bf00      	nop
 8006ce0:	2000001c 	.word	0x2000001c
 8006ce4:	08007b7d 	.word	0x08007b7d
 8006ce8:	20000028 	.word	0x20000028

08006cec <cleanup_stdio>:
 8006cec:	6841      	ldr	r1, [r0, #4]
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <cleanup_stdio+0x34>)
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	d001      	beq.n	8006cfc <cleanup_stdio+0x10>
 8006cf8:	f000 ff40 	bl	8007b7c <_fflush_r>
 8006cfc:	68a1      	ldr	r1, [r4, #8]
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <cleanup_stdio+0x38>)
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d002      	beq.n	8006d0a <cleanup_stdio+0x1e>
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 ff39 	bl	8007b7c <_fflush_r>
 8006d0a:	68e1      	ldr	r1, [r4, #12]
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <cleanup_stdio+0x3c>)
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	d004      	beq.n	8006d1c <cleanup_stdio+0x30>
 8006d12:	4620      	mov	r0, r4
 8006d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d18:	f000 bf30 	b.w	8007b7c <_fflush_r>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	200002b8 	.word	0x200002b8
 8006d24:	20000320 	.word	0x20000320
 8006d28:	20000388 	.word	0x20000388

08006d2c <global_stdio_init.part.0>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <global_stdio_init.part.0+0x30>)
 8006d30:	4c0b      	ldr	r4, [pc, #44]	; (8006d60 <global_stdio_init.part.0+0x34>)
 8006d32:	4a0c      	ldr	r2, [pc, #48]	; (8006d64 <global_stdio_init.part.0+0x38>)
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	4620      	mov	r0, r4
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	f7ff ff94 	bl	8006c68 <std>
 8006d40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d44:	2201      	movs	r2, #1
 8006d46:	2109      	movs	r1, #9
 8006d48:	f7ff ff8e 	bl	8006c68 <std>
 8006d4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d50:	2202      	movs	r2, #2
 8006d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d56:	2112      	movs	r1, #18
 8006d58:	f7ff bf86 	b.w	8006c68 <std>
 8006d5c:	200003f0 	.word	0x200003f0
 8006d60:	200002b8 	.word	0x200002b8
 8006d64:	08006cd5 	.word	0x08006cd5

08006d68 <__sfp_lock_acquire>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sfp_lock_acquire+0x8>)
 8006d6a:	f000 b99a 	b.w	80070a2 <__retarget_lock_acquire_recursive>
 8006d6e:	bf00      	nop
 8006d70:	200003fa 	.word	0x200003fa

08006d74 <__sfp_lock_release>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__sfp_lock_release+0x8>)
 8006d76:	f000 b995 	b.w	80070a4 <__retarget_lock_release_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	200003fa 	.word	0x200003fa

08006d80 <__sinit>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	4604      	mov	r4, r0
 8006d84:	f7ff fff0 	bl	8006d68 <__sfp_lock_acquire>
 8006d88:	6a23      	ldr	r3, [r4, #32]
 8006d8a:	b11b      	cbz	r3, 8006d94 <__sinit+0x14>
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d90:	f7ff bff0 	b.w	8006d74 <__sfp_lock_release>
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <__sinit+0x28>)
 8006d96:	6223      	str	r3, [r4, #32]
 8006d98:	4b04      	ldr	r3, [pc, #16]	; (8006dac <__sinit+0x2c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f5      	bne.n	8006d8c <__sinit+0xc>
 8006da0:	f7ff ffc4 	bl	8006d2c <global_stdio_init.part.0>
 8006da4:	e7f2      	b.n	8006d8c <__sinit+0xc>
 8006da6:	bf00      	nop
 8006da8:	08006ced 	.word	0x08006ced
 8006dac:	200003f0 	.word	0x200003f0

08006db0 <fiprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	b503      	push	{r0, r1, lr}
 8006db4:	4601      	mov	r1, r0
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	4805      	ldr	r0, [pc, #20]	; (8006dd0 <fiprintf+0x20>)
 8006dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbe:	6800      	ldr	r0, [r0, #0]
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	f000 fbab 	bl	800751c <_vfiprintf_r>
 8006dc6:	b002      	add	sp, #8
 8006dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dcc:	b003      	add	sp, #12
 8006dce:	4770      	bx	lr
 8006dd0:	20000074 	.word	0x20000074

08006dd4 <_fwalk_sglue>:
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	4607      	mov	r7, r0
 8006dda:	4688      	mov	r8, r1
 8006ddc:	4614      	mov	r4, r2
 8006dde:	2600      	movs	r6, #0
 8006de0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006de4:	f1b9 0901 	subs.w	r9, r9, #1
 8006de8:	d505      	bpl.n	8006df6 <_fwalk_sglue+0x22>
 8006dea:	6824      	ldr	r4, [r4, #0]
 8006dec:	2c00      	cmp	r4, #0
 8006dee:	d1f7      	bne.n	8006de0 <_fwalk_sglue+0xc>
 8006df0:	4630      	mov	r0, r6
 8006df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d907      	bls.n	8006e0c <_fwalk_sglue+0x38>
 8006dfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e00:	3301      	adds	r3, #1
 8006e02:	d003      	beq.n	8006e0c <_fwalk_sglue+0x38>
 8006e04:	4629      	mov	r1, r5
 8006e06:	4638      	mov	r0, r7
 8006e08:	47c0      	blx	r8
 8006e0a:	4306      	orrs	r6, r0
 8006e0c:	3568      	adds	r5, #104	; 0x68
 8006e0e:	e7e9      	b.n	8006de4 <_fwalk_sglue+0x10>

08006e10 <__sread>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	460c      	mov	r4, r1
 8006e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e18:	f000 f8d0 	bl	8006fbc <_read_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	bfab      	itete	ge
 8006e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e22:	89a3      	ldrhlt	r3, [r4, #12]
 8006e24:	181b      	addge	r3, r3, r0
 8006e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e2a:	bfac      	ite	ge
 8006e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e2e:	81a3      	strhlt	r3, [r4, #12]
 8006e30:	bd10      	pop	{r4, pc}

08006e32 <__swrite>:
 8006e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	461f      	mov	r7, r3
 8006e38:	898b      	ldrh	r3, [r1, #12]
 8006e3a:	05db      	lsls	r3, r3, #23
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	4616      	mov	r6, r2
 8006e42:	d505      	bpl.n	8006e50 <__swrite+0x1e>
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	2302      	movs	r3, #2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f000 f8a4 	bl	8006f98 <_lseek_r>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	463b      	mov	r3, r7
 8006e60:	4628      	mov	r0, r5
 8006e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	f000 b8df 	b.w	8007028 <_write_r>

08006e6a <__sseek>:
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 f891 	bl	8006f98 <_lseek_r>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	bf15      	itete	ne
 8006e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e86:	81a3      	strheq	r3, [r4, #12]
 8006e88:	bf18      	it	ne
 8006e8a:	81a3      	strhne	r3, [r4, #12]
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <__sclose>:
 8006e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e92:	f000 b871 	b.w	8006f78 <_close_r>

08006e96 <_vsniprintf_r>:
 8006e96:	b530      	push	{r4, r5, lr}
 8006e98:	4614      	mov	r4, r2
 8006e9a:	2c00      	cmp	r4, #0
 8006e9c:	b09b      	sub	sp, #108	; 0x6c
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	da05      	bge.n	8006eb0 <_vsniprintf_r+0x1a>
 8006ea4:	238b      	movs	r3, #139	; 0x8b
 8006ea6:	6003      	str	r3, [r0, #0]
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eac:	b01b      	add	sp, #108	; 0x6c
 8006eae:	bd30      	pop	{r4, r5, pc}
 8006eb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006eb4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006eb8:	bf14      	ite	ne
 8006eba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ebe:	4623      	moveq	r3, r4
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ec8:	9100      	str	r1, [sp, #0]
 8006eca:	9104      	str	r1, [sp, #16]
 8006ecc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006ed0:	4669      	mov	r1, sp
 8006ed2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ed4:	f000 f9fa 	bl	80072cc <_svfiprintf_r>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	bfbc      	itt	lt
 8006edc:	238b      	movlt	r3, #139	; 0x8b
 8006ede:	602b      	strlt	r3, [r5, #0]
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	d0e3      	beq.n	8006eac <_vsniprintf_r+0x16>
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e7df      	b.n	8006eac <_vsniprintf_r+0x16>

08006eec <vsniprintf>:
 8006eec:	b507      	push	{r0, r1, r2, lr}
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	460a      	mov	r2, r1
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	4803      	ldr	r0, [pc, #12]	; (8006f04 <vsniprintf+0x18>)
 8006ef8:	6800      	ldr	r0, [r0, #0]
 8006efa:	f7ff ffcc 	bl	8006e96 <_vsniprintf_r>
 8006efe:	b003      	add	sp, #12
 8006f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f04:	20000074 	.word	0x20000074

08006f08 <memset>:
 8006f08:	4402      	add	r2, r0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d100      	bne.n	8006f12 <memset+0xa>
 8006f10:	4770      	bx	lr
 8006f12:	f803 1b01 	strb.w	r1, [r3], #1
 8006f16:	e7f9      	b.n	8006f0c <memset+0x4>

08006f18 <_raise_r>:
 8006f18:	291f      	cmp	r1, #31
 8006f1a:	b538      	push	{r3, r4, r5, lr}
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	d904      	bls.n	8006f2c <_raise_r+0x14>
 8006f22:	2316      	movs	r3, #22
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f2e:	b112      	cbz	r2, 8006f36 <_raise_r+0x1e>
 8006f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f34:	b94b      	cbnz	r3, 8006f4a <_raise_r+0x32>
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f864 	bl	8007004 <_getpid_r>
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4620      	mov	r0, r4
 8006f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f46:	f000 b84b 	b.w	8006fe0 <_kill_r>
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d00a      	beq.n	8006f64 <_raise_r+0x4c>
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	d103      	bne.n	8006f5a <_raise_r+0x42>
 8006f52:	2316      	movs	r3, #22
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	2001      	movs	r0, #1
 8006f58:	e7e7      	b.n	8006f2a <_raise_r+0x12>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f60:	4628      	mov	r0, r5
 8006f62:	4798      	blx	r3
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7e0      	b.n	8006f2a <_raise_r+0x12>

08006f68 <raise>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <raise+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f7ff bfd3 	b.w	8006f18 <_raise_r>
 8006f72:	bf00      	nop
 8006f74:	20000074 	.word	0x20000074

08006f78 <_close_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d06      	ldr	r5, [pc, #24]	; (8006f94 <_close_r+0x1c>)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7fb fcd5 	bl	8002932 <_close>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_close_r+0x1a>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_close_r+0x1a>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	200003f4 	.word	0x200003f4

08006f98 <_lseek_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_lseek_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb fcea 	bl	8002980 <_lseek>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_lseek_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_lseek_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200003f4 	.word	0x200003f4

08006fbc <_read_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	; (8006fdc <_read_r+0x20>)
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	602a      	str	r2, [r5, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f7fb fc78 	bl	80028c0 <_read>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_read_r+0x1e>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_read_r+0x1e>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	200003f4 	.word	0x200003f4

08006fe0 <_kill_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_kill_r+0x20>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	f7fb fc4d 	bl	800288c <_kill>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d102      	bne.n	8006ffc <_kill_r+0x1c>
 8006ff6:	682b      	ldr	r3, [r5, #0]
 8006ff8:	b103      	cbz	r3, 8006ffc <_kill_r+0x1c>
 8006ffa:	6023      	str	r3, [r4, #0]
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	bf00      	nop
 8007000:	200003f4 	.word	0x200003f4

08007004 <_getpid_r>:
 8007004:	f7fb bc3a 	b.w	800287c <_getpid>

08007008 <_sbrk_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	; (8007024 <_sbrk_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fb fcc2 	bl	800299c <_sbrk>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_sbrk_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_sbrk_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	200003f4 	.word	0x200003f4

08007028 <_write_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	; (8007048 <_write_r+0x20>)
 800702c:	4604      	mov	r4, r0
 800702e:	4608      	mov	r0, r1
 8007030:	4611      	mov	r1, r2
 8007032:	2200      	movs	r2, #0
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7fb fc5f 	bl	80028fa <_write>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_write_r+0x1e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_write_r+0x1e>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	200003f4 	.word	0x200003f4

0800704c <__errno>:
 800704c:	4b01      	ldr	r3, [pc, #4]	; (8007054 <__errno+0x8>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000074 	.word	0x20000074

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4d0d      	ldr	r5, [pc, #52]	; (8007090 <__libc_init_array+0x38>)
 800705c:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 800705e:	1b64      	subs	r4, r4, r5
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	2600      	movs	r6, #0
 8007064:	42a6      	cmp	r6, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	4d0b      	ldr	r5, [pc, #44]	; (8007098 <__libc_init_array+0x40>)
 800706a:	4c0c      	ldr	r4, [pc, #48]	; (800709c <__libc_init_array+0x44>)
 800706c:	f000 ff1a 	bl	8007ea4 <_init>
 8007070:	1b64      	subs	r4, r4, r5
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	2600      	movs	r6, #0
 8007076:	42a6      	cmp	r6, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007080:	4798      	blx	r3
 8007082:	3601      	adds	r6, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f855 3b04 	ldr.w	r3, [r5], #4
 800708a:	4798      	blx	r3
 800708c:	3601      	adds	r6, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	0800b090 	.word	0x0800b090
 8007094:	0800b090 	.word	0x0800b090
 8007098:	0800b090 	.word	0x0800b090
 800709c:	0800b0a0 	.word	0x0800b0a0

080070a0 <__retarget_lock_init_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__retarget_lock_acquire_recursive>:
 80070a2:	4770      	bx	lr

080070a4 <__retarget_lock_release_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <memcpy>:
 80070a6:	440a      	add	r2, r1
 80070a8:	4291      	cmp	r1, r2
 80070aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80070ae:	d100      	bne.n	80070b2 <memcpy+0xc>
 80070b0:	4770      	bx	lr
 80070b2:	b510      	push	{r4, lr}
 80070b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070bc:	4291      	cmp	r1, r2
 80070be:	d1f9      	bne.n	80070b4 <memcpy+0xe>
 80070c0:	bd10      	pop	{r4, pc}
	...

080070c4 <__register_exitproc>:
 80070c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800717c <__register_exitproc+0xb8>
 80070cc:	4606      	mov	r6, r0
 80070ce:	f8d8 0000 	ldr.w	r0, [r8]
 80070d2:	461f      	mov	r7, r3
 80070d4:	460d      	mov	r5, r1
 80070d6:	4691      	mov	r9, r2
 80070d8:	f7ff ffe3 	bl	80070a2 <__retarget_lock_acquire_recursive>
 80070dc:	4b23      	ldr	r3, [pc, #140]	; (800716c <__register_exitproc+0xa8>)
 80070de:	681c      	ldr	r4, [r3, #0]
 80070e0:	b934      	cbnz	r4, 80070f0 <__register_exitproc+0x2c>
 80070e2:	4c23      	ldr	r4, [pc, #140]	; (8007170 <__register_exitproc+0xac>)
 80070e4:	601c      	str	r4, [r3, #0]
 80070e6:	4b23      	ldr	r3, [pc, #140]	; (8007174 <__register_exitproc+0xb0>)
 80070e8:	b113      	cbz	r3, 80070f0 <__register_exitproc+0x2c>
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	2b1f      	cmp	r3, #31
 80070f4:	dd07      	ble.n	8007106 <__register_exitproc+0x42>
 80070f6:	f8d8 0000 	ldr.w	r0, [r8]
 80070fa:	f7ff ffd3 	bl	80070a4 <__retarget_lock_release_recursive>
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007106:	b32e      	cbz	r6, 8007154 <__register_exitproc+0x90>
 8007108:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800710c:	b968      	cbnz	r0, 800712a <__register_exitproc+0x66>
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <__register_exitproc+0xb4>)
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <__register_exitproc+0x32>
 8007114:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007118:	f7ff fcea 	bl	8006af0 <malloc>
 800711c:	2800      	cmp	r0, #0
 800711e:	d0ea      	beq.n	80070f6 <__register_exitproc+0x32>
 8007120:	2300      	movs	r3, #0
 8007122:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007126:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007130:	2201      	movs	r2, #1
 8007132:	409a      	lsls	r2, r3
 8007134:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007138:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007142:	2e02      	cmp	r6, #2
 8007144:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007148:	bf02      	ittt	eq
 800714a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800714e:	4313      	orreq	r3, r2
 8007150:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8007154:	6863      	ldr	r3, [r4, #4]
 8007156:	f8d8 0000 	ldr.w	r0, [r8]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	3302      	adds	r3, #2
 800715e:	6062      	str	r2, [r4, #4]
 8007160:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007164:	f7ff ff9e 	bl	80070a4 <__retarget_lock_release_recursive>
 8007168:	2000      	movs	r0, #0
 800716a:	e7ca      	b.n	8007102 <__register_exitproc+0x3e>
 800716c:	20000488 	.word	0x20000488
 8007170:	200003fc 	.word	0x200003fc
 8007174:	08009e70 	.word	0x08009e70
 8007178:	08006af1 	.word	0x08006af1
 800717c:	20000078 	.word	0x20000078

08007180 <_free_r>:
 8007180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007182:	2900      	cmp	r1, #0
 8007184:	d044      	beq.n	8007210 <_free_r+0x90>
 8007186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718a:	9001      	str	r0, [sp, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f1a1 0404 	sub.w	r4, r1, #4
 8007192:	bfb8      	it	lt
 8007194:	18e4      	addlt	r4, r4, r3
 8007196:	f7ff fd5b 	bl	8006c50 <__malloc_lock>
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <_free_r+0x94>)
 800719c:	9801      	ldr	r0, [sp, #4]
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	b933      	cbnz	r3, 80071b0 <_free_r+0x30>
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	6014      	str	r4, [r2, #0]
 80071a6:	b003      	add	sp, #12
 80071a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ac:	f7ff bd56 	b.w	8006c5c <__malloc_unlock>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d908      	bls.n	80071c6 <_free_r+0x46>
 80071b4:	6825      	ldr	r5, [r4, #0]
 80071b6:	1961      	adds	r1, r4, r5
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1949      	addeq	r1, r1, r5
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	e7ed      	b.n	80071a2 <_free_r+0x22>
 80071c6:	461a      	mov	r2, r3
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b10b      	cbz	r3, 80071d0 <_free_r+0x50>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d9fa      	bls.n	80071c6 <_free_r+0x46>
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	1855      	adds	r5, r2, r1
 80071d4:	42a5      	cmp	r5, r4
 80071d6:	d10b      	bne.n	80071f0 <_free_r+0x70>
 80071d8:	6824      	ldr	r4, [r4, #0]
 80071da:	4421      	add	r1, r4
 80071dc:	1854      	adds	r4, r2, r1
 80071de:	42a3      	cmp	r3, r4
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	d1e0      	bne.n	80071a6 <_free_r+0x26>
 80071e4:	681c      	ldr	r4, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	440c      	add	r4, r1
 80071ec:	6014      	str	r4, [r2, #0]
 80071ee:	e7da      	b.n	80071a6 <_free_r+0x26>
 80071f0:	d902      	bls.n	80071f8 <_free_r+0x78>
 80071f2:	230c      	movs	r3, #12
 80071f4:	6003      	str	r3, [r0, #0]
 80071f6:	e7d6      	b.n	80071a6 <_free_r+0x26>
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	1961      	adds	r1, r4, r5
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf04      	itt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	bf04      	itt	eq
 8007208:	1949      	addeq	r1, r1, r5
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	6054      	str	r4, [r2, #4]
 800720e:	e7ca      	b.n	80071a6 <_free_r+0x26>
 8007210:	b003      	add	sp, #12
 8007212:	bd30      	pop	{r4, r5, pc}
 8007214:	200002b0 	.word	0x200002b0

08007218 <__ssputs_r>:
 8007218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	688e      	ldr	r6, [r1, #8]
 800721e:	461f      	mov	r7, r3
 8007220:	42be      	cmp	r6, r7
 8007222:	680b      	ldr	r3, [r1, #0]
 8007224:	4682      	mov	sl, r0
 8007226:	460c      	mov	r4, r1
 8007228:	4690      	mov	r8, r2
 800722a:	d82c      	bhi.n	8007286 <__ssputs_r+0x6e>
 800722c:	898a      	ldrh	r2, [r1, #12]
 800722e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007232:	d026      	beq.n	8007282 <__ssputs_r+0x6a>
 8007234:	6965      	ldr	r5, [r4, #20]
 8007236:	6909      	ldr	r1, [r1, #16]
 8007238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800723c:	eba3 0901 	sub.w	r9, r3, r1
 8007240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007244:	1c7b      	adds	r3, r7, #1
 8007246:	444b      	add	r3, r9
 8007248:	106d      	asrs	r5, r5, #1
 800724a:	429d      	cmp	r5, r3
 800724c:	bf38      	it	cc
 800724e:	461d      	movcc	r5, r3
 8007250:	0553      	lsls	r3, r2, #21
 8007252:	d527      	bpl.n	80072a4 <__ssputs_r+0x8c>
 8007254:	4629      	mov	r1, r5
 8007256:	f7ff fc7b 	bl	8006b50 <_malloc_r>
 800725a:	4606      	mov	r6, r0
 800725c:	b360      	cbz	r0, 80072b8 <__ssputs_r+0xa0>
 800725e:	6921      	ldr	r1, [r4, #16]
 8007260:	464a      	mov	r2, r9
 8007262:	f7ff ff20 	bl	80070a6 <memcpy>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	6126      	str	r6, [r4, #16]
 8007274:	6165      	str	r5, [r4, #20]
 8007276:	444e      	add	r6, r9
 8007278:	eba5 0509 	sub.w	r5, r5, r9
 800727c:	6026      	str	r6, [r4, #0]
 800727e:	60a5      	str	r5, [r4, #8]
 8007280:	463e      	mov	r6, r7
 8007282:	42be      	cmp	r6, r7
 8007284:	d900      	bls.n	8007288 <__ssputs_r+0x70>
 8007286:	463e      	mov	r6, r7
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	4632      	mov	r2, r6
 800728c:	4641      	mov	r1, r8
 800728e:	f000 fd33 	bl	8007cf8 <memmove>
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	1b9b      	subs	r3, r3, r6
 8007296:	60a3      	str	r3, [r4, #8]
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	4433      	add	r3, r6
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	2000      	movs	r0, #0
 80072a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a4:	462a      	mov	r2, r5
 80072a6:	f000 fd41 	bl	8007d2c <_realloc_r>
 80072aa:	4606      	mov	r6, r0
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1e0      	bne.n	8007272 <__ssputs_r+0x5a>
 80072b0:	6921      	ldr	r1, [r4, #16]
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7ff ff64 	bl	8007180 <_free_r>
 80072b8:	230c      	movs	r3, #12
 80072ba:	f8ca 3000 	str.w	r3, [sl]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	e7e9      	b.n	80072a0 <__ssputs_r+0x88>

080072cc <_svfiprintf_r>:
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	4698      	mov	r8, r3
 80072d2:	898b      	ldrh	r3, [r1, #12]
 80072d4:	061b      	lsls	r3, r3, #24
 80072d6:	b09d      	sub	sp, #116	; 0x74
 80072d8:	4607      	mov	r7, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	d50e      	bpl.n	80072fe <_svfiprintf_r+0x32>
 80072e0:	690b      	ldr	r3, [r1, #16]
 80072e2:	b963      	cbnz	r3, 80072fe <_svfiprintf_r+0x32>
 80072e4:	2140      	movs	r1, #64	; 0x40
 80072e6:	f7ff fc33 	bl	8006b50 <_malloc_r>
 80072ea:	6028      	str	r0, [r5, #0]
 80072ec:	6128      	str	r0, [r5, #16]
 80072ee:	b920      	cbnz	r0, 80072fa <_svfiprintf_r+0x2e>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e0d0      	b.n	800749c <_svfiprintf_r+0x1d0>
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	616b      	str	r3, [r5, #20]
 80072fe:	2300      	movs	r3, #0
 8007300:	9309      	str	r3, [sp, #36]	; 0x24
 8007302:	2320      	movs	r3, #32
 8007304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007308:	f8cd 800c 	str.w	r8, [sp, #12]
 800730c:	2330      	movs	r3, #48	; 0x30
 800730e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074b4 <_svfiprintf_r+0x1e8>
 8007312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007316:	f04f 0901 	mov.w	r9, #1
 800731a:	4623      	mov	r3, r4
 800731c:	469a      	mov	sl, r3
 800731e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007322:	b10a      	cbz	r2, 8007328 <_svfiprintf_r+0x5c>
 8007324:	2a25      	cmp	r2, #37	; 0x25
 8007326:	d1f9      	bne.n	800731c <_svfiprintf_r+0x50>
 8007328:	ebba 0b04 	subs.w	fp, sl, r4
 800732c:	d00b      	beq.n	8007346 <_svfiprintf_r+0x7a>
 800732e:	465b      	mov	r3, fp
 8007330:	4622      	mov	r2, r4
 8007332:	4629      	mov	r1, r5
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff ff6f 	bl	8007218 <__ssputs_r>
 800733a:	3001      	adds	r0, #1
 800733c:	f000 80a9 	beq.w	8007492 <_svfiprintf_r+0x1c6>
 8007340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007342:	445a      	add	r2, fp
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	f89a 3000 	ldrb.w	r3, [sl]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80a1 	beq.w	8007492 <_svfiprintf_r+0x1c6>
 8007350:	2300      	movs	r3, #0
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735a:	f10a 0a01 	add.w	sl, sl, #1
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	9307      	str	r3, [sp, #28]
 8007362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007366:	931a      	str	r3, [sp, #104]	; 0x68
 8007368:	4654      	mov	r4, sl
 800736a:	2205      	movs	r2, #5
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	4850      	ldr	r0, [pc, #320]	; (80074b4 <_svfiprintf_r+0x1e8>)
 8007372:	f7f8 ff3d 	bl	80001f0 <memchr>
 8007376:	9a04      	ldr	r2, [sp, #16]
 8007378:	b9d8      	cbnz	r0, 80073b2 <_svfiprintf_r+0xe6>
 800737a:	06d0      	lsls	r0, r2, #27
 800737c:	bf44      	itt	mi
 800737e:	2320      	movmi	r3, #32
 8007380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007384:	0711      	lsls	r1, r2, #28
 8007386:	bf44      	itt	mi
 8007388:	232b      	movmi	r3, #43	; 0x2b
 800738a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738e:	f89a 3000 	ldrb.w	r3, [sl]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d015      	beq.n	80073c2 <_svfiprintf_r+0xf6>
 8007396:	9a07      	ldr	r2, [sp, #28]
 8007398:	4654      	mov	r4, sl
 800739a:	2000      	movs	r0, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4621      	mov	r1, r4
 80073a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a6:	3b30      	subs	r3, #48	; 0x30
 80073a8:	2b09      	cmp	r3, #9
 80073aa:	d94d      	bls.n	8007448 <_svfiprintf_r+0x17c>
 80073ac:	b1b0      	cbz	r0, 80073dc <_svfiprintf_r+0x110>
 80073ae:	9207      	str	r2, [sp, #28]
 80073b0:	e014      	b.n	80073dc <_svfiprintf_r+0x110>
 80073b2:	eba0 0308 	sub.w	r3, r0, r8
 80073b6:	fa09 f303 	lsl.w	r3, r9, r3
 80073ba:	4313      	orrs	r3, r2
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	46a2      	mov	sl, r4
 80073c0:	e7d2      	b.n	8007368 <_svfiprintf_r+0x9c>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	9103      	str	r1, [sp, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfbb      	ittet	lt
 80073ce:	425b      	neglt	r3, r3
 80073d0:	f042 0202 	orrlt.w	r2, r2, #2
 80073d4:	9307      	strge	r3, [sp, #28]
 80073d6:	9307      	strlt	r3, [sp, #28]
 80073d8:	bfb8      	it	lt
 80073da:	9204      	strlt	r2, [sp, #16]
 80073dc:	7823      	ldrb	r3, [r4, #0]
 80073de:	2b2e      	cmp	r3, #46	; 0x2e
 80073e0:	d10c      	bne.n	80073fc <_svfiprintf_r+0x130>
 80073e2:	7863      	ldrb	r3, [r4, #1]
 80073e4:	2b2a      	cmp	r3, #42	; 0x2a
 80073e6:	d134      	bne.n	8007452 <_svfiprintf_r+0x186>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9203      	str	r2, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfb8      	it	lt
 80073f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f8:	3402      	adds	r4, #2
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80074c4 <_svfiprintf_r+0x1f8>
 8007400:	7821      	ldrb	r1, [r4, #0]
 8007402:	2203      	movs	r2, #3
 8007404:	4650      	mov	r0, sl
 8007406:	f7f8 fef3 	bl	80001f0 <memchr>
 800740a:	b138      	cbz	r0, 800741c <_svfiprintf_r+0x150>
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	eba0 000a 	sub.w	r0, r0, sl
 8007412:	2240      	movs	r2, #64	; 0x40
 8007414:	4082      	lsls	r2, r0
 8007416:	4313      	orrs	r3, r2
 8007418:	3401      	adds	r4, #1
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007420:	4825      	ldr	r0, [pc, #148]	; (80074b8 <_svfiprintf_r+0x1ec>)
 8007422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007426:	2206      	movs	r2, #6
 8007428:	f7f8 fee2 	bl	80001f0 <memchr>
 800742c:	2800      	cmp	r0, #0
 800742e:	d038      	beq.n	80074a2 <_svfiprintf_r+0x1d6>
 8007430:	4b22      	ldr	r3, [pc, #136]	; (80074bc <_svfiprintf_r+0x1f0>)
 8007432:	bb1b      	cbnz	r3, 800747c <_svfiprintf_r+0x1b0>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	3307      	adds	r3, #7
 8007438:	f023 0307 	bic.w	r3, r3, #7
 800743c:	3308      	adds	r3, #8
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	4433      	add	r3, r6
 8007444:	9309      	str	r3, [sp, #36]	; 0x24
 8007446:	e768      	b.n	800731a <_svfiprintf_r+0x4e>
 8007448:	fb0c 3202 	mla	r2, ip, r2, r3
 800744c:	460c      	mov	r4, r1
 800744e:	2001      	movs	r0, #1
 8007450:	e7a6      	b.n	80073a0 <_svfiprintf_r+0xd4>
 8007452:	2300      	movs	r3, #0
 8007454:	3401      	adds	r4, #1
 8007456:	9305      	str	r3, [sp, #20]
 8007458:	4619      	mov	r1, r3
 800745a:	f04f 0c0a 	mov.w	ip, #10
 800745e:	4620      	mov	r0, r4
 8007460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007464:	3a30      	subs	r2, #48	; 0x30
 8007466:	2a09      	cmp	r2, #9
 8007468:	d903      	bls.n	8007472 <_svfiprintf_r+0x1a6>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0c6      	beq.n	80073fc <_svfiprintf_r+0x130>
 800746e:	9105      	str	r1, [sp, #20]
 8007470:	e7c4      	b.n	80073fc <_svfiprintf_r+0x130>
 8007472:	fb0c 2101 	mla	r1, ip, r1, r2
 8007476:	4604      	mov	r4, r0
 8007478:	2301      	movs	r3, #1
 800747a:	e7f0      	b.n	800745e <_svfiprintf_r+0x192>
 800747c:	ab03      	add	r3, sp, #12
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	462a      	mov	r2, r5
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <_svfiprintf_r+0x1f4>)
 8007484:	a904      	add	r1, sp, #16
 8007486:	4638      	mov	r0, r7
 8007488:	f3af 8000 	nop.w
 800748c:	1c42      	adds	r2, r0, #1
 800748e:	4606      	mov	r6, r0
 8007490:	d1d6      	bne.n	8007440 <_svfiprintf_r+0x174>
 8007492:	89ab      	ldrh	r3, [r5, #12]
 8007494:	065b      	lsls	r3, r3, #25
 8007496:	f53f af2d 	bmi.w	80072f4 <_svfiprintf_r+0x28>
 800749a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749c:	b01d      	add	sp, #116	; 0x74
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	ab03      	add	r3, sp, #12
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	462a      	mov	r2, r5
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <_svfiprintf_r+0x1f4>)
 80074aa:	a904      	add	r1, sp, #16
 80074ac:	4638      	mov	r0, r7
 80074ae:	f000 f9bd 	bl	800782c <_printf_i>
 80074b2:	e7eb      	b.n	800748c <_svfiprintf_r+0x1c0>
 80074b4:	08009e74 	.word	0x08009e74
 80074b8:	08009e7e 	.word	0x08009e7e
 80074bc:	00000000 	.word	0x00000000
 80074c0:	08007219 	.word	0x08007219
 80074c4:	08009e7a 	.word	0x08009e7a

080074c8 <__sfputc_r>:
 80074c8:	6893      	ldr	r3, [r2, #8]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	b410      	push	{r4}
 80074d0:	6093      	str	r3, [r2, #8]
 80074d2:	da08      	bge.n	80074e6 <__sfputc_r+0x1e>
 80074d4:	6994      	ldr	r4, [r2, #24]
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	db01      	blt.n	80074de <__sfputc_r+0x16>
 80074da:	290a      	cmp	r1, #10
 80074dc:	d103      	bne.n	80074e6 <__sfputc_r+0x1e>
 80074de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e2:	f000 bb73 	b.w	8007bcc <__swbuf_r>
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	1c58      	adds	r0, r3, #1
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	7019      	strb	r1, [r3, #0]
 80074ee:	4608      	mov	r0, r1
 80074f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <__sfputs_r>:
 80074f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	18d5      	adds	r5, r2, r3
 8007500:	42ac      	cmp	r4, r5
 8007502:	d101      	bne.n	8007508 <__sfputs_r+0x12>
 8007504:	2000      	movs	r0, #0
 8007506:	e007      	b.n	8007518 <__sfputs_r+0x22>
 8007508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750c:	463a      	mov	r2, r7
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ffda 	bl	80074c8 <__sfputc_r>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d1f3      	bne.n	8007500 <__sfputs_r+0xa>
 8007518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800751c <_vfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	460d      	mov	r5, r1
 8007522:	b09d      	sub	sp, #116	; 0x74
 8007524:	4614      	mov	r4, r2
 8007526:	4698      	mov	r8, r3
 8007528:	4606      	mov	r6, r0
 800752a:	b118      	cbz	r0, 8007534 <_vfiprintf_r+0x18>
 800752c:	6a03      	ldr	r3, [r0, #32]
 800752e:	b90b      	cbnz	r3, 8007534 <_vfiprintf_r+0x18>
 8007530:	f7ff fc26 	bl	8006d80 <__sinit>
 8007534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007536:	07d9      	lsls	r1, r3, #31
 8007538:	d405      	bmi.n	8007546 <_vfiprintf_r+0x2a>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	059a      	lsls	r2, r3, #22
 800753e:	d402      	bmi.n	8007546 <_vfiprintf_r+0x2a>
 8007540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007542:	f7ff fdae 	bl	80070a2 <__retarget_lock_acquire_recursive>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	d501      	bpl.n	8007550 <_vfiprintf_r+0x34>
 800754c:	692b      	ldr	r3, [r5, #16]
 800754e:	b99b      	cbnz	r3, 8007578 <_vfiprintf_r+0x5c>
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f000 fb78 	bl	8007c48 <__swsetup_r>
 8007558:	b170      	cbz	r0, 8007578 <_vfiprintf_r+0x5c>
 800755a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755c:	07dc      	lsls	r4, r3, #31
 800755e:	d504      	bpl.n	800756a <_vfiprintf_r+0x4e>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	b01d      	add	sp, #116	; 0x74
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	0598      	lsls	r0, r3, #22
 800756e:	d4f7      	bmi.n	8007560 <_vfiprintf_r+0x44>
 8007570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007572:	f7ff fd97 	bl	80070a4 <__retarget_lock_release_recursive>
 8007576:	e7f3      	b.n	8007560 <_vfiprintf_r+0x44>
 8007578:	2300      	movs	r3, #0
 800757a:	9309      	str	r3, [sp, #36]	; 0x24
 800757c:	2320      	movs	r3, #32
 800757e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007582:	f8cd 800c 	str.w	r8, [sp, #12]
 8007586:	2330      	movs	r3, #48	; 0x30
 8007588:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800773c <_vfiprintf_r+0x220>
 800758c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007590:	f04f 0901 	mov.w	r9, #1
 8007594:	4623      	mov	r3, r4
 8007596:	469a      	mov	sl, r3
 8007598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800759c:	b10a      	cbz	r2, 80075a2 <_vfiprintf_r+0x86>
 800759e:	2a25      	cmp	r2, #37	; 0x25
 80075a0:	d1f9      	bne.n	8007596 <_vfiprintf_r+0x7a>
 80075a2:	ebba 0b04 	subs.w	fp, sl, r4
 80075a6:	d00b      	beq.n	80075c0 <_vfiprintf_r+0xa4>
 80075a8:	465b      	mov	r3, fp
 80075aa:	4622      	mov	r2, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff ffa1 	bl	80074f6 <__sfputs_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	f000 80a9 	beq.w	800770c <_vfiprintf_r+0x1f0>
 80075ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075bc:	445a      	add	r2, fp
 80075be:	9209      	str	r2, [sp, #36]	; 0x24
 80075c0:	f89a 3000 	ldrb.w	r3, [sl]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80a1 	beq.w	800770c <_vfiprintf_r+0x1f0>
 80075ca:	2300      	movs	r3, #0
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295
 80075d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075d4:	f10a 0a01 	add.w	sl, sl, #1
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	9307      	str	r3, [sp, #28]
 80075dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e0:	931a      	str	r3, [sp, #104]	; 0x68
 80075e2:	4654      	mov	r4, sl
 80075e4:	2205      	movs	r2, #5
 80075e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ea:	4854      	ldr	r0, [pc, #336]	; (800773c <_vfiprintf_r+0x220>)
 80075ec:	f7f8 fe00 	bl	80001f0 <memchr>
 80075f0:	9a04      	ldr	r2, [sp, #16]
 80075f2:	b9d8      	cbnz	r0, 800762c <_vfiprintf_r+0x110>
 80075f4:	06d1      	lsls	r1, r2, #27
 80075f6:	bf44      	itt	mi
 80075f8:	2320      	movmi	r3, #32
 80075fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075fe:	0713      	lsls	r3, r2, #28
 8007600:	bf44      	itt	mi
 8007602:	232b      	movmi	r3, #43	; 0x2b
 8007604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007608:	f89a 3000 	ldrb.w	r3, [sl]
 800760c:	2b2a      	cmp	r3, #42	; 0x2a
 800760e:	d015      	beq.n	800763c <_vfiprintf_r+0x120>
 8007610:	9a07      	ldr	r2, [sp, #28]
 8007612:	4654      	mov	r4, sl
 8007614:	2000      	movs	r0, #0
 8007616:	f04f 0c0a 	mov.w	ip, #10
 800761a:	4621      	mov	r1, r4
 800761c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007620:	3b30      	subs	r3, #48	; 0x30
 8007622:	2b09      	cmp	r3, #9
 8007624:	d94d      	bls.n	80076c2 <_vfiprintf_r+0x1a6>
 8007626:	b1b0      	cbz	r0, 8007656 <_vfiprintf_r+0x13a>
 8007628:	9207      	str	r2, [sp, #28]
 800762a:	e014      	b.n	8007656 <_vfiprintf_r+0x13a>
 800762c:	eba0 0308 	sub.w	r3, r0, r8
 8007630:	fa09 f303 	lsl.w	r3, r9, r3
 8007634:	4313      	orrs	r3, r2
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	46a2      	mov	sl, r4
 800763a:	e7d2      	b.n	80075e2 <_vfiprintf_r+0xc6>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	1d19      	adds	r1, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	9103      	str	r1, [sp, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfbb      	ittet	lt
 8007648:	425b      	neglt	r3, r3
 800764a:	f042 0202 	orrlt.w	r2, r2, #2
 800764e:	9307      	strge	r3, [sp, #28]
 8007650:	9307      	strlt	r3, [sp, #28]
 8007652:	bfb8      	it	lt
 8007654:	9204      	strlt	r2, [sp, #16]
 8007656:	7823      	ldrb	r3, [r4, #0]
 8007658:	2b2e      	cmp	r3, #46	; 0x2e
 800765a:	d10c      	bne.n	8007676 <_vfiprintf_r+0x15a>
 800765c:	7863      	ldrb	r3, [r4, #1]
 800765e:	2b2a      	cmp	r3, #42	; 0x2a
 8007660:	d134      	bne.n	80076cc <_vfiprintf_r+0x1b0>
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	1d1a      	adds	r2, r3, #4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	9203      	str	r2, [sp, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfb8      	it	lt
 800766e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007672:	3402      	adds	r4, #2
 8007674:	9305      	str	r3, [sp, #20]
 8007676:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800774c <_vfiprintf_r+0x230>
 800767a:	7821      	ldrb	r1, [r4, #0]
 800767c:	2203      	movs	r2, #3
 800767e:	4650      	mov	r0, sl
 8007680:	f7f8 fdb6 	bl	80001f0 <memchr>
 8007684:	b138      	cbz	r0, 8007696 <_vfiprintf_r+0x17a>
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	eba0 000a 	sub.w	r0, r0, sl
 800768c:	2240      	movs	r2, #64	; 0x40
 800768e:	4082      	lsls	r2, r0
 8007690:	4313      	orrs	r3, r2
 8007692:	3401      	adds	r4, #1
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769a:	4829      	ldr	r0, [pc, #164]	; (8007740 <_vfiprintf_r+0x224>)
 800769c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076a0:	2206      	movs	r2, #6
 80076a2:	f7f8 fda5 	bl	80001f0 <memchr>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d03f      	beq.n	800772a <_vfiprintf_r+0x20e>
 80076aa:	4b26      	ldr	r3, [pc, #152]	; (8007744 <_vfiprintf_r+0x228>)
 80076ac:	bb1b      	cbnz	r3, 80076f6 <_vfiprintf_r+0x1da>
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	3307      	adds	r3, #7
 80076b2:	f023 0307 	bic.w	r3, r3, #7
 80076b6:	3308      	adds	r3, #8
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076bc:	443b      	add	r3, r7
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	e768      	b.n	8007594 <_vfiprintf_r+0x78>
 80076c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076c6:	460c      	mov	r4, r1
 80076c8:	2001      	movs	r0, #1
 80076ca:	e7a6      	b.n	800761a <_vfiprintf_r+0xfe>
 80076cc:	2300      	movs	r3, #0
 80076ce:	3401      	adds	r4, #1
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	4619      	mov	r1, r3
 80076d4:	f04f 0c0a 	mov.w	ip, #10
 80076d8:	4620      	mov	r0, r4
 80076da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076de:	3a30      	subs	r2, #48	; 0x30
 80076e0:	2a09      	cmp	r2, #9
 80076e2:	d903      	bls.n	80076ec <_vfiprintf_r+0x1d0>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0c6      	beq.n	8007676 <_vfiprintf_r+0x15a>
 80076e8:	9105      	str	r1, [sp, #20]
 80076ea:	e7c4      	b.n	8007676 <_vfiprintf_r+0x15a>
 80076ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f0:	4604      	mov	r4, r0
 80076f2:	2301      	movs	r3, #1
 80076f4:	e7f0      	b.n	80076d8 <_vfiprintf_r+0x1bc>
 80076f6:	ab03      	add	r3, sp, #12
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	462a      	mov	r2, r5
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <_vfiprintf_r+0x22c>)
 80076fe:	a904      	add	r1, sp, #16
 8007700:	4630      	mov	r0, r6
 8007702:	f3af 8000 	nop.w
 8007706:	4607      	mov	r7, r0
 8007708:	1c78      	adds	r0, r7, #1
 800770a:	d1d6      	bne.n	80076ba <_vfiprintf_r+0x19e>
 800770c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800770e:	07d9      	lsls	r1, r3, #31
 8007710:	d405      	bmi.n	800771e <_vfiprintf_r+0x202>
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	059a      	lsls	r2, r3, #22
 8007716:	d402      	bmi.n	800771e <_vfiprintf_r+0x202>
 8007718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800771a:	f7ff fcc3 	bl	80070a4 <__retarget_lock_release_recursive>
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	065b      	lsls	r3, r3, #25
 8007722:	f53f af1d 	bmi.w	8007560 <_vfiprintf_r+0x44>
 8007726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007728:	e71c      	b.n	8007564 <_vfiprintf_r+0x48>
 800772a:	ab03      	add	r3, sp, #12
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	462a      	mov	r2, r5
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <_vfiprintf_r+0x22c>)
 8007732:	a904      	add	r1, sp, #16
 8007734:	4630      	mov	r0, r6
 8007736:	f000 f879 	bl	800782c <_printf_i>
 800773a:	e7e4      	b.n	8007706 <_vfiprintf_r+0x1ea>
 800773c:	08009e74 	.word	0x08009e74
 8007740:	08009e7e 	.word	0x08009e7e
 8007744:	00000000 	.word	0x00000000
 8007748:	080074f7 	.word	0x080074f7
 800774c:	08009e7a 	.word	0x08009e7a

08007750 <_printf_common>:
 8007750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	4616      	mov	r6, r2
 8007756:	4699      	mov	r9, r3
 8007758:	688a      	ldr	r2, [r1, #8]
 800775a:	690b      	ldr	r3, [r1, #16]
 800775c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007760:	4293      	cmp	r3, r2
 8007762:	bfb8      	it	lt
 8007764:	4613      	movlt	r3, r2
 8007766:	6033      	str	r3, [r6, #0]
 8007768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800776c:	4607      	mov	r7, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b10a      	cbz	r2, 8007776 <_printf_common+0x26>
 8007772:	3301      	adds	r3, #1
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	0699      	lsls	r1, r3, #26
 800777a:	bf42      	ittt	mi
 800777c:	6833      	ldrmi	r3, [r6, #0]
 800777e:	3302      	addmi	r3, #2
 8007780:	6033      	strmi	r3, [r6, #0]
 8007782:	6825      	ldr	r5, [r4, #0]
 8007784:	f015 0506 	ands.w	r5, r5, #6
 8007788:	d106      	bne.n	8007798 <_printf_common+0x48>
 800778a:	f104 0a19 	add.w	sl, r4, #25
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	6832      	ldr	r2, [r6, #0]
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	42ab      	cmp	r3, r5
 8007796:	dc26      	bgt.n	80077e6 <_printf_common+0x96>
 8007798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800779c:	1e13      	subs	r3, r2, #0
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	0692      	lsls	r2, r2, #26
 80077a6:	d42b      	bmi.n	8007800 <_printf_common+0xb0>
 80077a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ac:	4649      	mov	r1, r9
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	3001      	adds	r0, #1
 80077b4:	d01e      	beq.n	80077f4 <_printf_common+0xa4>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	6922      	ldr	r2, [r4, #16]
 80077ba:	f003 0306 	and.w	r3, r3, #6
 80077be:	2b04      	cmp	r3, #4
 80077c0:	bf02      	ittt	eq
 80077c2:	68e5      	ldreq	r5, [r4, #12]
 80077c4:	6833      	ldreq	r3, [r6, #0]
 80077c6:	1aed      	subeq	r5, r5, r3
 80077c8:	68a3      	ldr	r3, [r4, #8]
 80077ca:	bf0c      	ite	eq
 80077cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d0:	2500      	movne	r5, #0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	bfc4      	itt	gt
 80077d6:	1a9b      	subgt	r3, r3, r2
 80077d8:	18ed      	addgt	r5, r5, r3
 80077da:	2600      	movs	r6, #0
 80077dc:	341a      	adds	r4, #26
 80077de:	42b5      	cmp	r5, r6
 80077e0:	d11a      	bne.n	8007818 <_printf_common+0xc8>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e008      	b.n	80077f8 <_printf_common+0xa8>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4652      	mov	r2, sl
 80077ea:	4649      	mov	r1, r9
 80077ec:	4638      	mov	r0, r7
 80077ee:	47c0      	blx	r8
 80077f0:	3001      	adds	r0, #1
 80077f2:	d103      	bne.n	80077fc <_printf_common+0xac>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fc:	3501      	adds	r5, #1
 80077fe:	e7c6      	b.n	800778e <_printf_common+0x3e>
 8007800:	18e1      	adds	r1, r4, r3
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	2030      	movs	r0, #48	; 0x30
 8007806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800780a:	4422      	add	r2, r4
 800780c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007814:	3302      	adds	r3, #2
 8007816:	e7c7      	b.n	80077a8 <_printf_common+0x58>
 8007818:	2301      	movs	r3, #1
 800781a:	4622      	mov	r2, r4
 800781c:	4649      	mov	r1, r9
 800781e:	4638      	mov	r0, r7
 8007820:	47c0      	blx	r8
 8007822:	3001      	adds	r0, #1
 8007824:	d0e6      	beq.n	80077f4 <_printf_common+0xa4>
 8007826:	3601      	adds	r6, #1
 8007828:	e7d9      	b.n	80077de <_printf_common+0x8e>
	...

0800782c <_printf_i>:
 800782c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	7e0f      	ldrb	r7, [r1, #24]
 8007832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007834:	2f78      	cmp	r7, #120	; 0x78
 8007836:	4691      	mov	r9, r2
 8007838:	4680      	mov	r8, r0
 800783a:	460c      	mov	r4, r1
 800783c:	469a      	mov	sl, r3
 800783e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007842:	d807      	bhi.n	8007854 <_printf_i+0x28>
 8007844:	2f62      	cmp	r7, #98	; 0x62
 8007846:	d80a      	bhi.n	800785e <_printf_i+0x32>
 8007848:	2f00      	cmp	r7, #0
 800784a:	f000 80d4 	beq.w	80079f6 <_printf_i+0x1ca>
 800784e:	2f58      	cmp	r7, #88	; 0x58
 8007850:	f000 80c0 	beq.w	80079d4 <_printf_i+0x1a8>
 8007854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800785c:	e03a      	b.n	80078d4 <_printf_i+0xa8>
 800785e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007862:	2b15      	cmp	r3, #21
 8007864:	d8f6      	bhi.n	8007854 <_printf_i+0x28>
 8007866:	a101      	add	r1, pc, #4	; (adr r1, 800786c <_printf_i+0x40>)
 8007868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078d9 	.word	0x080078d9
 8007874:	08007855 	.word	0x08007855
 8007878:	08007855 	.word	0x08007855
 800787c:	08007855 	.word	0x08007855
 8007880:	08007855 	.word	0x08007855
 8007884:	080078d9 	.word	0x080078d9
 8007888:	08007855 	.word	0x08007855
 800788c:	08007855 	.word	0x08007855
 8007890:	08007855 	.word	0x08007855
 8007894:	08007855 	.word	0x08007855
 8007898:	080079dd 	.word	0x080079dd
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007997 	.word	0x08007997
 80078a4:	08007855 	.word	0x08007855
 80078a8:	08007855 	.word	0x08007855
 80078ac:	080079ff 	.word	0x080079ff
 80078b0:	08007855 	.word	0x08007855
 80078b4:	08007905 	.word	0x08007905
 80078b8:	08007855 	.word	0x08007855
 80078bc:	08007855 	.word	0x08007855
 80078c0:	0800799f 	.word	0x0800799f
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	1d1a      	adds	r2, r3, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	602a      	str	r2, [r5, #0]
 80078cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d4:	2301      	movs	r3, #1
 80078d6:	e09f      	b.n	8007a18 <_printf_i+0x1ec>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	0607      	lsls	r7, r0, #24
 80078de:	f103 0104 	add.w	r1, r3, #4
 80078e2:	6029      	str	r1, [r5, #0]
 80078e4:	d501      	bpl.n	80078ea <_printf_i+0xbe>
 80078e6:	681e      	ldr	r6, [r3, #0]
 80078e8:	e003      	b.n	80078f2 <_printf_i+0xc6>
 80078ea:	0646      	lsls	r6, r0, #25
 80078ec:	d5fb      	bpl.n	80078e6 <_printf_i+0xba>
 80078ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	da03      	bge.n	80078fe <_printf_i+0xd2>
 80078f6:	232d      	movs	r3, #45	; 0x2d
 80078f8:	4276      	negs	r6, r6
 80078fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fe:	485a      	ldr	r0, [pc, #360]	; (8007a68 <_printf_i+0x23c>)
 8007900:	230a      	movs	r3, #10
 8007902:	e012      	b.n	800792a <_printf_i+0xfe>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1d19      	adds	r1, r3, #4
 800790a:	6029      	str	r1, [r5, #0]
 800790c:	0605      	lsls	r5, r0, #24
 800790e:	d501      	bpl.n	8007914 <_printf_i+0xe8>
 8007910:	681e      	ldr	r6, [r3, #0]
 8007912:	e002      	b.n	800791a <_printf_i+0xee>
 8007914:	0641      	lsls	r1, r0, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0xe4>
 8007918:	881e      	ldrh	r6, [r3, #0]
 800791a:	4853      	ldr	r0, [pc, #332]	; (8007a68 <_printf_i+0x23c>)
 800791c:	2f6f      	cmp	r7, #111	; 0x6f
 800791e:	bf0c      	ite	eq
 8007920:	2308      	moveq	r3, #8
 8007922:	230a      	movne	r3, #10
 8007924:	2100      	movs	r1, #0
 8007926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800792a:	6865      	ldr	r5, [r4, #4]
 800792c:	60a5      	str	r5, [r4, #8]
 800792e:	2d00      	cmp	r5, #0
 8007930:	bfa2      	ittt	ge
 8007932:	6821      	ldrge	r1, [r4, #0]
 8007934:	f021 0104 	bicge.w	r1, r1, #4
 8007938:	6021      	strge	r1, [r4, #0]
 800793a:	b90e      	cbnz	r6, 8007940 <_printf_i+0x114>
 800793c:	2d00      	cmp	r5, #0
 800793e:	d04b      	beq.n	80079d8 <_printf_i+0x1ac>
 8007940:	4615      	mov	r5, r2
 8007942:	fbb6 f1f3 	udiv	r1, r6, r3
 8007946:	fb03 6711 	mls	r7, r3, r1, r6
 800794a:	5dc7      	ldrb	r7, [r0, r7]
 800794c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007950:	4637      	mov	r7, r6
 8007952:	42bb      	cmp	r3, r7
 8007954:	460e      	mov	r6, r1
 8007956:	d9f4      	bls.n	8007942 <_printf_i+0x116>
 8007958:	2b08      	cmp	r3, #8
 800795a:	d10b      	bne.n	8007974 <_printf_i+0x148>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	07de      	lsls	r6, r3, #31
 8007960:	d508      	bpl.n	8007974 <_printf_i+0x148>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	4299      	cmp	r1, r3
 8007968:	bfde      	ittt	le
 800796a:	2330      	movle	r3, #48	; 0x30
 800796c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007970:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007974:	1b52      	subs	r2, r2, r5
 8007976:	6122      	str	r2, [r4, #16]
 8007978:	f8cd a000 	str.w	sl, [sp]
 800797c:	464b      	mov	r3, r9
 800797e:	aa03      	add	r2, sp, #12
 8007980:	4621      	mov	r1, r4
 8007982:	4640      	mov	r0, r8
 8007984:	f7ff fee4 	bl	8007750 <_printf_common>
 8007988:	3001      	adds	r0, #1
 800798a:	d14a      	bne.n	8007a22 <_printf_i+0x1f6>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b004      	add	sp, #16
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f043 0320 	orr.w	r3, r3, #32
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	4833      	ldr	r0, [pc, #204]	; (8007a6c <_printf_i+0x240>)
 80079a0:	2778      	movs	r7, #120	; 0x78
 80079a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	6829      	ldr	r1, [r5, #0]
 80079aa:	061f      	lsls	r7, r3, #24
 80079ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80079b0:	d402      	bmi.n	80079b8 <_printf_i+0x18c>
 80079b2:	065f      	lsls	r7, r3, #25
 80079b4:	bf48      	it	mi
 80079b6:	b2b6      	uxthmi	r6, r6
 80079b8:	07df      	lsls	r7, r3, #31
 80079ba:	bf48      	it	mi
 80079bc:	f043 0320 	orrmi.w	r3, r3, #32
 80079c0:	6029      	str	r1, [r5, #0]
 80079c2:	bf48      	it	mi
 80079c4:	6023      	strmi	r3, [r4, #0]
 80079c6:	b91e      	cbnz	r6, 80079d0 <_printf_i+0x1a4>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	f023 0320 	bic.w	r3, r3, #32
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	2310      	movs	r3, #16
 80079d2:	e7a7      	b.n	8007924 <_printf_i+0xf8>
 80079d4:	4824      	ldr	r0, [pc, #144]	; (8007a68 <_printf_i+0x23c>)
 80079d6:	e7e4      	b.n	80079a2 <_printf_i+0x176>
 80079d8:	4615      	mov	r5, r2
 80079da:	e7bd      	b.n	8007958 <_printf_i+0x12c>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	6826      	ldr	r6, [r4, #0]
 80079e0:	6961      	ldr	r1, [r4, #20]
 80079e2:	1d18      	adds	r0, r3, #4
 80079e4:	6028      	str	r0, [r5, #0]
 80079e6:	0635      	lsls	r5, r6, #24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0x1c4>
 80079ec:	6019      	str	r1, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <_printf_i+0x1ca>
 80079f0:	0670      	lsls	r0, r6, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0x1c0>
 80079f4:	8019      	strh	r1, [r3, #0]
 80079f6:	2300      	movs	r3, #0
 80079f8:	6123      	str	r3, [r4, #16]
 80079fa:	4615      	mov	r5, r2
 80079fc:	e7bc      	b.n	8007978 <_printf_i+0x14c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	602a      	str	r2, [r5, #0]
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	6862      	ldr	r2, [r4, #4]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f7f8 fbf0 	bl	80001f0 <memchr>
 8007a10:	b108      	cbz	r0, 8007a16 <_printf_i+0x1ea>
 8007a12:	1b40      	subs	r0, r0, r5
 8007a14:	6060      	str	r0, [r4, #4]
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	6123      	str	r3, [r4, #16]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a20:	e7aa      	b.n	8007978 <_printf_i+0x14c>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	462a      	mov	r2, r5
 8007a26:	4649      	mov	r1, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	47d0      	blx	sl
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d0ad      	beq.n	800798c <_printf_i+0x160>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	079b      	lsls	r3, r3, #30
 8007a34:	d413      	bmi.n	8007a5e <_printf_i+0x232>
 8007a36:	68e0      	ldr	r0, [r4, #12]
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	bfb8      	it	lt
 8007a3e:	4618      	movlt	r0, r3
 8007a40:	e7a6      	b.n	8007990 <_printf_i+0x164>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4632      	mov	r2, r6
 8007a46:	4649      	mov	r1, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	47d0      	blx	sl
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d09d      	beq.n	800798c <_printf_i+0x160>
 8007a50:	3501      	adds	r5, #1
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	9903      	ldr	r1, [sp, #12]
 8007a56:	1a5b      	subs	r3, r3, r1
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dcf2      	bgt.n	8007a42 <_printf_i+0x216>
 8007a5c:	e7eb      	b.n	8007a36 <_printf_i+0x20a>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	f104 0619 	add.w	r6, r4, #25
 8007a64:	e7f5      	b.n	8007a52 <_printf_i+0x226>
 8007a66:	bf00      	nop
 8007a68:	08009e85 	.word	0x08009e85
 8007a6c:	08009e96 	.word	0x08009e96

08007a70 <__sflush_r>:
 8007a70:	898a      	ldrh	r2, [r1, #12]
 8007a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a76:	4605      	mov	r5, r0
 8007a78:	0710      	lsls	r0, r2, #28
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	d458      	bmi.n	8007b30 <__sflush_r+0xc0>
 8007a7e:	684b      	ldr	r3, [r1, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dc05      	bgt.n	8007a90 <__sflush_r+0x20>
 8007a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dc02      	bgt.n	8007a90 <__sflush_r+0x20>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d0f9      	beq.n	8007a8a <__sflush_r+0x1a>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a9c:	682f      	ldr	r7, [r5, #0]
 8007a9e:	6a21      	ldr	r1, [r4, #32]
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	d032      	beq.n	8007b0a <__sflush_r+0x9a>
 8007aa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	075a      	lsls	r2, r3, #29
 8007aaa:	d505      	bpl.n	8007ab8 <__sflush_r+0x48>
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	1ac0      	subs	r0, r0, r3
 8007ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ab2:	b10b      	cbz	r3, 8007ab8 <__sflush_r+0x48>
 8007ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ab6:	1ac0      	subs	r0, r0, r3
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4602      	mov	r2, r0
 8007abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007abe:	6a21      	ldr	r1, [r4, #32]
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b0      	blx	r6
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	d106      	bne.n	8007ad8 <__sflush_r+0x68>
 8007aca:	6829      	ldr	r1, [r5, #0]
 8007acc:	291d      	cmp	r1, #29
 8007ace:	d82b      	bhi.n	8007b28 <__sflush_r+0xb8>
 8007ad0:	4a29      	ldr	r2, [pc, #164]	; (8007b78 <__sflush_r+0x108>)
 8007ad2:	410a      	asrs	r2, r1
 8007ad4:	07d6      	lsls	r6, r2, #31
 8007ad6:	d427      	bmi.n	8007b28 <__sflush_r+0xb8>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	6062      	str	r2, [r4, #4]
 8007adc:	04d9      	lsls	r1, r3, #19
 8007ade:	6922      	ldr	r2, [r4, #16]
 8007ae0:	6022      	str	r2, [r4, #0]
 8007ae2:	d504      	bpl.n	8007aee <__sflush_r+0x7e>
 8007ae4:	1c42      	adds	r2, r0, #1
 8007ae6:	d101      	bne.n	8007aec <__sflush_r+0x7c>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b903      	cbnz	r3, 8007aee <__sflush_r+0x7e>
 8007aec:	6560      	str	r0, [r4, #84]	; 0x54
 8007aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007af0:	602f      	str	r7, [r5, #0]
 8007af2:	2900      	cmp	r1, #0
 8007af4:	d0c9      	beq.n	8007a8a <__sflush_r+0x1a>
 8007af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007afa:	4299      	cmp	r1, r3
 8007afc:	d002      	beq.n	8007b04 <__sflush_r+0x94>
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7ff fb3e 	bl	8007180 <_free_r>
 8007b04:	2000      	movs	r0, #0
 8007b06:	6360      	str	r0, [r4, #52]	; 0x34
 8007b08:	e7c0      	b.n	8007a8c <__sflush_r+0x1c>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b0      	blx	r6
 8007b10:	1c41      	adds	r1, r0, #1
 8007b12:	d1c8      	bne.n	8007aa6 <__sflush_r+0x36>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0c5      	beq.n	8007aa6 <__sflush_r+0x36>
 8007b1a:	2b1d      	cmp	r3, #29
 8007b1c:	d001      	beq.n	8007b22 <__sflush_r+0xb2>
 8007b1e:	2b16      	cmp	r3, #22
 8007b20:	d101      	bne.n	8007b26 <__sflush_r+0xb6>
 8007b22:	602f      	str	r7, [r5, #0]
 8007b24:	e7b1      	b.n	8007a8a <__sflush_r+0x1a>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	e7ad      	b.n	8007a8c <__sflush_r+0x1c>
 8007b30:	690f      	ldr	r7, [r1, #16]
 8007b32:	2f00      	cmp	r7, #0
 8007b34:	d0a9      	beq.n	8007a8a <__sflush_r+0x1a>
 8007b36:	0793      	lsls	r3, r2, #30
 8007b38:	680e      	ldr	r6, [r1, #0]
 8007b3a:	bf08      	it	eq
 8007b3c:	694b      	ldreq	r3, [r1, #20]
 8007b3e:	600f      	str	r7, [r1, #0]
 8007b40:	bf18      	it	ne
 8007b42:	2300      	movne	r3, #0
 8007b44:	eba6 0807 	sub.w	r8, r6, r7
 8007b48:	608b      	str	r3, [r1, #8]
 8007b4a:	f1b8 0f00 	cmp.w	r8, #0
 8007b4e:	dd9c      	ble.n	8007a8a <__sflush_r+0x1a>
 8007b50:	6a21      	ldr	r1, [r4, #32]
 8007b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b54:	4643      	mov	r3, r8
 8007b56:	463a      	mov	r2, r7
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b0      	blx	r6
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	dc06      	bgt.n	8007b6e <__sflush_r+0xfe>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e78e      	b.n	8007a8c <__sflush_r+0x1c>
 8007b6e:	4407      	add	r7, r0
 8007b70:	eba8 0800 	sub.w	r8, r8, r0
 8007b74:	e7e9      	b.n	8007b4a <__sflush_r+0xda>
 8007b76:	bf00      	nop
 8007b78:	dfbffffe 	.word	0xdfbffffe

08007b7c <_fflush_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	690b      	ldr	r3, [r1, #16]
 8007b80:	4605      	mov	r5, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	b913      	cbnz	r3, 8007b8c <_fflush_r+0x10>
 8007b86:	2500      	movs	r5, #0
 8007b88:	4628      	mov	r0, r5
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	b118      	cbz	r0, 8007b96 <_fflush_r+0x1a>
 8007b8e:	6a03      	ldr	r3, [r0, #32]
 8007b90:	b90b      	cbnz	r3, 8007b96 <_fflush_r+0x1a>
 8007b92:	f7ff f8f5 	bl	8006d80 <__sinit>
 8007b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f3      	beq.n	8007b86 <_fflush_r+0xa>
 8007b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ba0:	07d0      	lsls	r0, r2, #31
 8007ba2:	d404      	bmi.n	8007bae <_fflush_r+0x32>
 8007ba4:	0599      	lsls	r1, r3, #22
 8007ba6:	d402      	bmi.n	8007bae <_fflush_r+0x32>
 8007ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007baa:	f7ff fa7a 	bl	80070a2 <__retarget_lock_acquire_recursive>
 8007bae:	4628      	mov	r0, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7ff ff5d 	bl	8007a70 <__sflush_r>
 8007bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb8:	07da      	lsls	r2, r3, #31
 8007bba:	4605      	mov	r5, r0
 8007bbc:	d4e4      	bmi.n	8007b88 <_fflush_r+0xc>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	059b      	lsls	r3, r3, #22
 8007bc2:	d4e1      	bmi.n	8007b88 <_fflush_r+0xc>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc6:	f7ff fa6d 	bl	80070a4 <__retarget_lock_release_recursive>
 8007bca:	e7dd      	b.n	8007b88 <_fflush_r+0xc>

08007bcc <__swbuf_r>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	460e      	mov	r6, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	b118      	cbz	r0, 8007bde <__swbuf_r+0x12>
 8007bd6:	6a03      	ldr	r3, [r0, #32]
 8007bd8:	b90b      	cbnz	r3, 8007bde <__swbuf_r+0x12>
 8007bda:	f7ff f8d1 	bl	8006d80 <__sinit>
 8007bde:	69a3      	ldr	r3, [r4, #24]
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	071a      	lsls	r2, r3, #28
 8007be6:	d525      	bpl.n	8007c34 <__swbuf_r+0x68>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b31b      	cbz	r3, 8007c34 <__swbuf_r+0x68>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	6922      	ldr	r2, [r4, #16]
 8007bf0:	1a98      	subs	r0, r3, r2
 8007bf2:	6963      	ldr	r3, [r4, #20]
 8007bf4:	b2f6      	uxtb	r6, r6
 8007bf6:	4283      	cmp	r3, r0
 8007bf8:	4637      	mov	r7, r6
 8007bfa:	dc04      	bgt.n	8007c06 <__swbuf_r+0x3a>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f7ff ffbc 	bl	8007b7c <_fflush_r>
 8007c04:	b9e0      	cbnz	r0, 8007c40 <__swbuf_r+0x74>
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	701e      	strb	r6, [r3, #0]
 8007c14:	6962      	ldr	r2, [r4, #20]
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d004      	beq.n	8007c26 <__swbuf_r+0x5a>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	07db      	lsls	r3, r3, #31
 8007c20:	d506      	bpl.n	8007c30 <__swbuf_r+0x64>
 8007c22:	2e0a      	cmp	r6, #10
 8007c24:	d104      	bne.n	8007c30 <__swbuf_r+0x64>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f7ff ffa7 	bl	8007b7c <_fflush_r>
 8007c2e:	b938      	cbnz	r0, 8007c40 <__swbuf_r+0x74>
 8007c30:	4638      	mov	r0, r7
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	4621      	mov	r1, r4
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 f806 	bl	8007c48 <__swsetup_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d0d5      	beq.n	8007bec <__swbuf_r+0x20>
 8007c40:	f04f 37ff 	mov.w	r7, #4294967295
 8007c44:	e7f4      	b.n	8007c30 <__swbuf_r+0x64>
	...

08007c48 <__swsetup_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4b2a      	ldr	r3, [pc, #168]	; (8007cf4 <__swsetup_r+0xac>)
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	460c      	mov	r4, r1
 8007c52:	b118      	cbz	r0, 8007c5c <__swsetup_r+0x14>
 8007c54:	6a03      	ldr	r3, [r0, #32]
 8007c56:	b90b      	cbnz	r3, 8007c5c <__swsetup_r+0x14>
 8007c58:	f7ff f892 	bl	8006d80 <__sinit>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c62:	0718      	lsls	r0, r3, #28
 8007c64:	d422      	bmi.n	8007cac <__swsetup_r+0x64>
 8007c66:	06d9      	lsls	r1, r3, #27
 8007c68:	d407      	bmi.n	8007c7a <__swsetup_r+0x32>
 8007c6a:	2309      	movs	r3, #9
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e034      	b.n	8007ce4 <__swsetup_r+0x9c>
 8007c7a:	0758      	lsls	r0, r3, #29
 8007c7c:	d512      	bpl.n	8007ca4 <__swsetup_r+0x5c>
 8007c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c80:	b141      	cbz	r1, 8007c94 <__swsetup_r+0x4c>
 8007c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c86:	4299      	cmp	r1, r3
 8007c88:	d002      	beq.n	8007c90 <__swsetup_r+0x48>
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f7ff fa78 	bl	8007180 <_free_r>
 8007c90:	2300      	movs	r3, #0
 8007c92:	6363      	str	r3, [r4, #52]	; 0x34
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	6063      	str	r3, [r4, #4]
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f043 0308 	orr.w	r3, r3, #8
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	b94b      	cbnz	r3, 8007cc4 <__swsetup_r+0x7c>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cba:	d003      	beq.n	8007cc4 <__swsetup_r+0x7c>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f889 	bl	8007dd6 <__smakebuf_r>
 8007cc4:	89a0      	ldrh	r0, [r4, #12]
 8007cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cca:	f010 0301 	ands.w	r3, r0, #1
 8007cce:	d00a      	beq.n	8007ce6 <__swsetup_r+0x9e>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6963      	ldr	r3, [r4, #20]
 8007cd6:	425b      	negs	r3, r3
 8007cd8:	61a3      	str	r3, [r4, #24]
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	b943      	cbnz	r3, 8007cf0 <__swsetup_r+0xa8>
 8007cde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ce2:	d1c4      	bne.n	8007c6e <__swsetup_r+0x26>
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	0781      	lsls	r1, r0, #30
 8007ce8:	bf58      	it	pl
 8007cea:	6963      	ldrpl	r3, [r4, #20]
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	e7f4      	b.n	8007cda <__swsetup_r+0x92>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e7f7      	b.n	8007ce4 <__swsetup_r+0x9c>
 8007cf4:	20000074 	.word	0x20000074

08007cf8 <memmove>:
 8007cf8:	4288      	cmp	r0, r1
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	eb01 0402 	add.w	r4, r1, r2
 8007d00:	d902      	bls.n	8007d08 <memmove+0x10>
 8007d02:	4284      	cmp	r4, r0
 8007d04:	4623      	mov	r3, r4
 8007d06:	d807      	bhi.n	8007d18 <memmove+0x20>
 8007d08:	1e43      	subs	r3, r0, #1
 8007d0a:	42a1      	cmp	r1, r4
 8007d0c:	d008      	beq.n	8007d20 <memmove+0x28>
 8007d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d16:	e7f8      	b.n	8007d0a <memmove+0x12>
 8007d18:	4402      	add	r2, r0
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	428a      	cmp	r2, r1
 8007d1e:	d100      	bne.n	8007d22 <memmove+0x2a>
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d2a:	e7f7      	b.n	8007d1c <memmove+0x24>

08007d2c <_realloc_r>:
 8007d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d30:	4680      	mov	r8, r0
 8007d32:	4614      	mov	r4, r2
 8007d34:	460e      	mov	r6, r1
 8007d36:	b921      	cbnz	r1, 8007d42 <_realloc_r+0x16>
 8007d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	f7fe bf07 	b.w	8006b50 <_malloc_r>
 8007d42:	b92a      	cbnz	r2, 8007d50 <_realloc_r+0x24>
 8007d44:	f7ff fa1c 	bl	8007180 <_free_r>
 8007d48:	4625      	mov	r5, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d50:	f000 f8a0 	bl	8007e94 <_malloc_usable_size_r>
 8007d54:	4284      	cmp	r4, r0
 8007d56:	4607      	mov	r7, r0
 8007d58:	d802      	bhi.n	8007d60 <_realloc_r+0x34>
 8007d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d5e:	d812      	bhi.n	8007d86 <_realloc_r+0x5a>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4640      	mov	r0, r8
 8007d64:	f7fe fef4 	bl	8006b50 <_malloc_r>
 8007d68:	4605      	mov	r5, r0
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0ed      	beq.n	8007d4a <_realloc_r+0x1e>
 8007d6e:	42bc      	cmp	r4, r7
 8007d70:	4622      	mov	r2, r4
 8007d72:	4631      	mov	r1, r6
 8007d74:	bf28      	it	cs
 8007d76:	463a      	movcs	r2, r7
 8007d78:	f7ff f995 	bl	80070a6 <memcpy>
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4640      	mov	r0, r8
 8007d80:	f7ff f9fe 	bl	8007180 <_free_r>
 8007d84:	e7e1      	b.n	8007d4a <_realloc_r+0x1e>
 8007d86:	4635      	mov	r5, r6
 8007d88:	e7df      	b.n	8007d4a <_realloc_r+0x1e>

08007d8a <__swhatbuf_r>:
 8007d8a:	b570      	push	{r4, r5, r6, lr}
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	2900      	cmp	r1, #0
 8007d94:	b096      	sub	sp, #88	; 0x58
 8007d96:	4615      	mov	r5, r2
 8007d98:	461e      	mov	r6, r3
 8007d9a:	da0d      	bge.n	8007db8 <__swhatbuf_r+0x2e>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	bf0c      	ite	eq
 8007da8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dac:	2340      	movne	r3, #64	; 0x40
 8007dae:	2000      	movs	r0, #0
 8007db0:	6031      	str	r1, [r6, #0]
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	b016      	add	sp, #88	; 0x58
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	466a      	mov	r2, sp
 8007dba:	f000 f849 	bl	8007e50 <_fstat_r>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	dbec      	blt.n	8007d9c <__swhatbuf_r+0x12>
 8007dc2:	9901      	ldr	r1, [sp, #4]
 8007dc4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007dc8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007dcc:	4259      	negs	r1, r3
 8007dce:	4159      	adcs	r1, r3
 8007dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd4:	e7eb      	b.n	8007dae <__swhatbuf_r+0x24>

08007dd6 <__smakebuf_r>:
 8007dd6:	898b      	ldrh	r3, [r1, #12]
 8007dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dda:	079d      	lsls	r5, r3, #30
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	d507      	bpl.n	8007df2 <__smakebuf_r+0x1c>
 8007de2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	2301      	movs	r3, #1
 8007dec:	6163      	str	r3, [r4, #20]
 8007dee:	b002      	add	sp, #8
 8007df0:	bd70      	pop	{r4, r5, r6, pc}
 8007df2:	ab01      	add	r3, sp, #4
 8007df4:	466a      	mov	r2, sp
 8007df6:	f7ff ffc8 	bl	8007d8a <__swhatbuf_r>
 8007dfa:	9900      	ldr	r1, [sp, #0]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7fe fea6 	bl	8006b50 <_malloc_r>
 8007e04:	b948      	cbnz	r0, 8007e1a <__smakebuf_r+0x44>
 8007e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0a:	059a      	lsls	r2, r3, #22
 8007e0c:	d4ef      	bmi.n	8007dee <__smakebuf_r+0x18>
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	f043 0302 	orr.w	r3, r3, #2
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	e7e3      	b.n	8007de2 <__smakebuf_r+0xc>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	6020      	str	r0, [r4, #0]
 8007e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e22:	81a3      	strh	r3, [r4, #12]
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	6163      	str	r3, [r4, #20]
 8007e28:	9b01      	ldr	r3, [sp, #4]
 8007e2a:	6120      	str	r0, [r4, #16]
 8007e2c:	b15b      	cbz	r3, 8007e46 <__smakebuf_r+0x70>
 8007e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e32:	4630      	mov	r0, r6
 8007e34:	f000 f81e 	bl	8007e74 <_isatty_r>
 8007e38:	b128      	cbz	r0, 8007e46 <__smakebuf_r+0x70>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	f023 0303 	bic.w	r3, r3, #3
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	431d      	orrs	r5, r3
 8007e4a:	81a5      	strh	r5, [r4, #12]
 8007e4c:	e7cf      	b.n	8007dee <__smakebuf_r+0x18>
	...

08007e50 <_fstat_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	; (8007e70 <_fstat_r+0x20>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	f7fa fd74 	bl	800294a <_fstat>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d102      	bne.n	8007e6c <_fstat_r+0x1c>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	b103      	cbz	r3, 8007e6c <_fstat_r+0x1c>
 8007e6a:	6023      	str	r3, [r4, #0]
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	bf00      	nop
 8007e70:	200003f4 	.word	0x200003f4

08007e74 <_isatty_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d06      	ldr	r5, [pc, #24]	; (8007e90 <_isatty_r+0x1c>)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	f7fa fd73 	bl	800296a <_isatty>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_isatty_r+0x1a>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_isatty_r+0x1a>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	200003f4 	.word	0x200003f4

08007e94 <_malloc_usable_size_r>:
 8007e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e98:	1f18      	subs	r0, r3, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfbc      	itt	lt
 8007e9e:	580b      	ldrlt	r3, [r1, r0]
 8007ea0:	18c0      	addlt	r0, r0, r3
 8007ea2:	4770      	bx	lr

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr
